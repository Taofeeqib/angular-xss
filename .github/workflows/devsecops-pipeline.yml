name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Required permissions for code scanning API
permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  secrets-scanning:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.63.7
        with:
          path: ./
          # Only scan changes, without comparing commits
          only_verified: true
          extra_args: --debug

  sast-scanning:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    needs: secrets-scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
      
      - name: Semgrep scan
        uses: semgrep/semgrep-action@v1
        continue-on-error: true
        with:
          config: >-
            p/javascript
            p/typescript
            p/react
            r/typescript.angular.security.audit.angular-allow-trusted-dynamic-script.angular-allow-trusted-dynamic-script
            ./xss/semgrep.yaml
            ./semgrep-custom-rules.yaml
          output: semgrep-results.sarif
      
      - name: Create empty SARIF file if it doesn't exist
        run: |
          if [ ! -f "semgrep-results.sarif" ]; then
            echo '{
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "version": "2.1.0",
              "runs": [
                {
                  "tool": {
                    "driver": {
                      "name": "Semgrep",
                      "version": "placeholder",
                      "rules": []
                    }
                  },
                  "results": []
                }
              ]
            }' > semgrep-results.sarif
            echo "Created empty SARIF file as semgrep scan failed"
          fi
          
      - name: Check SARIF file
        run: |
          echo "Checking if SARIF file exists and is valid"
          if [ -f "semgrep-results.sarif" ]; then
            ls -la semgrep-results.sarif
            echo "SARIF file exists. Displaying first 20 lines:"
            head -n 20 semgrep-results.sarif
          else
            echo "SARIF file does not exist!"
          fi

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep

  sca-scanning:
    name: Software Composition Analysis
    runs-on: ubuntu-latest
    needs: sast-scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
      
      - name: OWASP Dependency-Check Scan - Backend
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Angular-XSS-Backend'
          path: './xss/api'
          format: 'SARIF'
          out: './reports'
          args: >-
            --suppression ./dependency-check-suppressions.xml
            --scan-config ./dependency-check-config.json
          
      - name: OWASP Dependency-Check Scan - Frontend
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Angular-XSS-Frontend'
          path: './xss/frontend'
          format: 'SARIF'
          out: './reports'
          args: >-
            --suppression ./dependency-check-suppressions.xml
            --scan-config ./dependency-check-config.json
          
      - name: Check SARIF files
        run: |
          echo "Checking if SARIF files exist in reports directory"
          if [ -d "./reports" ]; then
            ls -la ./reports/
            echo "Found files in reports directory"
            find ./reports -name "*.sarif" | while read file; do
              echo "Found SARIF file: $file"
            done
          else
            echo "Reports directory does not exist!"
            mkdir -p ./reports
          fi

      - name: Upload SARIF files
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: './reports/'
          category: dependency-check
          
  sbom-generation:
    name: Software Bill of Materials
    runs-on: ubuntu-latest
    needs: sca-scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate SBOM with CycloneDX
        uses: CycloneDX/gh-node-module-generatebom@master
        with:
          path: './xss'
          output: './angular-xss-sbom.json'
          
      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v3
        with:
          name: angular-xss-sbom
          path: './angular-xss-sbom.json'

  dast-scanning:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    needs: sbom-generation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Start Angular XSS application with Docker Compose
        run: |
          cd ./xss
          docker-compose build
          docker-compose up -d
          # Wait for application to be ready
          sleep 60
          
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:4200'
          allow_issue_writing: true
          cmd_options: '-a -j -T 10'
          rules_file_name: 'zap-rules.tsv'
          issue_title: 'ZAP Baseline Scan Report'
          markdown_report: true
          
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:4200'
          allow_issue_writing: true
          cmd_options: '-a -j -T 10'
          rules_file_name: 'zap-rules.tsv'
          issue_title: 'ZAP Full Scan Report'
          markdown_report: true
          
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: zap-reports
          path: |
            baseline-report.md
            full-scan-report.md
            
      - name: Stop Docker Containers
        if: always()
        run: |
          cd ./xss
          docker-compose down
          
  defectdojo-import:
    name: Import Results to DefectDojo
    runs-on: ubuntu-latest
    needs: [secrets-scanning, sast-scanning, sca-scanning, sbom-generation, dast-scanning]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
          
      - name: Import to DefectDojo
        run: |
          chmod +x ./defectdojo/import-results.sh
          ./defectdojo/import-results.sh ${{ secrets.DEFECTDOJO_URL }} ${{ secrets.DEFECTDOJO_API_KEY }} ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
          # If the script fails, continue with a warning
          if [ $? -ne 0 ]; then
            echo "::warning::DefectDojo import failed but continuing workflow"
          fi
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
