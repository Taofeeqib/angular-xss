name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Required permissions for code scanning API
permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  secrets-scanning:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Create docs/reports directory if it doesn't exist
      - name: Ensure docs/reports directory exists
        run: mkdir -p ./docs/reports

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.63.7
        with:
          path: ./
          extra_args: --debug --json
          
      # Generate TruffleHog report in docs/reports
      - name: Generate TruffleHog report
        run: |
          echo "Running TruffleHog scan manually to save report"
          docker run --rm -v $(pwd):/pwd trufflesecurity/trufflehog:latest github --repo file:///pwd --json > ./docs/reports/trufflehog-results.json || true
          
      # Upload TruffleHog results as artifact
      - name: Upload TruffleHog results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trufflehog-results
          path: ./docs/reports/trufflehog-results.json

  sast-scanning:
    name: Static Application Security Testing (CodeQL)
    runs-on: ubuntu-latest
    needs: secrets-scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      # Create docs/reports directory
      - name: Ensure docs/reports directory exists
        run: mkdir -p ./docs/reports

      # Initialize CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality
          
      # Autobuild (attempts to automatically build any compiled languages)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      # Run CodeQL Analysis - analyzes and produces SARIF file(s)
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "javascript-analysis"
          output: ./docs/reports
          
      # Copy and consolidate results to docs/reports directory
      - name: Process CodeQL SARIF results
        run: |
          echo "Listing CodeQL SARIF files in ./docs/reports:"
          find ./docs/reports -type f -name "*.sarif" | sort
          
          # Check if any SARIF files were generated
          if [ -n "$(find ./docs/reports -type f -name '*.sarif')" ]; then
            # Create a consolidated sarif file for DefectDojo
            echo "Creating consolidated SARIF file for DefectDojo"
            FIRST_FILE=$(find ./docs/reports -type f -name "*.sarif" | head -1)
            cp "$FIRST_FILE" ./docs/reports/codeql-results.sarif
            
            # Display info about the consolidated file
            echo "Consolidated SARIF file created at ./docs/reports/codeql-results.sarif"
            ls -la ./docs/reports/codeql-results.sarif
            echo "First 20 lines of consolidated SARIF file:"
            head -n 20 ./docs/reports/codeql-results.sarif
          else
            echo "No CodeQL SARIF files found, creating placeholder"
            echo '{
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "version": "2.1.0",
              "runs": [
                {
                  "tool": {
                    "driver": {
                      "name": "CodeQL",
                      "version": "placeholder",
                      "rules": []
                    }
                  },
                  "results": []
                }
              ]
            }' > ./docs/reports/codeql-results.sarif
          fi

      # CodeQL automatically uploads results, so we don't need this step.
      # We're only keeping the artifact upload for DefectDojo integration
          
      # Save SARIF as artifact
      - name: Upload SARIF as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codeql-results
          path: ./docs/reports/codeql-results.sarif

  sca-scanning:
    name: Software Composition Analysis
    runs-on: ubuntu-latest
    needs: sast-scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
      
      - name: Create reports directory
        run: mkdir -p ./docs/reports
        
      - name: OWASP Dependency-Check Scan - Backend
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Angular-XSS-Backend'
          path: './xss/api'
          format: 'SARIF'
          out: './docs/reports'
          args: >-
            --suppression ./dependency-check-suppressions.xml
            --failOnCVSS 11
          
      - name: OWASP Dependency-Check Scan - Frontend
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Angular-XSS-Frontend'
          path: './xss/frontend'
          format: 'SARIF'
          out: './docs/reports'
          args: >-
            --suppression ./dependency-check-suppressions.xml
            --failOnCVSS 11
          
      - name: Check SARIF files
        run: |
          echo "Checking if SARIF files exist in docs/reports directory"
          if [ -d "./docs/reports" ]; then
            ls -la ./docs/reports/
            echo "Found files in docs/reports directory"
            sarifCount=$(find ./docs/reports -name "*.sarif" | wc -l)
            
            if [ "$sarifCount" -gt 0 ]; then
              find ./docs/reports -name "*.sarif" | while read file; do
                echo "Found SARIF file: $file"
                echo "File contents (first 20 lines):"
                head -n 20 "$file"
              done
            else
              echo "No SARIF files found in docs/reports directory. Creating placeholder."
              echo '{
                "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
                "version": "2.1.0",
                "runs": [
                  {
                    "tool": {
                      "driver": {
                        "name": "OWASP Dependency-Check",
                        "version": "placeholder",
                        "rules": []
                      }
                    },
                    "results": []
                  }
                ]
              }' > ./docs/reports/dependency-check-placeholder.sarif
            fi
          else
            echo "Reports directory does not exist!"
            mkdir -p ./docs/reports
            echo '{
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "version": "2.1.0",
              "runs": [
                {
                  "tool": {
                    "driver": {
                      "name": "OWASP Dependency-Check",
                      "version": "placeholder",
                      "rules": []
                    }
                  },
                  "results": []
                }
              ]
            }' > ./docs/reports/dependency-check-placeholder.sarif
          fi

      - name: Find SARIF files
        id: find-sarif
        run: |
          SARIF_FILES=$(find ./docs/reports -name "*.sarif" | tr '\n' ',' | sed 's/,$//')
          if [ -z "$SARIF_FILES" ]; then
            echo "No SARIF files found, using placeholder"
            SARIF_FILES="./docs/reports/dependency-check-placeholder.sarif"
          fi
          echo "sarif_files=$SARIF_FILES" >> $GITHUB_OUTPUT
          echo "Found SARIF files: $SARIF_FILES"

      - name: Upload SARIF files
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.find-sarif.outputs.sarif_files }}
          category: dependency-check
          
      # Copy SARIF to artifact directory for persistent storage
      - name: Upload SCA Results as Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sca-results
          path: ./docs/reports/
          
  sbom-generation:
    name: Software Bill of Materials
    runs-on: ubuntu-latest
    needs: sca-scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Create docs/reports directory if it doesn't exist
      - name: Ensure docs/reports directory exists
        run: mkdir -p ./docs/reports

      - name: Generate SBOM with CycloneDX
        uses: CycloneDX/gh-node-module-generatebom@master
        with:
          path: './xss'
          output: './docs/reports/angular-xss-sbom.json'
          
      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: angular-xss-sbom
          path: './docs/reports/angular-xss-sbom.json'

  dast-scanning:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    needs: sbom-generation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Start Angular XSS application with Docker Compose
        run: |
          cd ./xss
          docker-compose build
          docker-compose up -d
          # Wait for application to be ready
          sleep 60
          
      # Create docs/reports directory if it doesn't exist
      - name: Ensure docs/reports directory exists
        run: mkdir -p ./docs/reports
        
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:4200'
          allow_issue_writing: true
          cmd_options: '-a -j -T 10'
          rules_file_name: 'zap-rules.tsv'
          issue_title: 'ZAP Baseline Scan Report'
          markdown_report: true
          
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:4200'
          allow_issue_writing: true
          cmd_options: '-a -j -T 10'
          rules_file_name: 'zap-rules.tsv'
          issue_title: 'ZAP Full Scan Report'
          markdown_report: true
          
      # Copy ZAP reports to docs/reports directory
      - name: Copy ZAP reports to docs/reports
        run: |
          if [ -f "baseline-report.md" ]; then
            cp baseline-report.md ./docs/reports/
          fi
          
          if [ -f "full-scan-report.md" ]; then
            cp full-scan-report.md ./docs/reports/
          fi
          
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-reports
          path: ./docs/reports/
            
      - name: Stop Docker Containers
        if: always()
        run: |
          cd ./xss
          docker-compose down
          
  defectdojo-import:
    name: Import Results to DefectDojo
    runs-on: ubuntu-latest
    needs: [secrets-scanning, sast-scanning, sca-scanning, sbom-generation, dast-scanning]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      # Copy artifacts to docs/reports for local usage
      - name: Copy artifacts to docs/reports
        run: |
          mkdir -p ./docs/reports
          
          # Try to copy any existing reports from artifacts
          find ./artifacts -type f -name "*.sarif" -o -name "*.json" -o -name "*.md" | while read file; do
            cp "$file" ./docs/reports/
          done
          
          # List all files in docs/reports for verification
          echo "Files in docs/reports directory:"
          ls -la ./docs/reports/
          
      - name: Import to DefectDojo
        run: |
          chmod +x ./defectdojo/import-results.sh
          ./defectdojo/import-results.sh ${{ secrets.DEFECTDOJO_URL }} ${{ secrets.DEFECTDOJO_API_KEY }} ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
          # If the script fails, continue with a warning
          if [ $? -ne 0 ]; then
            echo "::warning::DefectDojo import failed but continuing workflow"
          fi
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}

